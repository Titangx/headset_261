
/home/svc-audio-dspsw/kymera_builds/builds/2021/kymera_2103100121/kalimba/kymera/tools/KCSMaker/out/7120/streplus_rom_release/download/debugbin/download_va_graph_manager.elf:     file format elf32-littlekalimba

Disassembly of section .text_minim:

84200000 <Lc_vagm_init_1>:
 * \brief Initialize the capability specific data.
 *
 * \param op_data Pointer to the operator instance data.
 */
static void vagm_init(OPERATOR_DATA *op_data)
{
84200000:	c8 1c       	pushm <FP(=SP), rLink>;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200002:	ff fd 02 f0 	call (m) 0x4e6;
84200006:	25 e7 
 */
static void vagm_init(OPERATOR_DATA *op_data)
{
    VAGM_OP_DATA * ext_data = get_instance_data(op_data);
    /* (By default 32MHz is supported) */
    ext_data->graph_load = OPMSG_VA_GM_LOAD_LOW;
84200008:	c1 20       	rMAC = Null + 3;
8420000a:	11 aa       	MB[r0 + 16] = rMAC;
    ext_data->wait_for_qva = FALSE;
8420000c:	90 8f       	M[r0 + 24] = Null;
    ext_data->wait_for_vad = FALSE;
8420000e:	50 8f       	M[r0 + 20] = Null;
    ext_data->aov_operation = NO_OPERATION;
84200010:	20 f0 20 8a 	MB[r0 + 32] = Null;
    ext_data->splitter_deactivate_to_buffer = FALSE;
84200014:	d0 8f       	M[r0 + 28] = Null;
    ext_data->voice_activity = FALSE;
84200016:	50 9e       	M[r0 + 36] = Null;
    ext_data->lp_active = FALSE;
84200018:	90 9e       	M[r0 + 40] = Null;
#ifdef GM_SENDS_COMMANDS
    ext_data->issued_cmd = COMMAND_NONE;
#endif
    ext_data->buffer_time_offset_ms = BUFFER_TIME_OFFSET_MS;
8420001a:	01 f0 f4 41 	rMAC = Null + 500;
8420001e:	d1 9e       	M[r0 + 44] = rMAC;

84200020 <Lc_vagm_init_2>:
}
84200020:	c8 48       	popm <FP, rLink>;
84200022:	d8 4c       	rts;

84200024 <Lc_vagm_process_data_1>:
84200024:	d8 4c       	rts;

84200026 <Lc_vagm_connect_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_connect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200026:	c8 1c       	pushm <FP(=SP), rLink>;
84200028:	2c 00       	r2 = r3 + Null;
    return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, response_data);
8420002a:	03 f0 00 60 	r1 = Null + 4096;
8420002e:	ff fd 02 f0 	call (m) 0x4bc;
84200032:	2f e4 

84200034 <Lc_vagm_connect_2>:
}
84200034:	c8 48       	popm <FP, rLink>;
84200036:	d8 4c       	rts;

84200038 <Lc_vagm_disconnect_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_disconnect(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200038:	c8 1c       	pushm <FP(=SP), rLink>;
8420003a:	2c 00       	r2 = r3 + Null;
    return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, response_data);
8420003c:	03 f0 00 60 	r1 = Null + 4096;
84200040:	ff fd 02 f0 	call (m) 0x4bc;
84200044:	3d e3 

84200046 <Lc_vagm_disconnect_2>:
}
84200046:	c8 48       	popm <FP, rLink>;
84200048:	d8 4c       	rts;

8420004a <Lc_vagm_buffer_details_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_buffer_details(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
8420004a:	c8 1c       	pushm <FP(=SP), rLink>;
    bool result = base_op_buffer_details(op_data, message_data, response_id, response_data);
8420004c:	ff fd 01 f0 	call (m) 0x37c;
84200050:	31 e9 

84200052 <Lc_vagm_buffer_details_2>:

    return result;
84200052:	c8 48       	popm <FP, rLink>;
84200054:	d8 4c       	rts;

84200056 <Lc_vagm_get_sched_info_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_get_sched_info(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200056:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200058:	17 00       	r5 = r0 + Null;
8420005a:	2e 00       	r4 = r3 + Null;
    OP_SCHED_INFO_RSP* resp;

    resp = base_op_get_sched_info_ex(op_data, message_data, response_id);
8420005c:	ff fd 01 f0 	call (m) 0x41c;
84200060:	21 ee 
    if (resp == NULL)
84200062:	10 04       	Null = r0 - Null;
84200064:	09 62       	if NE jump (m) Lc_vagm_get_sched_info_3;

84200066 <Lc_vagm_get_sched_info_2>:
    {
        return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, response_data);
84200066:	03 f0 00 60 	r1 = Null + 4096;
8420006a:	34 00       	r2 = r4 + Null;
8420006c:	3a 00       	r0 = r5 + Null;
8420006e:	ff fd 02 f0 	call (m) 0x4bc;
84200072:	2f e2 
84200074:	05 6e       	jump (m) Lc_vagm_get_sched_info_4;

84200076 <Lc_vagm_get_sched_info_3>:
    }
    *response_data = resp;
84200076:	32 ee       	M[r4 + Null] = r0;

    resp->block_size = 1;
84200078:	41 20       	rMAC = Null + 1;
8420007a:	91 8e       	M[r0 + 8] = rMAC;

    return TRUE;
8420007c:	0a 00       	r0 = rMAC + Null;

8420007e <Lc_vagm_get_sched_info_4>:
}
8420007e:	f2 48       	popm <FP, r4, r5, rLink>;
84200080:	d8 4c       	rts;

84200082 <Lc_vagm_get_data_format_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_get_data_format(OPERATOR_DATA *op_data, void *message_data, unsigned *response_id, void **response_data)
{
84200082:	c8 1c       	pushm <FP(=SP), rLink>;
84200084:	2c 00       	r2 = r3 + Null;
    return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, response_data);
84200086:	03 f0 00 60 	r1 = Null + 4096;
8420008a:	ff fd 02 f0 	call (m) 0x4bc;
8420008e:	33 e1 

84200090 <Lc_vagm_get_data_format_2>:
}
84200090:	c8 48       	popm <FP, rLink>;
84200092:	d8 4c       	rts;

84200094 <Lc_vagm_message_response_handler_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_message_response_handler(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200094:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200096:	16 00       	r4 = r0 + Null;
84200098:	1f 00       	r5 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
8420009a:	ff fd 02 f0 	call (m) 0x4e6;
8420009e:	2d e2 
842000a0:	10 09       	r6 = r0 + Null;
 * response
 */
static bool vagm_message_response_handler(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    OPERATOR_ID src_op_id = OPMSG_FIELD_GET(message_data, OPMSG_OP_CLIENT_MESSAGE_RESPONSE, SOURCE_OP_ID);
842000a2:	f9 88       	rMAC = M[r5 + 12];
842000a4:	8b c6       	r1 = rMAC AND 0xffff;
    STATUS_KYMERA status = (STATUS_KYMERA) OPMSG_FIELD_GET(message_data, OPMSG_OP_CLIENT_MESSAGE_RESPONSE, STATUS);
842000a6:	39 89       	rMAC = M[r5 + 16];

    if (status == STATUS_OK && src_op_id != 0)
842000a8:	09 0c       	rMAC = SE16 rMAC;
842000aa:	28 62       	if NE jump (m) Lc_vagm_message_response_handler_12;

842000ac <Lc_vagm_message_response_handler_2>:
842000ac:	18 04       	Null = r1 - Null;
842000ae:	26 60       	if EQ jump (m) Lc_vagm_message_response_handler_12;

842000b0 <Lc_vagm_message_response_handler_3>:
    {
        if (src_op_id == ext_data->vad_op_id)
842000b0:	8f f3 80 c2 	Null = r1 - M[r6];
842000b4:	04 62       	if NE jump (m) Lc_vagm_message_response_handler_5;

842000b6 <Lc_vagm_message_response_handler_4>:
        {
            L3_DBG_MSG("VA_GM: response from VAD");
            ext_data->wait_for_vad = FALSE;
842000b6:	80 f0 05 8e 	M[r6 + 20] = Null;
842000ba:	25 6e       	jump (m) Lc_vagm_message_response_handler_13;

842000bc <Lc_vagm_message_response_handler_5>:
        }
        else if (src_op_id == ext_data->qva_op_id)
842000bc:	81 f0 01 88 	rMAC = M[r6 + 4];
842000c0:	58 04       	Null = r1 - rMAC;
842000c2:	04 62       	if NE jump (m) Lc_vagm_message_response_handler_7;

842000c4 <Lc_vagm_message_response_handler_6>:
        {
            L3_DBG_MSG("VA_GM: response from QVA");
            ext_data->wait_for_qva = FALSE;
842000c4:	80 f0 06 8e 	M[r6 + 24] = Null;
842000c8:	1e 6e       	jump (m) Lc_vagm_message_response_handler_13;

842000ca <Lc_vagm_message_response_handler_7>:
        }
        else if (src_op_id == ext_data->cvc_op_id)
842000ca:	81 f0 02 88 	rMAC = M[r6 + 8];
842000ce:	58 04       	Null = r1 - rMAC;
842000d0:	1a 60       	if EQ jump (m) Lc_vagm_message_response_handler_13;

842000d2 <Lc_vagm_message_response_handler_8>:
        {
            L3_DBG_MSG("VA_GM: response from CVC");
            /* We don't need to wait for CVC response. */
        }
        else if (src_op_id == ext_data->splitter_op_id)
842000d2:	81 f0 03 88 	rMAC = M[r6 + 12];
842000d6:	58 04       	Null = r1 - rMAC;
842000d8:	0b 62       	if NE jump (m) Lc_vagm_message_response_handler_11;

842000da <Lc_vagm_message_response_handler_9>:
        {
            L3_DBG_MSG("VA_GM: response from Splitter");
            if (ext_data->splitter_deactivate_to_buffer)
842000da:	80 f0 07 88 	Null = M[r6 + 28];
842000de:	13 60       	if EQ jump (m) Lc_vagm_message_response_handler_13;

842000e0 <Lc_vagm_message_response_handler_10>:
            {
                configure_splitter(op_data, OPMSG_SPLITTER_ID_BUFFER_STREAMS);
842000e0:	43 21       	r1 = Null + 5;
842000e2:	32 00       	r0 = r4 + Null;
842000e4:	01 f0 29 ee 	call (m) Lc_configure_splitter_1;
                ext_data->splitter_deactivate_to_buffer = FALSE;
842000e8:	80 f0 07 8e 	M[r6 + 28] = Null;
842000ec:	0c 6e       	jump (m) Lc_vagm_message_response_handler_13;

842000ee <Lc_vagm_message_response_handler_11>:
            }
        }
        else
        {
            /* Operator id is unrecognized */
            fault_diatribe(FAULT_AUDIO_VAGM_UNRECOGNIZED_OPERATOR, src_op_id);
842000ee:	02 f0 65 40 	r0 = Null + 101;
842000f2:	ff fd b5 f0 	call (m) 0x16ca6;
842000f6:	35 ed 
842000f8:	06 6e       	jump (m) Lc_vagm_message_response_handler_13;

842000fa <Lc_vagm_message_response_handler_12>:
        }
    }
    else
    {
        /* Operation configuration went wrong */
        fault_diatribe(FAULT_AUDIO_VAGM_ERROR_MESSAGE, src_op_id);
842000fa:	02 f0 66 40 	r0 = Null + 102;
842000fe:	ff fd b5 f0 	call (m) 0x16ca6;
84200102:	29 ed 

84200104 <Lc_vagm_message_response_handler_13>:
    }
    return TRUE;
84200104:	42 20       	r0 = Null + 1;

84200106 <Lc_vagm_message_response_handler_14>:
}
84200106:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200108:	d8 4c       	rts;

8420010a <Lc_vagm_delegated_ops_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_delegated_ops(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420010a:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
8420010c:	10 09       	r6 = r0 + Null;
8420010e:	1f 00       	r5 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200110:	ff fd 01 f0 	call (m) 0x4e6;
84200114:	37 ee 
84200116:	16 00       	r4 = r0 + Null;
 * response
 */
static bool vagm_delegated_ops(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned msg_len = OPMGR_GET_OPMSG_LENGTH((OP_MSG_REQ *)message_data);
84200118:	79 f0 01 88 	r7 = M[r5 + 4];

    if (msg_len < OPMSG_OP_CLIENT_DELEGATED_OPERATORS_OPERATORS_WORD_OFFSET
                  + VAGM_MIN_DELEGATED_OPERATORS)
8420011c:	90 f0 03 24 	Null = r7 - 3;
84200120:	02 f0 89 e0 	if C jump (m) Lc_vagm_delegated_ops_3;

84200124 <Lc_vagm_delegated_ops_2>:
    {
        return FALSE;
84200124:	02 00       	r0 = Null + Null;
84200126:	31 6e       	jump (m) Lc_vagm_delegated_ops_11;

84200128 <Lc_vagm_delegated_ops_3>:
    }
    if (msg_len > OPMSG_OP_CLIENT_DELEGATED_OPERATORS_OPERATORS_WORD_OFFSET
                  + VAGM_MAX_DELEGATED_OPERATORS)
84200128:	90 f0 05 24 	Null = r7 - 5;
8420012c:	f8 ff f9 ef 	if HI jump (m) Lc_vagm_delegated_ops_2;

84200130 <Lc_vagm_delegated_ops_4>:
    {
        return FALSE;
    }

    vagm_init(op_data);
84200130:	42 08       	r0 = r6 + Null;
84200132:	67 4f       	call (m) Lc_vagm_init_1;

    L3_DBG_MSG("VA_GM: delegated operators");

    /* Application client will send the VAD operator in the first position. */
    ext_data->vad_op_id = OPMSG_FIELD_GET_FROM_OFFSET(message_data, OPMSG_OP_CLIENT_DELEGATED_OPERATORS, OPERATORS, 0);
84200134:	f9 88       	rMAC = M[r5 + 12];
84200136:	89 c6       	rMAC = rMAC AND 0xffff;
84200138:	31 ee       	M[r4 + Null] = rMAC;
    /* Application client will send the VAD operator in the second position. */
    ext_data->qva_op_id = OPMSG_FIELD_GET_FROM_OFFSET(message_data, OPMSG_OP_CLIENT_DELEGATED_OPERATORS, OPERATORS, 1);
8420013a:	39 89       	rMAC = M[r5 + 16];
8420013c:	89 c6       	rMAC = rMAC AND 0xffff;
8420013e:	71 8e       	M[r4 + 4] = rMAC;

    if (msg_len > OPMSG_OP_CLIENT_DELEGATED_OPERATORS_OPERATORS_WORD_OFFSET
                  + VAGM_MIN_DELEGATED_OPERATORS)
84200140:	90 f0 03 24 	Null = r7 - 3;
84200144:	09 f0 99 e0 	if LS jump (m) Lc_vagm_delegated_ops_7;

84200148 <Lc_vagm_delegated_ops_5>:
    {
        /* Application client will send the CVC operator in the third position. */
        ext_data->cvc_op_id = OPMSG_FIELD_GET_FROM_OFFSET(message_data, OPMSG_OP_CLIENT_DELEGATED_OPERATORS, OPERATORS, 2);
84200148:	79 89       	rMAC = M[r5 + 20];
8420014a:	89 c6       	rMAC = rMAC AND 0xffff;
8420014c:	b1 8e       	M[r4 + 8] = rMAC;
    }
    if (msg_len > OPMSG_OP_CLIENT_DELEGATED_OPERATORS_OPERATORS_WORD_OFFSET
                  + VAGM_MIN_DELEGATED_OPERATORS + 1)
8420014e:	90 f0 04 24 	Null = r7 - 4;
84200152:	09 f0 8b e0 	if LS jump (m) Lc_vagm_delegated_ops_7;

84200156 <Lc_vagm_delegated_ops_6>:
    {
        /* Application client will send the Splitter operator in the fourth position. */
        ext_data->splitter_op_id = OPMSG_FIELD_GET_FROM_OFFSET(message_data, OPMSG_OP_CLIENT_DELEGATED_OPERATORS, OPERATORS, 3);
84200156:	b9 89       	rMAC = M[r5 + 24];
84200158:	89 c6       	rMAC = rMAC AND 0xffff;
8420015a:	f1 8e       	M[r4 + 12] = rMAC;

8420015c <Lc_vagm_delegated_ops_7>:
    }

    configure_vad(op_data, OPMSG_VAD_MODE_FULL_PROC);
8420015c:	43 20       	r1 = Null + 1;
8420015e:	42 08       	r0 = r6 + Null;
84200160:	01 f0 37 e6 	call (m) Lc_configure_vad_1;

    if (ext_data->splitter_op_id != 0)
84200164:	f0 88       	Null = M[r4 + 12];
84200166:	0c 60       	if EQ jump (m) Lc_vagm_delegated_ops_9;

84200168 <Lc_vagm_delegated_ops_8>:
    {
        configure_qva(op_data, OPMSG_QVA_MODE_FULL_PROC);
84200168:	43 20       	r1 = Null + 1;
8420016a:	42 08       	r0 = r6 + Null;
8420016c:	01 f0 2f e7 	call (m) Lc_configure_qva_1;
        configure_splitter(op_data, OPMSG_SPLITTER_ID_DEACTIVATE_STREAMS);
84200170:	03 21       	r1 = Null + 4;
84200172:	42 08       	r0 = r6 + Null;
84200174:	01 f0 39 e9 	call (m) Lc_configure_splitter_1;
        ext_data->splitter_deactivate_to_buffer = TRUE;
84200178:	41 20       	rMAC = Null + 1;
8420017a:	f1 8f       	M[r4 + 28] = rMAC;
8420017c:	05 6e       	jump (m) Lc_vagm_delegated_ops_10;

8420017e <Lc_vagm_delegated_ops_9>:
    }
    else
    {
        configure_qva(op_data, OPMSG_QVA_MODE_PASS_THRU);
8420017e:	83 20       	r1 = Null + 2;
84200180:	42 08       	r0 = r6 + Null;
84200182:	01 f0 39 e6 	call (m) Lc_configure_qva_1;

84200186 <Lc_vagm_delegated_ops_10>:
    }

    return TRUE;
84200186:	42 20       	r0 = Null + 1;

84200188 <Lc_vagm_delegated_ops_11>:
}
84200188:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
8420018a:	d8 4c       	rts;

8420018c <Lc_vagm_trigger_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_trigger(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420018c:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420018e:	17 00       	r5 = r0 + Null;
84200190:	18 09       	r6 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200192:	ff fd 01 f0 	call (m) 0x4e6;
84200196:	35 ea 
84200198:	16 00       	r4 = r0 + Null;
 * response
 */
static bool vagm_trigger(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    OPERATOR_ID src_op_id = OPMSG_FIELD_GET(message_data, OPMSG_OP_CLIENT_UNSOLICITED_MESSAGE, SOURCE_OP_ID);
8420019a:	81 f0 03 88 	rMAC = M[r6 + 12];
8420019e:	19 f7 ff 1f 	r7 = rMAC AND 0xffff;
 */
static inline bool waiting_for_any_response(VAGM_OP_DATA *ext_data)
{
    return (ext_data->wait_for_vad ||
            ext_data->wait_for_qva ||
            ext_data->aov_operation != NO_OPERATION);
842001a2:	70 89       	Null = M[r4 + 20];
842001a4:	16 62       	if NE jump (m) Lc_vagm_trigger_8;

842001a6 <Lc_vagm_trigger_2>:
842001a6:	b0 89       	Null = M[r4 + 24];
842001a8:	14 62       	if NE jump (m) Lc_vagm_trigger_8;

842001aa <Lc_vagm_trigger_3>:
842001aa:	61 f0 20 80 	rMAC = MBS[r4 + 32];
842001ae:	11 62       	if NE jump (m) Lc_vagm_trigger_8;

842001b0 <Lc_vagm_trigger_4>:
         * This task should run at priority 0, so that the messages
         * are handled sequentially. If this happens, we can ignore it. */
        return TRUE;
    }

    if (src_op_id == ext_data->vad_op_id)
842001b0:	6f f9 80 c2 	Null = r7 - M[r4];
842001b4:	24 62       	if NE jump (m) Lc_vagm_trigger_12;

842001b6 <Lc_vagm_trigger_5>:
    {
        L3_DBG_MSG("VA_GM: positive trigger from VAD");

        if (ext_data->lp_active)
842001b6:	b0 98       	Null = M[r4 + 40];
842001b8:	0e 60       	if EQ jump (m) Lc_vagm_trigger_9;

842001ba <Lc_vagm_trigger_6>:
        {
            /**
             * In low power mode, the MIPS budged is not enough to run QVA.
             * We send a request to the framework to switch to a higher clock.
             */
            if (!manage_clock(op_data, TRUE))
842001ba:	43 20       	r1 = Null + 1;
842001bc:	3a 00       	r0 = r5 + Null;
842001be:	fc 4e       	call (m) Lc_manage_clock_1;
842001c0:	10 04       	Null = r0 - Null;
842001c2:	07 62       	if NE jump (m) Lc_vagm_trigger_8;

842001c4 <Lc_vagm_trigger_7>:
            {
                /* AOV client is not present. Cannot change clock. */
                fault_diatribe(FAULT_AUDIO_VAGM_AOV_NOT_PRESENT, src_op_id);
842001c4:	02 f0 67 40 	r0 = Null + 103;
842001c8:	4b 08       	r1 = r7 + Null;
842001ca:	ff fd b5 f0 	call (m) 0x16ca6;
842001ce:	3d e6 

842001d0 <Lc_vagm_trigger_8>:
    if (waiting_for_any_response(ext_data))
    {
        /* A trigger came while waiting for response by operators or aov.
         * This task should run at priority 0, so that the messages
         * are handled sequentially. If this happens, we can ignore it. */
        return TRUE;
842001d0:	42 20       	r0 = Null + 1;
842001d2:	44 6e       	jump (m) Lc_vagm_trigger_18;

842001d4 <Lc_vagm_trigger_9>:
                fault_diatribe(FAULT_AUDIO_VAGM_AOV_NOT_PRESENT, src_op_id);
            }
        }
        else
        {
            ext_data->voice_activity = TRUE;
842001d4:	08 71       	r6 = Null + 1;
842001d6:	68 f0 09 8e 	M[r4 + 36] = r6;

            if (ext_data->splitter_op_id != 0)
842001da:	f0 88       	Null = M[r4 + 12];
842001dc:	09 60       	if EQ jump (m) Lc_vagm_trigger_11;

842001de <Lc_vagm_trigger_10>:
            {
                reinit_wwe(op_data);
842001de:	3a 00       	r0 = r5 + Null;
842001e0:	01 f0 35 e1 	call (m) Lc_reinit_wwe_1;
                configure_splitter(op_data, OPMSG_SPLITTER_ID_ACTIVATE_STREAMS_AFTER_TIMESTAMP);
842001e4:	c3 20       	r1 = Null + 3;
842001e6:	3a 00       	r0 = r5 + Null;
842001e8:	01 f0 25 e6 	call (m) Lc_configure_splitter_1;
842001ec:	f2 6f       	jump (m) Lc_vagm_trigger_8;

842001ee <Lc_vagm_trigger_11>:
            }
            else
            {
                configure_qva(op_data, OPMSG_QVA_MODE_FULL_PROC);
842001ee:	43 08       	r1 = r6 + Null;
842001f0:	3a 00       	r0 = r5 + Null;
842001f2:	01 f0 29 e3 	call (m) Lc_configure_qva_1;
                ext_data->wait_for_qva = TRUE;
842001f6:	68 f0 06 8e 	M[r4 + 24] = r6;
842001fa:	eb 6f       	jump (m) Lc_vagm_trigger_8;

842001fc <Lc_vagm_trigger_12>:
            }
        }
    }
    else if (src_op_id == ext_data->qva_op_id)
842001fc:	71 88       	rMAC = M[r4 + 4];
842001fe:	1f f9 00 c2 	Null = r7 - rMAC;
84200202:	25 62       	if NE jump (m) Lc_vagm_trigger_17;

84200204 <Lc_vagm_trigger_13>:
    {
        L3_DBG_MSG("VA_GM: positive trigger from QVA");
        unsigned *payload = OPMSG_FIELD_POINTER_GET(message_data, OPMSG_OP_CLIENT_UNSOLICITED_MESSAGE, PAYLOAD);
84200204:	8a f0 10 20 	r8 = r6 + 16;
        unsigned length = OPMGR_GET_OPCMD_MESSAGE_LENGTH((OPMSG_HEADER*)message_data);
84200208:	88 f0 01 88 	r6 = M[r6 + 4];
        configure_vad(op_data, OPMSG_VAD_MODE_PASS_THRU);
8420020c:	83 20       	r1 = Null + 2;
8420020e:	3a 00       	r0 = r5 + Null;
84200210:	01 f0 27 e1 	call (m) Lc_configure_vad_1;
        configure_qva(op_data, OPMSG_QVA_MODE_PASS_THRU);
84200214:	83 20       	r1 = Null + 2;
84200216:	3a 00       	r0 = r5 + Null;
84200218:	01 f0 23 e2 	call (m) Lc_configure_qva_1;

        if (ext_data->lp_active)
8420021c:	b0 98       	Null = M[r4 + 40];
8420021e:	0e 60       	if EQ jump (m) Lc_vagm_trigger_16;

84200220 <Lc_vagm_trigger_14>:
             * notification to the application client, as the link used by
             * othe application is down.
             */
            if (aov_request_notify_trigger(op_data,
                                           length - CLIENT_UNSOLICITED_MESSAGE_SIZE_EXTRA,
                                           payload))
84200220:	83 f0 02 24 	r1 = r6 - 2;
84200224:	54 08       	r2 = r8 + Null;
84200226:	3a 00       	r0 = r5 + Null;
84200228:	ff fd fb f1 	call (m) 0x3f8e2;
8420022c:	3b e5 
8420022e:	10 04       	Null = r0 - Null;
84200230:	ca 61       	if EQ jump (m) Lc_vagm_trigger_7;

84200232 <Lc_vagm_trigger_15>:
            {
                ext_data->aov_operation = FWD_TRIGGER;
84200232:	c1 20       	rMAC = Null + 3;
84200234:	61 f0 20 8a 	MB[r4 + 32] = rMAC;
84200238:	cc 6f       	jump (m) Lc_vagm_trigger_8;

8420023a <Lc_vagm_trigger_16>:
             * Forward trigger notification and details to the application
             * client through the standard link used by the application.
             */
            common_send_unsolicited_message(op_data, OPMSG_REPLY_ID_VA_TRIGGER,
                                            length - CLIENT_UNSOLICITED_MESSAGE_SIZE_EXTRA,
                                            payload);
8420023a:	84 f0 02 24 	r2 = r6 - 2;
8420023e:	83 20       	r1 = Null + 2;
84200240:	55 08       	r3 = r8 + Null;
84200242:	3a 00       	r0 = r5 + Null;
84200244:	ff fd 01 f0 	call (m) 0x592;
84200248:	2f ea 
8420024a:	c3 6f       	jump (m) Lc_vagm_trigger_8;

8420024c <Lc_vagm_trigger_17>:
        }
    }
    else
    {
        /* Operator id is unrecognized */
        fault_diatribe(FAULT_AUDIO_VAGM_UNRECOGNIZED_OPERATOR, src_op_id);
8420024c:	02 f0 65 40 	r0 = Null + 101;
84200250:	4b 08       	r1 = r7 + Null;
84200252:	ff fd b5 f0 	call (m) 0x16ca6;
84200256:	35 e2 
84200258:	bc 6f       	jump (m) Lc_vagm_trigger_8;

8420025a <Lc_vagm_trigger_18>:
    }
    return TRUE;
}
8420025a:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420025c:	d8 4c       	rts;

8420025e <Lc_vagm_negative_trigger_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_negative_trigger(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420025e:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200260:	17 00       	r5 = r0 + Null;
84200262:	18 09       	r6 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200264:	ff fd 01 f0 	call (m) 0x4e6;
84200268:	23 e4 
8420026a:	16 00       	r4 = r0 + Null;
 * response
 */
static bool vagm_negative_trigger(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    OPERATOR_ID src_op_id = OPMSG_FIELD_GET(message_data, OPMSG_OP_CLIENT_UNSOLICITED_MESSAGE, SOURCE_OP_ID);
8420026c:	81 f0 03 88 	rMAC = M[r6 + 12];
84200270:	18 f7 ff 1f 	r6 = rMAC AND 0xffff;
 */
static inline bool waiting_for_any_response(VAGM_OP_DATA *ext_data)
{
    return (ext_data->wait_for_vad ||
            ext_data->wait_for_qva ||
            ext_data->aov_operation != NO_OPERATION);
84200274:	70 89       	Null = M[r4 + 20];
84200276:	2b 62       	if NE jump (m) Lc_vagm_negative_trigger_14;

84200278 <Lc_vagm_negative_trigger_2>:
84200278:	b0 89       	Null = M[r4 + 24];
8420027a:	29 62       	if NE jump (m) Lc_vagm_negative_trigger_14;

8420027c <Lc_vagm_negative_trigger_3>:
8420027c:	61 f0 20 80 	rMAC = MBS[r4 + 32];
84200280:	26 62       	if NE jump (m) Lc_vagm_negative_trigger_14;

84200282 <Lc_vagm_negative_trigger_4>:
         * This task should run at priority 0, so that the messages
         * are handled sequentially. If this happens, we can ignore it. */
        return TRUE;
    }

    if (src_op_id == ext_data->qva_op_id)
84200282:	71 88       	rMAC = M[r4 + 4];
84200284:	1f f8 00 c2 	Null = r6 - rMAC;
84200288:	22 60       	if EQ jump (m) Lc_vagm_negative_trigger_14;

8420028a <Lc_vagm_negative_trigger_5>:
    {
        L3_DBG_MSG("VA_GM: negative trigger from QVA");
        /* We will ignore this and use the negative trigger from VAD.*/
    }
    else if (src_op_id == ext_data->vad_op_id)
8420028a:	6f f8 80 c2 	Null = r6 - M[r4];
8420028e:	21 62       	if NE jump (m) Lc_vagm_negative_trigger_15;

84200290 <Lc_vagm_negative_trigger_6>:
    {
        L3_DBG_MSG("VA_GM: negative trigger from VAD");

        if (ext_data->splitter_op_id != 0)
84200290:	f0 88       	Null = M[r4 + 12];
84200292:	08 60       	if EQ jump (m) Lc_vagm_negative_trigger_8;

84200294 <Lc_vagm_negative_trigger_7>:
        {
            configure_splitter(op_data, OPMSG_SPLITTER_ID_DEACTIVATE_STREAMS);
84200294:	03 21       	r1 = Null + 4;
84200296:	3a 00       	r0 = r5 + Null;
84200298:	01 f0 35 e0 	call (m) Lc_configure_splitter_1;
            ext_data->splitter_deactivate_to_buffer = TRUE;
8420029c:	41 20       	rMAC = Null + 1;
8420029e:	f1 8f       	M[r4 + 28] = rMAC;
842002a0:	06 6e       	jump (m) Lc_vagm_negative_trigger_9;

842002a2 <Lc_vagm_negative_trigger_8>:
        }
        else
        {
            configure_qva(op_data, OPMSG_QVA_MODE_PASS_THRU);
842002a2:	83 20       	r1 = Null + 2;
842002a4:	3a 00       	r0 = r5 + Null;
842002a6:	da 4e       	call (m) Lc_configure_qva_1;
            ext_data->wait_for_qva = TRUE;
842002a8:	41 20       	rMAC = Null + 1;
842002aa:	b1 8f       	M[r4 + 24] = rMAC;

842002ac <Lc_vagm_negative_trigger_9>:
        }
        
        /* This ensures that we don't change the clock if it was already scaled
         *  back in a previous negative trigger from the VAD */
        if (ext_data->lp_active && ext_data->voice_activity)
842002ac:	b0 98       	Null = M[r4 + 40];
842002ae:	0e 60       	if EQ jump (m) Lc_vagm_negative_trigger_13;

842002b0 <Lc_vagm_negative_trigger_10>:
842002b0:	70 98       	Null = M[r4 + 36];
842002b2:	0c 60       	if EQ jump (m) Lc_vagm_negative_trigger_13;

842002b4 <Lc_vagm_negative_trigger_11>:
        {
            /**
             * Since we will wait for another VAD trigger, get back to the
             * default low power clock.
             */
            if (!manage_clock(op_data, FALSE))
842002b4:	03 00       	r1 = Null + Null;
842002b6:	3a 00       	r0 = r5 + Null;
842002b8:	7f 4e       	call (m) Lc_manage_clock_1;
842002ba:	10 04       	Null = r0 - Null;
842002bc:	07 62       	if NE jump (m) Lc_vagm_negative_trigger_13;

842002be <Lc_vagm_negative_trigger_12>:
            {
                /* AOV client is not present. Cannot change clock. */
                fault_diatribe(FAULT_AUDIO_VAGM_AOV_NOT_PRESENT, src_op_id);
842002be:	02 f0 67 40 	r0 = Null + 103;
842002c2:	43 08       	r1 = r6 + Null;
842002c4:	ff fd b4 f0 	call (m) 0x16ca6;
842002c8:	23 ef 

842002ca <Lc_vagm_negative_trigger_13>:
            }
        }
        
        ext_data->voice_activity = FALSE;
842002ca:	70 9e       	M[r4 + 36] = Null;

842002cc <Lc_vagm_negative_trigger_14>:
    if (waiting_for_any_response(ext_data))
    {
        /* A trigger came while waiting for response by operators or aov.
         * This task should run at priority 0, so that the messages
         * are handled sequentially. If this happens, we can ignore it. */
        return TRUE;
842002cc:	42 20       	r0 = Null + 1;
842002ce:	08 6e       	jump (m) Lc_vagm_negative_trigger_16;

842002d0 <Lc_vagm_negative_trigger_15>:
        ext_data->voice_activity = FALSE;
    }
    else
    {
        /* Operator id is unrecognized */
        fault_diatribe(FAULT_AUDIO_VAGM_UNRECOGNIZED_OPERATOR, src_op_id);
842002d0:	02 f0 65 40 	r0 = Null + 101;
842002d4:	43 08       	r1 = r6 + Null;
842002d6:	ff fd b4 f0 	call (m) 0x16ca6;
842002da:	31 ee 
842002dc:	f8 6f       	jump (m) Lc_vagm_negative_trigger_14;

842002de <Lc_vagm_negative_trigger_16>:
    }
    return TRUE;
}
842002de:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842002e0:	d8 4c       	rts;

842002e2 <Lc_vagm_lp_notification_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_lp_notification(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842002e2:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842002e4:	16 00       	r4 = r0 + Null;
842002e6:	18 09       	r6 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
842002e8:	ff fd 00 f0 	call (m) 0x4e6;
842002ec:	3f ef 
842002ee:	17 00       	r5 = r0 + Null;
 */
static bool vagm_lp_notification(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    L3_DBG_MSG("VA_GM: Low power notification");
    bool lp_activated = (bool) OPMSG_FIELD_GET(message_data, OPMSG_OP_CLIENT_AOV_LP, ACTIVE);
842002f0:	81 f0 03 88 	rMAC = M[r6 + 12];

    if (lp_activated)
842002f4:	18 f7 ff 1f 	r6 = rMAC AND 0xffff;
842002f8:	14 60       	if EQ jump (m) Lc_vagm_lp_notification_7;

842002fa <Lc_vagm_lp_notification_2>:
    {
        /* We are entering low power. */
        if (ext_data->cvc_op_id != 0)
842002fa:	b8 88       	Null = M[r5 + 8];
842002fc:	04 60       	if EQ jump (m) Lc_vagm_lp_notification_4;

842002fe <Lc_vagm_lp_notification_3>:
        {
            /* In low power, we cannot afford to run cvc.*/
            configure_cvc(op_data, OPMSG_CVC_SEND_MODE_PASS_THRU_LEFT);
842002fe:	03 21       	r1 = Null + 4;
84200300:	32 00       	r0 = r4 + Null;
84200302:	be 4e       	call (m) Lc_configure_cvc_1;

84200304 <Lc_vagm_lp_notification_4>:
        }
        if( ext_data->voice_activity)
84200304:	78 98       	Null = M[r5 + 36];
84200306:	14 60       	if EQ jump (m) Lc_vagm_lp_notification_10;

84200308 <Lc_vagm_lp_notification_5>:
        {
            /**
             * In low power mode, the MIPS budged is not enough to run QVA.
             * We send a request to the framework to switch to a higher clock.
             */
            if (!manage_clock(op_data, TRUE))
84200308:	43 20       	r1 = Null + 1;
8420030a:	32 00       	r0 = r4 + Null;
8420030c:	55 4e       	call (m) Lc_manage_clock_1;
8420030e:	10 04       	Null = r0 - Null;
84200310:	0f 62       	if NE jump (m) Lc_vagm_lp_notification_10;

84200312 <Lc_vagm_lp_notification_6>:
            {
                /* AOV client is not present. Cannot change clock. */
                fault_diatribe(FAULT_AUDIO_VAGM_AOV_NOT_PRESENT, 0);
84200312:	02 f0 67 40 	r0 = Null + 103;
84200316:	03 00       	r1 = Null + Null;
84200318:	ff fd b4 f0 	call (m) 0x16ca6;
8420031c:	2f ec 
8420031e:	08 6e       	jump (m) Lc_vagm_lp_notification_10;

84200320 <Lc_vagm_lp_notification_7>:
            }
        }
    }
    else
    {
        if(ext_data->lp_active)
84200320:	b8 98       	Null = M[r5 + 40];
84200322:	06 60       	if EQ jump (m) Lc_vagm_lp_notification_10;

84200324 <Lc_vagm_lp_notification_8>:
        {
            /* We are entering low power. */
            if (ext_data->cvc_op_id != 0)
84200324:	b8 88       	Null = M[r5 + 8];
84200326:	04 60       	if EQ jump (m) Lc_vagm_lp_notification_10;

84200328 <Lc_vagm_lp_notification_9>:
            {
                /* We are exiting low power. */
                configure_cvc(op_data, OPMSG_CVC_SEND_MODE_FULL_PROC);
84200328:	83 20       	r1 = Null + 2;
8420032a:	32 00       	r0 = r4 + Null;
8420032c:	a9 4e       	call (m) Lc_configure_cvc_1;

8420032e <Lc_vagm_lp_notification_10>:
        {
           /* We are still in active mode. */
        }
    }

    ext_data->lp_active = lp_activated;
8420032e:	78 f0 0a 8e 	M[r5 + 40] = r6;

    return TRUE;
84200332:	42 20       	r0 = Null + 1;

84200334 <Lc_vagm_lp_notification_11>:

}
84200334:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200336:	d8 4c       	rts;

84200338 <Lc_vagm_aov_response_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_aov_response(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200338:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
8420033a:	17 00       	r5 = r0 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
8420033c:	ff fd 00 f0 	call (m) 0x4e6;
84200340:	2b ed 
84200342:	16 00       	r4 = r0 + Null;
static bool vagm_aov_response(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);

    L3_DBG_MSG("VA_GM: Response from AOV");
    switch(ext_data->aov_operation)
84200344:	61 f0 20 80 	rMAC = MBS[r4 + 32];
84200348:	48 24       	Null = rMAC - 1;
8420034a:	0c 60       	if EQ jump (m) Lc_vagm_aov_response_6;

8420034c <Lc_vagm_aov_response_2>:
8420034c:	c8 24       	Null = rMAC - 3;
8420034e:	06 62       	if NE jump (m) Lc_vagm_aov_response_5;

84200350 <Lc_vagm_aov_response_3>:
        }
        break;
    }
    case FWD_TRIGGER:
    {
        if (ext_data->cvc_op_id != 0)
84200350:	b0 88       	Null = M[r4 + 8];
84200352:	04 60       	if EQ jump (m) Lc_vagm_aov_response_5;

84200354 <Lc_vagm_aov_response_4>:
        {
            /* We will now be exiting from low power. */
            configure_cvc(op_data, OPMSG_CVC_SEND_MODE_FULL_PROC);
84200354:	83 20       	r1 = Null + 2;
84200356:	3a 00       	r0 = r5 + Null;
84200358:	93 4e       	call (m) Lc_configure_cvc_1;

8420035a <Lc_vagm_aov_response_5>:
    {
        /* Do nothing... */
        break;
    }
    }
    ext_data->aov_operation = NO_OPERATION;
8420035a:	60 f0 20 8a 	MB[r4 + 32] = Null;

    return TRUE;
8420035e:	42 20       	r0 = Null + 1;
84200360:	14 6e       	jump (m) Lc_vagm_aov_response_10;

84200362 <Lc_vagm_aov_response_6>:
    L3_DBG_MSG("VA_GM: Response from AOV");
    switch(ext_data->aov_operation)
    {
    case SCALE_CUSTOM:
    {
        if (!ext_data->voice_activity)
84200362:	70 98       	Null = M[r4 + 36];
84200364:	fb 63       	if NE jump (m) Lc_vagm_aov_response_5;

84200366 <Lc_vagm_aov_response_7>:
        {
            ext_data->voice_activity = TRUE;
84200366:	08 71       	r6 = Null + 1;
84200368:	68 f0 09 8e 	M[r4 + 36] = r6;

            if (ext_data->splitter_op_id != 0)
8420036c:	f0 88       	Null = M[r4 + 12];
8420036e:	07 60       	if EQ jump (m) Lc_vagm_aov_response_9;

84200370 <Lc_vagm_aov_response_8>:
            {
                reinit_wwe(op_data);
84200370:	3a 00       	r0 = r5 + Null;
84200372:	51 4e       	call (m) Lc_reinit_wwe_1;
                configure_splitter(op_data, OPMSG_SPLITTER_ID_ACTIVATE_STREAMS_AFTER_TIMESTAMP);
84200374:	c3 20       	r1 = Null + 3;
84200376:	3a 00       	r0 = r5 + Null;
84200378:	9a 4e       	call (m) Lc_configure_splitter_1;
8420037a:	f0 6f       	jump (m) Lc_vagm_aov_response_5;

8420037c <Lc_vagm_aov_response_9>:
            }
            else
            {
                configure_qva(op_data, OPMSG_QVA_MODE_FULL_PROC);
8420037c:	43 08       	r1 = r6 + Null;
8420037e:	3a 00       	r0 = r5 + Null;
84200380:	6d 4e       	call (m) Lc_configure_qva_1;
                ext_data->wait_for_qva = TRUE;
84200382:	68 f0 06 8e 	M[r4 + 24] = r6;
84200386:	ea 6f       	jump (m) Lc_vagm_aov_response_5;

84200388 <Lc_vagm_aov_response_10>:
    }
    }
    ext_data->aov_operation = NO_OPERATION;

    return TRUE;
}
84200388:	f3 48       	popm <FP, r4, r5, r6, rLink>;
8420038a:	d8 4c       	rts;

8420038c <Lc_vagm_set_graph_load_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_set_graph_load(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420038c:	f1 1c       	pushm <FP(=SP), r4, rLink>;
8420038e:	1e 00       	r4 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200390:	ff fd 00 f0 	call (m) 0x4e6;
84200394:	37 ea 
static bool vagm_set_graph_load(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);

    L3_DBG_MSG("VA_GM: Graph Load");
    ext_data->graph_load = (OPMSG_VA_GM_LOAD) OPMSG_FIELD_GET(message_data, OPMSG_VA_GM_SET_GRAPH_LOAD, LOAD);
84200396:	f1 88       	rMAC = M[r4 + 12];
84200398:	11 aa       	MB[r0 + 16] = rMAC;

    return TRUE;
8420039a:	42 20       	r0 = Null + 1;

8420039c <Lc_vagm_set_graph_load_2>:
}
8420039c:	f1 48       	popm <FP, r4, rLink>;
8420039e:	d8 4c       	rts;

842003a0 <Lc_vagm_set_splitter_offset_1>:
 *
 * \return Whether the response_data field has been populated with a valid
 * response
 */
static bool vagm_set_splitter_offset(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842003a0:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842003a2:	1e 00       	r4 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
842003a4:	ff fd 00 f0 	call (m) 0x4e6;
842003a8:	23 ea 
 * response
 */
static bool vagm_set_splitter_offset(OPERATOR_DATA *op_data, void *message_data, unsigned int *resp_length, OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned value = OPMSG_FIELD_GET(message_data, OPMSG_VA_GM_SET_SPLITTER_OFFSET, OFFSET);
842003aa:	f1 88       	rMAC = M[r4 + 12];
842003ac:	89 c6       	rMAC = rMAC AND 0xffff;
    ext_data->buffer_time_offset_ms = value;
842003ae:	d1 9e       	M[r0 + 44] = rMAC;

    return TRUE;
842003b0:	42 20       	r0 = Null + 1;

842003b2 <Lc_vagm_set_splitter_offset_2>:
}
842003b2:	f1 48       	popm <FP, r4, rLink>;
842003b4:	d8 4c       	rts;

842003b6 <Lc_manage_clock_1>:
 * \param custom_clock Whether we are setting a custom clock (or the default)
 *
 * \return True if success (request successfully sent or no change needed)
 */
static bool manage_clock(OPERATOR_DATA *op_data, bool custom_clock)
{
842003b6:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842003b8:	17 00       	r5 = r0 + Null;
842003ba:	18 09       	r6 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
842003bc:	ff fd 00 f0 	call (m) 0x4e6;
842003c0:	2b e9 
842003c2:	16 00       	r4 = r0 + Null;
static bool manage_clock(OPERATOR_DATA *op_data, bool custom_clock)
{
    AOV_IF_CPU_CLK clk_val;
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);

    switch(ext_data->graph_load)
842003c4:	31 a2       	rMAC = MBU[r4 + 16];
842003c6:	48 24       	Null = rMAC - 1;
842003c8:	07 60       	if EQ jump (m) Lc_manage_clock_5;

842003ca <Lc_manage_clock_2>:
842003ca:	88 24       	Null = rMAC - 2;
842003cc:	11 60       	if EQ jump (m) Lc_manage_clock_9;

842003ce <Lc_manage_clock_3>:
842003ce:	c8 24       	Null = rMAC - 3;
842003d0:	14 62       	if NE jump (m) Lc_manage_clock_11;

842003d2 <Lc_manage_clock_4>:
        break;
    case OPMSG_VA_GM_LOAD_MEDIUM:
        clk_val = AOV_IF_CPU_CLK_BASE_CLOCK;
        break;
    case OPMSG_VA_GM_LOAD_LOW:
        clk_val = AOV_IF_CPU_CLK_SLOW_CLOCK;
842003d2:	43 21       	r1 = Null + 5;
        break;
842003d4:	02 6e       	jump (m) Lc_manage_clock_6;

842003d6 <Lc_manage_clock_5>:
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);

    switch(ext_data->graph_load)
    {
    case OPMSG_VA_GM_LOAD_FULL:
        clk_val = AOV_IF_CPU_CLK_TURBO;
842003d6:	c3 21       	r1 = Null + 7;

842003d8 <Lc_manage_clock_6>:
        return TRUE;
    }

    L3_DBG_MSG("VA_GM: request AOV");

    if (custom_clock)
842003d8:	0f f8 00 c2 	Null = r6 - Null;
842003dc:	10 60       	if EQ jump (m) Lc_manage_clock_12;

842003de <Lc_manage_clock_7>:
    {
        if (!aov_request_custom_clock(op_data, clk_val))
842003de:	3a 00       	r0 = r5 + Null;
842003e0:	ff fd fa f1 	call (m) 0x3f86c;
842003e4:	2d e4 
842003e6:	10 04       	Null = r0 - Null;
842003e8:	05 62       	if NE jump (m) Lc_manage_clock_10;

842003ea <Lc_manage_clock_8>:
        {
            return FALSE;
842003ea:	02 00       	r0 = Null + Null;
842003ec:	12 6e       	jump (m) Lc_manage_clock_14;

842003ee <Lc_manage_clock_9>:
    {
    case OPMSG_VA_GM_LOAD_FULL:
        clk_val = AOV_IF_CPU_CLK_TURBO;
        break;
    case OPMSG_VA_GM_LOAD_MEDIUM:
        clk_val = AOV_IF_CPU_CLK_BASE_CLOCK;
842003ee:	83 21       	r1 = Null + 6;
        break;
842003f0:	f4 6f       	jump (m) Lc_manage_clock_6;

842003f2 <Lc_manage_clock_10>:
    {
        if (!aov_request_custom_clock(op_data, clk_val))
        {
            return FALSE;
        }
        ext_data->aov_operation = SCALE_CUSTOM;
842003f2:	41 20       	rMAC = Null + 1;
842003f4:	61 f0 20 8a 	MB[r4 + 32] = rMAC;

842003f8 <Lc_manage_clock_11>:
        break;
    case OPMSG_VA_GM_LOAD_LOW:
        clk_val = AOV_IF_CPU_CLK_SLOW_CLOCK;
        break;
    default:
        return TRUE;
842003f8:	42 20       	r0 = Null + 1;
842003fa:	0b 6e       	jump (m) Lc_manage_clock_14;

842003fc <Lc_manage_clock_12>:
        }
        ext_data->aov_operation = SCALE_CUSTOM;
    }
    else
    {
        if (!aov_request_default_clock(op_data))
842003fc:	3a 00       	r0 = r5 + Null;
842003fe:	ff fd fa f1 	call (m) 0x3f8b6;
84200402:	39 e5 
84200404:	10 04       	Null = r0 - Null;
84200406:	f2 61       	if EQ jump (m) Lc_manage_clock_8;

84200408 <Lc_manage_clock_13>:
        {
            return FALSE;
        }
        ext_data->aov_operation = SCALE_BACK;
84200408:	81 20       	rMAC = Null + 2;
8420040a:	61 f0 20 8a 	MB[r4 + 32] = rMAC;
8420040e:	f5 6f       	jump (m) Lc_manage_clock_11;

84200410 <Lc_manage_clock_14>:
    }

    return TRUE;
}
84200410:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200412:	d8 4c       	rts;

84200414 <Lc_reinit_wwe_1>:
 *
 *
 * \param op_data Pointer to the operator instance data.
 */
static void reinit_wwe(OPERATOR_DATA *op_data)
{
84200414:	f1 1d       	pushm <FP(=SP), r4, rLink>, SP = SP + 0x10;
84200416:	16 00       	r4 = r0 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200418:	ff fd 00 f0 	call (m) 0x4e6;
8420041c:	2f e6 
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned msg[OPMSG_COMMON_MSG_REINIT_ALGORITHM_WORD_SIZE];

    L3_DBG_MSG("VA_GM: Reseting WWE");

    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_MSG_REINIT_ALGORITHM, MESSAGE_ID, OPMSG_COMMON_REINIT_ALGORITHM);
8420041e:	11 f0 1d 40 	rMAC = Null + 8221;
84200422:	19 de       	M[FP + 12] = rMAC;
    
    opmgr_op_client_send_message(op_data, ext_data->qva_op_id,
                                 OPMSG_COMMON_MSG_REINIT_ALGORITHM_WORD_SIZE,
                                 (unsigned *) &msg);
84200424:	c5 10       	r3 = FP + 12;
84200426:	44 20       	r2 = Null + 1;
84200428:	53 88       	r1 = M[r0 + 4];
8420042a:	32 00       	r0 = r4 + Null;
8420042c:	ff fd 2a f0 	call (m) 0x59a8;
84200430:	3d eb 

84200432 <Lc_reinit_wwe_2>:
}
84200432:	f1 49       	SP = SP - 0x10, popm <FP, r4, rLink>;
84200434:	d8 4c       	rts;

84200436 <Lc_configure_vad_1>:
 *
 * \param op_data Pointer to the operator instance data.
 * \param mode Operation mode to set VAD.
 */
static void configure_vad(OPERATOR_DATA *op_data, OPMSG_VAD_MODE mode)
{
84200436:	f2 1d       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x10;
84200438:	16 00       	r4 = r0 + Null;
8420043a:	1f 00       	r5 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
8420043c:	ff fd 00 f0 	call (m) 0x4e6;
84200440:	2b e5 
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned msg[OPMSG_VAD_MODE_CHANGE_WORD_SIZE];

    L3_DBG_MSG("VA_GM: Configuring VAD");

    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_VAD_MODE_CHANGE, MESSAGE_ID, OPMSG_VAD_ID_MODE_CHANGE);
84200442:	41 20       	rMAC = Null + 1;
84200444:	21 de       	M[FP + 16] = rMAC;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_VAD_MODE_CHANGE, WORKING_MODE, mode);
84200446:	2f de       	M[FP + 20] = r5;

    opmgr_op_client_send_message(op_data, ext_data->vad_op_id,
                                 OPMSG_VAD_MODE_CHANGE_WORD_SIZE,
                                 (unsigned *) &msg);
84200448:	05 11       	r3 = FP + 16;
8420044a:	84 20       	r2 = Null + 2;
8420044c:	13 e8       	r1 = M[r0 + Null];
8420044e:	32 00       	r0 = r4 + Null;
84200450:	ff fd 2a f0 	call (m) 0x59a8;
84200454:	39 ea 

84200456 <Lc_configure_vad_2>:
}
84200456:	f2 49       	SP = SP - 0x10, popm <FP, r4, r5, rLink>;
84200458:	d8 4c       	rts;

8420045a <Lc_configure_qva_1>:
 *
 * \param op_data Pointer to the operator instance data.
 * \param mode Operation mode to set QVA.
 */
static void configure_qva(OPERATOR_DATA *op_data, OPMSG_QVA_MODE mode)
{
8420045a:	f2 1d       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x10;
8420045c:	16 00       	r4 = r0 + Null;
8420045e:	1f 00       	r5 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200460:	ff fd 00 f0 	call (m) 0x4e6;
84200464:	27 e4 
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned msg[OPMSG_QVA_MODE_CHANGE_WORD_SIZE];

    L3_DBG_MSG("VA_GM: Configuring QVA");

    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_QVA_MODE_CHANGE, MESSAGE_ID, OPMSG_QVA_ID_MODE_CHANGE);
84200466:	41 20       	rMAC = Null + 1;
84200468:	21 de       	M[FP + 16] = rMAC;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_QVA_MODE_CHANGE, WORKING_MODE, mode);
8420046a:	2f de       	M[FP + 20] = r5;

    opmgr_op_client_send_message(op_data, ext_data->qva_op_id,
                                 OPMSG_QVA_MODE_CHANGE_WORD_SIZE,
                                 (unsigned *) &msg);
8420046c:	05 11       	r3 = FP + 16;
8420046e:	84 20       	r2 = Null + 2;
84200470:	53 88       	r1 = M[r0 + 4];
84200472:	32 00       	r0 = r4 + Null;
84200474:	ff fd 2a f0 	call (m) 0x59a8;
84200478:	35 e9 

8420047a <Lc_configure_qva_2>:
}
8420047a:	f2 49       	SP = SP - 0x10, popm <FP, r4, r5, rLink>;
8420047c:	d8 4c       	rts;

8420047e <Lc_configure_cvc_1>:
 *
 * \param op_data Pointer to the operator instance data.
 * \param mode Operation mode to set CVC.
 */
static void configure_cvc(OPERATOR_DATA *op_data, OPMSG_CVC_SEND_MODE mode)
{
8420047e:	f2 1e       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x20;
84200480:	16 00       	r4 = r0 + Null;
84200482:	1f 00       	r5 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
84200484:	ff fd 00 f0 	call (m) 0x4e6;
84200488:	23 e3 
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);
    unsigned msg[OPMSG_COMMON_SET_CONTROL_WORD_SIZE];

    L3_DBG_MSG("VA_GM: Configuring CVC");

    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_SET_CONTROL, MESSAGE_ID, OPMSG_COMMON_ID_SET_CONTROL);
8420048a:	11 f0 02 40 	rMAC = Null + 8194;
8420048e:	21 de       	M[FP + 16] = rMAC;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_SET_CONTROL, NUM_BLOCKS, 1);
84200490:	41 20       	rMAC = Null + 1;
84200492:	29 de       	M[FP + 20] = rMAC;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_SET_CONTROL, CONTROL_ID, OPMSG_CONTROL_MODE_ID);
84200494:	31 de       	M[FP + 24] = rMAC;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_SET_CONTROL, VALUE_MSW, 0);
84200496:	38 de       	M[FP + 28] = Null;
    OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_COMMON_SET_CONTROL, VALUE_LSW, mode);
84200498:	47 de       	M[FP + 32] = r5;

    opmgr_op_client_send_message(op_data, ext_data->cvc_op_id,
                                 OPMSG_COMMON_SET_CONTROL_WORD_SIZE,
                                 (unsigned *) &msg);
8420049a:	05 11       	r3 = FP + 16;
8420049c:	44 21       	r2 = Null + 5;
8420049e:	93 88       	r1 = M[r0 + 8];
842004a0:	32 00       	r0 = r4 + Null;
842004a2:	ff fd 2a f0 	call (m) 0x59a8;
842004a6:	27 e8 

842004a8 <Lc_configure_cvc_2>:
}
842004a8:	f2 4a       	SP = SP - 0x20, popm <FP, r4, r5, rLink>;
842004aa:	d8 4c       	rts;

842004ac <Lc_configure_splitter_1>:
 *
 * \param op_data Pointer to the operator instance data.
 * \param mode Operation mode to set Splitter.
 */
static void configure_splitter(OPERATOR_DATA *op_data, OPMSG_SPLITTER_ID mode)
{
842004ac:	f3 1e       	pushm <FP(=SP), r4, r5, r6, rLink>, SP = SP + 0x20;
842004ae:	17 00       	r5 = r0 + Null;
842004b0:	18 09       	r6 = r1 + Null;
MAP_INSTANCE_DATA(CAP_ID_DOWNLOAD_VA_GRAPH_MANAGER, VAGM_OP_DATA)
#endif /* CAPABILITY_DOWNLOAD_BUILD */

static inline VAGM_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (VAGM_OP_DATA *) base_op_get_instance_data(op_data);
842004b2:	ff fd 00 f0 	call (m) 0x4e6;
842004b6:	35 e1 
842004b8:	16 00       	r4 = r0 + Null;
{
    VAGM_OP_DATA *ext_data = get_instance_data(op_data);

    L3_DBG_MSG("VA_GM: Configuring Splitter");

    switch(mode)
842004ba:	80 f0 03 24 	Null = r6 - 3;
842004be:	1f 60       	if EQ jump (m) Lc_configure_splitter_6;

842004c0 <Lc_configure_splitter_2>:
842004c0:	80 f0 04 24 	Null = r6 - 4;
842004c4:	10 60       	if EQ jump (m) Lc_configure_splitter_5;

842004c6 <Lc_configure_splitter_3>:
842004c6:	80 f0 05 24 	Null = r6 - 5;
842004ca:	30 62       	if NE jump (m) Lc_configure_splitter_7;

842004cc <Lc_configure_splitter_4>:
        break;
    }
    case OPMSG_SPLITTER_ID_BUFFER_STREAMS:
    {
        unsigned msg[OPMSG_SPLITTER_BUFFER_STREAMS_WORD_SIZE];
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_BUFFER_STREAMS, MESSAGE_ID, OPMSG_SPLITTER_ID_BUFFER_STREAMS);
842004cc:	41 21       	rMAC = Null + 5;
842004ce:	59 de       	M[FP + 44] = rMAC;
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_BUFFER_STREAMS, STREAMS, SPLITTER_STREAMS_BIT);
842004d0:	41 20       	rMAC = Null + 1;
842004d2:	61 de       	M[FP + 48] = rMAC;

        opmgr_op_client_send_message(op_data, ext_data->splitter_op_id,
                                     OPMSG_SPLITTER_DEACTIVATE_STREAMS_WORD_SIZE,
                                     msg);
842004d4:	c5 12       	r3 = FP + 44;
842004d6:	84 20       	r2 = Null + 2;
842004d8:	f3 88       	r1 = M[r4 + 12];
842004da:	3a 00       	r0 = r5 + Null;
842004dc:	ff fd 2a f0 	call (m) 0x59a8;
842004e0:	2d e6 
        break;
842004e2:	24 6e       	jump (m) Lc_configure_splitter_7;

842004e4 <Lc_configure_splitter_5>:
    switch(mode)
    {
    case OPMSG_SPLITTER_ID_DEACTIVATE_STREAMS:
    {
        unsigned msg[OPMSG_SPLITTER_DEACTIVATE_STREAMS_WORD_SIZE];
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_DEACTIVATE_STREAMS, MESSAGE_ID, OPMSG_SPLITTER_ID_DEACTIVATE_STREAMS);
842004e4:	01 21       	rMAC = Null + 4;
842004e6:	29 de       	M[FP + 20] = rMAC;
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_DEACTIVATE_STREAMS, STREAMS, SPLITTER_STREAMS_BIT);
842004e8:	41 20       	rMAC = Null + 1;
842004ea:	31 de       	M[FP + 24] = rMAC;

        opmgr_op_client_send_message(op_data, ext_data->splitter_op_id,
                                     OPMSG_SPLITTER_DEACTIVATE_STREAMS_WORD_SIZE,
                                     msg);
842004ec:	45 11       	r3 = FP + 20;
842004ee:	84 20       	r2 = Null + 2;
842004f0:	f3 88       	r1 = M[r4 + 12];
842004f2:	3a 00       	r0 = r5 + Null;
842004f4:	ff fd 2a f0 	call (m) 0x59a8;
842004f8:	35 e5 
        break;
842004fa:	18 6e       	jump (m) Lc_configure_splitter_7;

842004fc <Lc_configure_splitter_6>:
        /* Get the current time and calculate the time offset to send to the
         * splitter. The splitter will forward audio samples to QVA from
         * roughly that time onwards.
         * NOTE: This timing is approximate and is only used to provide QVA
         * with a few more frames prior to the one on which VAD triggered. */
        TIME start_time = time_get_time();
842004fc:	ff fd 2e f0 	call (m) 0x6100;
84200500:	25 e0 
        start_time = time_sub(start_time, ext_data->buffer_time_offset_ms*1000);
84200502:	f1 98       	rMAC = M[r4 + 44];
84200504:	03 f0 e8 f1 	rMAC = rMAC * 1000 (int);
84200508:	91 d9 
8420050a:	52 04       	r0 = r0 - rMAC;

        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_ACTIVATE_STREAMS_AFTER_TIMESTAMP, MESSAGE_ID, OPMSG_SPLITTER_ID_ACTIVATE_STREAMS_AFTER_TIMESTAMP);
8420050c:	c1 20       	rMAC = Null + 3;
8420050e:	39 de       	M[FP + 28] = rMAC;
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_ACTIVATE_STREAMS_AFTER_TIMESTAMP, STREAMS, SPLITTER_STREAMS_BIT);
84200510:	41 20       	rMAC = Null + 1;
84200512:	41 de       	M[FP + 32] = rMAC;
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_ACTIVATE_STREAMS_AFTER_TIMESTAMP, TIMESTAMP_MS, TIME_GET_MS(start_time));
84200514:	93 52       	r1 = r0 LSHIFT -16;
84200516:	4b de       	M[FP + 36] = r1;
        OP_CLIENT_MSG_FIELD_SET(msg, OPMSG_SPLITTER_ACTIVATE_STREAMS_AFTER_TIMESTAMP, TIMESTAMP_LS, TIME_GET_LS(start_time));
84200518:	91 c6       	rMAC = r0 AND 0xffff;
8420051a:	51 de       	M[FP + 40] = rMAC;

        opmgr_op_client_send_message(op_data, ext_data->splitter_op_id,
                                     OPMSG_SPLITTER_ACTIVATE_STREAMS_AFTER_TIMESTAMP_WORD_SIZE,
                                     msg);
8420051c:	c5 11       	r3 = FP + 28;
8420051e:	04 21       	r2 = Null + 4;
84200520:	f3 88       	r1 = M[r4 + 12];
84200522:	3a 00       	r0 = r5 + Null;
84200524:	ff fd 2a f0 	call (m) 0x59a8;
84200528:	25 e4 

8420052a <Lc_configure_splitter_7>:
        break;
8420052a:	f3 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, rLink>;
8420052c:	d8 4c       	rts;

8420052e <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_va_graph_manager_cap_data;
8420052e:	07 f0 02 f0 	r0 = Null + 7340032;
84200532:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
84200534:	20 f0 f8 42 	Null = Null + 17144;
