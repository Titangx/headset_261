
/home/svc-audio-dspsw/kymera_builds/builds/2021/kymera_2103100121/kalimba/kymera/tools/KCSMaker/out/7120/streplus_rom_release/download/debugbin/download_aanc.elf:     file format elf32-littlekalimba

Disassembly of section .text_minim:

84200680 <$_aanc_create>:
Capability API Handlers
*/

bool aanc_create(OPERATOR_DATA *op_data, void *message_data,
                 unsigned *response_id, void **resp_data)
{
84200680:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200682:	10 09       	r6 = r0 + Null;
84200684:	19 09       	r7 = r1 + Null;
84200686:	27 00       	r5 = r2 + Null;
84200688:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420068a:	ef fd ff ff 	call (m) 0x4e6;
8420068e:	3d e2 
84200690:	16 00       	r4 = r0 + Null;

    int i;
    unsigned *p_default_params = NULL; /* Pointer to default params */
    unsigned *p_cap_params = NULL;     /* Pointer to capability params */

    if (!base_op_create(op_data, message_data, response_id, resp_data))
84200692:	55 08       	r3 = r8 + Null;
84200694:	3c 00       	r2 = r5 + Null;
84200696:	4b 08       	r1 = r7 + Null;
84200698:	42 08       	r0 = r6 + Null;
8420069a:	ef fd fe ff 	call (m) 0x35a;
8420069e:	21 e6 
842006a0:	10 04       	Null = r0 - Null;
842006a2:	03 62       	if NE jump (m) Lc_aanc_create_3;

842006a4 <Lc_aanc_create_2>:
    {
        return FALSE;
842006a4:	02 00       	r0 = Null + Null;
842006a6:	54 6e       	jump (m) Lc_aanc_create_13;

842006a8 <Lc_aanc_create_3>:
 * \param  response_data Pointer to the pointer to message that is allocated in the function.
 * \param  new_status  A status ID that is to be sent in the message.
 */
inline static void base_op_change_response_status(void **response_data, STATUS_KYMERA new_status)
{
    (((OP_STD_RSP *)(*response_data))->status = new_status);
842006a8:	01 f0 00 60 	rMAC = Null + 4096;
842006ac:	a2 f0 00 e8 	r0 = M[r8 + Null];
842006b0:	51 8e       	M[r0 + 4] = rMAC;
842006b2:	31 00       	rMAC = r4 + Null;
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006b4:	24 71       	r10 = Null + 4;
842006b6:	03 4c       	do (m) Lc__loop0;

842006b8 <Lc_aanc_create_4>:
    {
        p_ext_data->inputs[i] = NULL;
842006b8:	08 ee       	M[rMAC + Null] = Null;
842006ba:	09 21       	rMAC = rMAC + 4;

842006bc <Lc__loop0>:
     * termination point in create then change it to STATUS_OK.
     */
    base_op_change_response_status(resp_data, STATUS_CMD_FAILED);

    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
842006bc:	31 28       	rMAC = r4 + 16;
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006be:	24 71       	r10 = Null + 4;
842006c0:	03 4c       	do (m) Lc__loop1;

842006c2 <Lc_aanc_create_6>:
    {
        p_ext_data->outputs[i] = NULL;
842006c2:	08 ee       	M[rMAC + Null] = Null;
842006c4:	09 21       	rMAC = rMAC + 4;

842006c6 <Lc__loop1>:
    /* Initialize buffers */
    for (i = 0; i < AANC_MAX_SINKS; i++)
    {
        p_ext_data->inputs[i] = NULL;
    }
    for (i = 0; i < AANC_MAX_SOURCES; i++)
842006c6:	31 30       	rMAC = r4 + 32;
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006c8:	14 71       	r10 = Null + 2;
842006ca:	04 4c       	do (m) Lc__loop2;

842006cc <Lc_aanc_create_8>:
    {
        p_ext_data->metadata_ip[i] = NULL;
842006cc:	08 ee       	M[rMAC + Null] = Null;
        p_ext_data->metadata_op[i] = NULL;
842006ce:	88 8e       	M[rMAC + 8] = Null;
842006d0:	09 21       	rMAC = rMAC + 4;

842006d2 <Lc__loop2>:
    for (i = 0; i < AANC_MAX_SOURCES; i++)
    {
        p_ext_data->outputs[i] = NULL;
    }

    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
842006d2:	42 08       	r0 = r6 + Null;
842006d4:	ef fd ff ff 	call (m) 0x4ea;
842006d8:	37 e0 
842006da:	b2 9f       	M[r4 + 56] = r0;
        p_ext_data->metadata_op[i] = NULL;
    }

    /* Initialize capid and sample rate fields */
    p_ext_data->cap_id = base_op_get_cap_id(op_data);
    p_ext_data->sample_rate = 16000;
842006dc:	11 f0 80 7a 	rMAC = Null + 16000;
842006e0:	71 9f       	M[r4 + 52] = rMAC;

    /* Initialize parameters */
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
842006e2:	09 f0 21 ea 	call (m) $_AANC_GetDefaults;
842006e6:	13 00       	r1 = r0 + Null;
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
842006e8:	34 3b       	r2 = r4 + 60;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
842006ea:	05 f0 50 41 	r3 = Null + 336;
842006ee:	62 f0 fc 21 	r0 = r4 + 508;
842006f2:	ff fd 00 f0 	call (m) 0x742;
842006f6:	31 e2 
842006f8:	10 04       	Null = r0 - Null;
842006fa:	29 60       	if EQ jump (m) Lc_aanc_create_12;

842006fc <Lc_aanc_create_10>:
    {
       return TRUE;
    }

    /* Initialize system mode */
    p_ext_data->cur_mode = AANC_SYSMODE_FULL;
842006fc:	81 20       	rMAC = Null + 2;
842006fe:	61 f0 63 8e 	M[r4 + 396] = rMAC;
    p_ext_data->host_mode = AANC_SYSMODE_FULL;
84200702:	61 f0 64 8e 	M[r4 + 400] = rMAC;
    p_ext_data->qact_mode = AANC_SYSMODE_FULL;
84200706:	61 f0 65 8e 	M[r4 + 404] = rMAC;

    /* Trigger re-initialization at start */
    p_ext_data->re_init_flag = TRUE;
8420070a:	41 20       	rMAC = Null + 1;
8420070c:	61 f0 7a 8e 	M[r4 + 488] = rMAC;
    p_ext_data->re_init_hard = TRUE;
84200710:	61 f0 7b 8e 	M[r4 + 492] = rMAC;

    if (!aanc_proc_create(&p_ext_data->ag, p_ext_data->sample_rate))
84200714:	73 99       	r1 = M[r4 + 52];
84200716:	62 f0 b8 21 	r0 = r4 + 440;
8420071a:	09 f0 23 e9 	call (m) $_aanc_proc_create;
8420071e:	10 04       	Null = r0 - Null;
84200720:	16 60       	if EQ jump (m) Lc_aanc_create_12;

84200722 <Lc_aanc_create_11>:
    {
        L4_DBG_MSG("Failed to create AG data");
        return TRUE;
    }

    p_ext_data->filter_config = AANC_FILTER_CONFIG_SINGLE;
84200722:	60 f0 db 8c 	MH[r4 + 438] = Null;
    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200726:	41 20       	rMAC = Null + 1;
84200728:	61 f0 e0 8b 	MB[r4 + 480] = rMAC;
    /* Default to hybrid: ff path is FFB, fb path is FFA */
    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
8420072c:	82 20       	r0 = Null + 2;
8420072e:	62 f0 e1 8b 	MB[r4 + 481] = r0;
    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
84200732:	61 f0 e2 8b 	MB[r4 + 482] = rMAC;
    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200736:	c1 23       	rMAC = Null + 15;
84200738:	61 f0 f2 8c 	MH[r4 + 484] = rMAC;

#ifdef USE_AANC_LICENSING
    p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
8420073c:	00 f1 01 f0 	rMAC = Null + 268435456;
84200740:	00 40 
84200742:	61 f0 7e 8e 	M[r4 + 504] = rMAC;
84200746:	a1 f0 00 e8 	rMAC = M[r8 + Null];
8420074a:	48 8e       	M[rMAC + 4] = Null;

8420074c <Lc_aanc_create_12>:
    p_default_params = (unsigned*) AANC_GetDefaults(p_ext_data->cap_id);
    p_cap_params = (unsigned*) &p_ext_data->aanc_cap_params;
    if(!cpsInitParameters(&p_ext_data->params_def, p_default_params,
                          p_cap_params, sizeof(AANC_PARAMETERS)))
    {
       return TRUE;
8420074c:	42 20       	r0 = Null + 1;

8420074e <Lc_aanc_create_13>:
    /* Operator creation was succesful, change respone to STATUS_OK*/
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC: Created");
    return TRUE;
}
8420074e:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200750:	d8 4c       	rts;

84200752 <$_aanc_destroy>:

bool aanc_destroy(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200752:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200754:	10 09       	r6 = r0 + Null;
84200756:	1a 09       	r8 = r1 + Null;
84200758:	27 00       	r5 = r2 + Null;
8420075a:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420075c:	ef fd fe ff 	call (m) 0x4e6;
84200760:	2b ec 
84200762:	16 00       	r4 = r0 + Null;
                  unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    /* call base_op destroy that creates and fills response message, too */
    if (!base_op_destroy(op_data, message_data, response_id, resp_data))
84200764:	4d 08       	r3 = r7 + Null;
84200766:	3c 00       	r2 = r5 + Null;
84200768:	53 08       	r1 = r8 + Null;
8420076a:	42 08       	r0 = r6 + Null;
8420076c:	ef fd fe ff 	call (m) 0x370;
84200770:	25 e0 
84200772:	10 04       	Null = r0 - Null;
84200774:	03 62       	if NE jump (m) Lc_aanc_destroy_3;

84200776 <Lc_aanc_destroy_2>:
    {
        return FALSE;
84200776:	02 00       	r0 = Null + Null;
84200778:	08 6e       	jump (m) Lc_aanc_destroy_6;

8420077a <Lc_aanc_destroy_3>:
    }

    /* patch_fn_shared(aanc_capability); TODO: patch functions */

    if (p_ext_data != NULL)
8420077a:	30 04       	Null = r4 - Null;
8420077c:	05 60       	if EQ jump (m) Lc_aanc_destroy_5;

8420077e <Lc_aanc_destroy_4>:
    {
        aanc_proc_destroy(&p_ext_data->ag);
8420077e:	62 f0 b8 21 	r0 = r4 + 440;
84200782:	0a f0 3b e5 	call (m) $_aanc_proc_destroy;

84200786 <Lc_aanc_destroy_5>:

        L4_DBG_MSG("AANC: Cleanup complete.");
    }

    L4_DBG_MSG("AANC: Destroyed");
    return TRUE;
84200786:	42 20       	r0 = Null + 1;

84200788 <Lc_aanc_destroy_6>:
}
84200788:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420078a:	d8 4c       	rts;

8420078c <$_aanc_start>:

bool aanc_start(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
8420078c:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
8420078e:	17 00       	r5 = r0 + Null;
84200790:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200792:	ef fd fe ff 	call (m) 0x4e6;
84200796:	35 ea 
84200798:	16 00       	r4 = r0 + Null;
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* patch_fn_shared(aanc_capability); TODO: patch functions */

    /* Start with the assumption that we fail and change later if we succeed */
    if (!base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED, resp_data))
8420079a:	03 f0 00 60 	r1 = Null + 4096;
8420079e:	44 08       	r2 = r6 + Null;
842007a0:	3a 00       	r0 = r5 + Null;
842007a2:	ef fd fe ff 	call (m) 0x4bc;
842007a6:	3b e8 
842007a8:	10 04       	Null = r0 - Null;
842007aa:	03 62       	if NE jump (m) Lc_aanc_start_3;

842007ac <Lc_aanc_start_2>:
    {
        return FALSE;
842007ac:	02 00       	r0 = Null + Null;
842007ae:	4d 6e       	jump (m) Lc_aanc_start_15;

842007b0 <Lc_aanc_start_3>:
    }

    /* Check that the model has been loaded */
    unsigned debug = p_ext_data->aanc_cap_params.OFFSET_AANC_DEBUG;
842007b0:	31 a9       	rMAC = M[r4 + 80];
    unsigned model_loaded = p_ext_data->flags & AANC_MODEL_LOADED;
842007b2:	62 f0 68 88 	r0 = M[r4 + 416];
842007b6:	03 f0 22 f8 	r0 = r0 AND 0x70000;
842007ba:	00 00 
    if ((model_loaded != AANC_MODEL_LOADED) &&
        !(debug & AANC_CONFIG_AANC_DEBUG_DISABLE_AG_MODEL_CHECK))
842007bc:	1c f0 20 f0 	Null = r0 - 458752;
842007c0:	00 24 
842007c2:	0f 60       	if EQ jump (m) Lc_aanc_start_8;

842007c4 <Lc_aanc_start_4>:
842007c4:	09 c0       	rMAC = rMAC AND 0x1;
842007c6:	0d 62       	if NE jump (m) Lc_aanc_start_8;

842007c8 <Lc_aanc_start_5>:
    {
        L2_DBG_MSG("AANC start failure: model not loaded");
842007c8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842007cc:	88 24       	Null = rMAC - 2;
842007ce:	07 68       	if LT jump (m) Lc_aanc_start_7;

842007d0 <Lc_aanc_start_6>:
842007d0:	55 f1 02 f0 	r0 = Null + 357564450;
842007d4:	22 40 
842007d6:	ff fd 02 f0 	call (m) 0xccc;
842007da:	37 e7 

842007dc <Lc_aanc_start_7>:

    /* All good */
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC Started");
    return TRUE;
842007dc:	42 20       	r0 = Null + 1;
842007de:	35 6e       	jump (m) Lc_aanc_start_15;

842007e0 <Lc_aanc_start_8>:
        return TRUE;
    }

    /* Check that we have a minimum number of terminals connected */
    if (p_ext_data->inputs[AANC_MIC_INT_TERMINAL_ID] == NULL ||
        p_ext_data->inputs[AANC_MIC_EXT_TERMINAL_ID] == NULL)
842007e0:	b1 88       	rMAC = M[r4 + 8];
842007e2:	03 60       	if EQ jump (m) Lc_aanc_start_10;

842007e4 <Lc_aanc_start_9>:
842007e4:	f1 88       	rMAC = M[r4 + 12];
842007e6:	0c 62       	if NE jump (m) Lc_aanc_start_12;

842007e8 <Lc_aanc_start_10>:
    {
        L2_DBG_MSG("AANC start failure: mic inputs not connected");
842007e8:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842007ec:	88 24       	Null = rMAC - 2;
842007ee:	f7 69       	if LT jump (m) Lc_aanc_start_7;

842007f0 <Lc_aanc_start_11>:
842007f0:	55 f1 02 f0 	r0 = Null + 357564487;
842007f4:	47 40 
842007f6:	ff fd 02 f0 	call (m) 0xccc;
842007fa:	37 e6 
842007fc:	f0 6f       	jump (m) Lc_aanc_start_7;

842007fe <Lc_aanc_start_12>:
    }

    /* TODO: check ANC HW enable status */

    /* Initialize EC paths to static values */
    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
842007fe:	61 f0 ef 86 	rMAC = MHU[r4 + 478];
84200802:	61 f0 e3 8c 	MH[r4 + 454] = rMAC;
    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
84200806:	61 f0 ee 86 	rMAC = MHU[r4 + 476];
8420080a:	61 f0 e2 8c 	MH[r4 + 452] = rMAC;

    /* Initialize coarse to static and fine to 0 for FF and FB paths. */
    if (p_ext_data->cur_mode == AANC_SYSMODE_FULL)
8420080e:	61 f0 63 88 	rMAC = M[r4 + 396];
84200812:	88 24       	Null = rMAC - 2;
84200814:	11 62       	if NE jump (m) Lc_aanc_start_14;

84200816 <Lc_aanc_start_13>:
    {
        p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200816:	61 f0 ec 86 	rMAC = MHU[r4 + 472];
8420081a:	61 f0 e0 8c 	MH[r4 + 448] = rMAC;
        p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
8420081e:	61 f0 ea 86 	rMAC = MHU[r4 + 468];
84200822:	61 f0 de 8c 	MH[r4 + 444] = rMAC;
        p_ext_data->fb_gain.fine = 0;
84200826:	60 f0 e1 8c 	MH[r4 + 450] = Null;
        p_ext_data->ff_gain.fine = 0;
8420082a:	60 f0 df 8c 	MH[r4 + 446] = Null;

        aanc_update_gain(op_data, p_ext_data);
8420082e:	33 00       	r1 = r4 + Null;
84200830:	3a 00       	r0 = r5 + Null;
84200832:	06 f0 23 e2 	call (m) Lc_aanc_update_gain_1;

84200836 <Lc_aanc_start_14>:
    }

    /* Set reinitialization flags to ensure first run behavior */
    p_ext_data->re_init_flag = TRUE;
84200836:	41 20       	rMAC = Null + 1;
84200838:	61 f0 7a 8e 	M[r4 + 488] = rMAC;
    p_ext_data->re_init_hard = TRUE;
8420083c:	61 f0 7b 8e 	M[r4 + 492] = rMAC;
84200840:	81 f0 00 e8 	rMAC = M[r6 + Null];
84200844:	48 8e       	M[rMAC + 4] = Null;
84200846:	cb 6f       	jump (m) Lc_aanc_start_7;

84200848 <Lc_aanc_start_15>:
    /* All good */
    base_op_change_response_status(resp_data, STATUS_OK);

    L4_DBG_MSG("AANC Started");
    return TRUE;
}
84200848:	f3 48       	popm <FP, r4, r5, r6, rLink>;
8420084a:	d8 4c       	rts;

8420084c <$_aanc_reset>:

bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
8420084c:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420084e:	10 09       	r6 = r0 + Null;
84200850:	1a 09       	r8 = r1 + Null;
84200852:	27 00       	r5 = r2 + Null;
84200854:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200856:	ef fd fe ff 	call (m) 0x4e6;
8420085a:	31 e4 
8420085c:	16 00       	r4 = r0 + Null;
bool aanc_reset(OPERATOR_DATA *op_data, void *message_data,
                unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!base_op_reset(op_data, message_data, response_id, resp_data))
8420085e:	4d 08       	r3 = r7 + Null;
84200860:	3c 00       	r2 = r5 + Null;
84200862:	53 08       	r1 = r8 + Null;
84200864:	42 08       	r0 = r6 + Null;
84200866:	ef fd fd ff 	call (m) 0x32c;
8420086a:	27 e6 
8420086c:	10 04       	Null = r0 - Null;
8420086e:	03 62       	if NE jump (m) Lc_aanc_reset_3;

84200870 <Lc_aanc_reset_2>:
    {
        return FALSE;
84200870:	02 00       	r0 = Null + Null;
84200872:	07 6e       	jump (m) Lc_aanc_reset_4;

84200874 <Lc_aanc_reset_3>:
    }

    p_ext_data->re_init_flag = TRUE;
84200874:	41 20       	rMAC = Null + 1;
84200876:	61 f0 7a 8e 	M[r4 + 488] = rMAC;
    p_ext_data->re_init_hard = TRUE;
8420087a:	61 f0 7b 8e 	M[r4 + 492] = rMAC;

    L4_DBG_MSG("AANC: Reset");
    return TRUE;
8420087e:	0a 00       	r0 = rMAC + Null;

84200880 <Lc_aanc_reset_4>:
}
84200880:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84200882:	d8 4c       	rts;

84200884 <$_aanc_connect>:

bool aanc_connect(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
84200884:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84200886:	11 09       	r7 = r0 + Null;
84200888:	1f 00       	r5 = r1 + Null;
8420088a:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420088c:	ef fd fe ff 	call (m) 0x4e6;
84200890:	3b e2 
84200892:	16 00       	r4 = r0 + Null;

bool aanc_connect(OPERATOR_DATA *op_data, void *message_data,
                  unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200894:	7b f0 00 e8 	r9 = M[r5 + Null];
    tCbuffer* pterminal_buf = OPMGR_GET_OP_CONNECT_BUFFER(message_data);
84200898:	7f 88       	r5 = M[r5 + 4];
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
8420089a:	b8 f0 3f 00 	r6 = r9 AND 0x3f;
    tCbuffer** selected_buffer;
    tCbuffer** selected_metadata;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
8420089e:	03 00       	r1 = Null + Null;
842008a0:	54 08       	r2 = r8 + Null;
842008a2:	4a 08       	r0 = r7 + Null;
842008a4:	ef fd fe ff 	call (m) 0x4bc;
842008a8:	39 e0 
842008aa:	10 04       	Null = r0 - Null;
842008ac:	03 62       	if NE jump (m) Lc_aanc_connect_3;

842008ae <Lc_aanc_connect_2>:
    {
        return FALSE;
842008ae:	02 00       	r0 = Null + Null;
842008b0:	3a 6e       	jump (m) Lc_aanc_connect_21;

842008b2 <Lc_aanc_connect_3>:
    }

    /* can't connect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
842008b2:	4a 08       	r0 = r7 + Null;
842008b4:	ff fd 27 f0 	call (m) 0x5700;
842008b8:	2d e2 
842008ba:	10 04       	Null = r0 - Null;
842008bc:	09 60       	if EQ jump (m) Lc_aanc_connect_6;

842008be <Lc_aanc_connect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
842008be:	30 a8       	Null = M[r4 + 64];
842008c0:	07 62       	if NE jump (m) Lc_aanc_connect_6;

842008c2 <Lc_aanc_connect_5>:
842008c2:	01 f0 00 60 	rMAC = Null + 4096;
842008c6:	a2 f0 00 e8 	r0 = M[r8 + Null];
842008ca:	51 8e       	M[r0 + 4] = rMAC;
842008cc:	24 6e       	jump (m) Lc_aanc_connect_17;

842008ce <Lc_aanc_connect_6>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being connected */
    if (terminal_id & TERMINAL_SINK_MASK)
842008ce:	40 f0 b1 f0 	rMAC = r9 AND 0x800000;
842008d2:	00 00 
842008d4:	04 60       	if EQ jump (m) Lc_aanc_connect_8;

842008d6 <Lc_aanc_connect_7>:
    {
        L4_DBG_MSG1("AANC connect: sink terminal %d", terminal_num);
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
842008d6:	32 00       	r0 = r4 + Null;
        selected_metadata = p_ext_data->metadata_ip;
842008d8:	31 30       	rMAC = r4 + 32;
842008da:	03 6e       	jump (m) Lc_aanc_connect_9;

842008dc <Lc_aanc_connect_8>:
    }
    else
    {
        L4_DBG_MSG1("AANC connect: source terminal %d", terminal_num);
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
842008dc:	32 28       	r0 = r4 + 16;
        selected_metadata = p_ext_data->metadata_op;
842008de:	31 32       	rMAC = r4 + 40;

842008e0 <Lc_aanc_connect_9>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
842008e0:	80 f0 04 24 	Null = r6 - 4;
842008e4:	07 64       	if NC jump (m) Lc_aanc_connect_11;

842008e6 <Lc_aanc_connect_10>:
842008e6:	01 f0 03 60 	rMAC = Null + 4099;
842008ea:	a2 f0 00 e8 	r0 = M[r8 + Null];
842008ee:	51 8e       	M[r0 + 4] = rMAC;
842008f0:	12 6e       	jump (m) Lc_aanc_connect_17;

842008f2 <Lc_aanc_connect_11>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't connect if already connected */
    if (selected_buffer[terminal_num] != NULL)
842008f2:	01 f8 d3 c8 	r1 = r6 LSHIFT 2;
842008f6:	9a 00       	r0 = r1 + r0;
842008f8:	13 e8       	r1 = M[r0 + Null];
842008fa:	e4 63       	if NE jump (m) Lc_aanc_connect_5;

842008fc <Lc_aanc_connect_12>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    selected_buffer[terminal_num] = pterminal_buf;
842008fc:	17 ee       	M[r0 + Null] = r5;

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
842008fe:	0f f8 00 c2 	Null = r6 - Null;
84200902:	0b 62       	if NE jump (m) Lc_aanc_connect_18;

84200904 <Lc_aanc_connect_13>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
84200904:	0a e8       	r0 = M[rMAC + Null];
84200906:	04 62       	if NE jump (m) Lc_aanc_connect_16;

84200908 <Lc_aanc_connect_14>:
 *
 * \return TRUE if the buffer supports metadata. FALSE if it doesn't.
 */
static inline bool buff_has_metadata(tCbuffer *buff)
{
    if (buff->metadata != NULL)
84200908:	ba 89       	r0 = M[r5 + 24];
8420090a:	02 60       	if EQ jump (m) Lc_aanc_connect_16;

8420090c <Lc_aanc_connect_15>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = pterminal_buf;
8420090c:	0f ee       	M[rMAC + Null] = r5;

8420090e <Lc_aanc_connect_16>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
        }
    }

    update_touched_sink_sources(p_ext_data);
8420090e:	32 00       	r0 = r4 + Null;
84200910:	06 f0 37 e7 	call (m) Lc_update_touched_sink_sources_1;

84200914 <Lc_aanc_connect_17>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
84200914:	42 20       	r0 = Null + 1;
84200916:	07 6e       	jump (m) Lc_aanc_connect_21;

84200918 <Lc_aanc_connect_18>:
    {
        /* mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel
         */
        if (selected_metadata[AANC_METADATA_MIC_ID] == NULL &&
            buff_has_metadata(pterminal_buf))
84200918:	4a 88       	r0 = M[rMAC + 4];
8420091a:	fa 63       	if NE jump (m) Lc_aanc_connect_16;

8420091c <Lc_aanc_connect_19>:
8420091c:	ba 89       	r0 = M[r5 + 24];
8420091e:	f8 61       	if EQ jump (m) Lc_aanc_connect_16;

84200920 <Lc_aanc_connect_20>:
        {
            selected_metadata[AANC_METADATA_MIC_ID] = pterminal_buf;
84200920:	4f 8e       	M[rMAC + 4] = r5;
84200922:	f6 6f       	jump (m) Lc_aanc_connect_16;

84200924 <Lc_aanc_connect_21>:
    }

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
84200924:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200926:	d8 4c       	rts;

84200928 <$_aanc_disconnect>:

bool aanc_disconnect(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
84200928:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420092a:	10 09       	r6 = r0 + Null;
8420092c:	1e 00       	r4 = r1 + Null;
8420092e:	29 09       	r7 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200930:	ef fd fd ff 	call (m) 0x4e6;
84200934:	37 ed 
84200936:	17 00       	r5 = r0 + Null;

bool aanc_disconnect(OPERATOR_DATA *op_data, void *message_data,
                     unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
84200938:	6a f0 00 e8 	r8 = M[r4 + Null];
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
8420093c:	a6 f0 3f 00 	r4 = r8 AND 0x3f;
    unsigned i;
    bool found_alternative = FALSE;

    /* Create the response. If there aren't sufficient resources for this fail
     * early. */
    if (!base_op_build_std_response_ex(op_data, STATUS_OK, resp_data))
84200940:	03 00       	r1 = Null + Null;
84200942:	4c 08       	r2 = r7 + Null;
84200944:	42 08       	r0 = r6 + Null;
84200946:	ef fd fd ff 	call (m) 0x4bc;
8420094a:	37 eb 
8420094c:	10 04       	Null = r0 - Null;
8420094e:	03 62       	if NE jump (m) Lc_aanc_disconnect_3;

84200950 <Lc_aanc_disconnect_2>:
    {
        return FALSE;
84200950:	02 00       	r0 = Null + Null;
84200952:	48 6e       	jump (m) Lc_aanc_disconnect_25;

84200954 <Lc_aanc_disconnect_3>:
    }

    /* can't disconnect while running if adaptive gain is not disabled */
    if (opmgr_op_is_running(op_data))
84200954:	42 08       	r0 = r6 + Null;
84200956:	ff fd 26 f0 	call (m) 0x5700;
8420095a:	2b ed 
8420095c:	10 04       	Null = r0 - Null;
8420095e:	09 60       	if EQ jump (m) Lc_aanc_disconnect_6;

84200960 <Lc_aanc_disconnect_4>:
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
84200960:	38 a8       	Null = M[r5 + 64];
84200962:	07 62       	if NE jump (m) Lc_aanc_disconnect_6;

84200964 <Lc_aanc_disconnect_5>:
84200964:	01 f0 00 60 	rMAC = Null + 4096;
84200968:	92 f0 00 e8 	r0 = M[r7 + Null];
8420096c:	51 8e       	M[r0 + 4] = rMAC;
8420096e:	34 6e       	jump (m) Lc_aanc_disconnect_23;

84200970 <Lc_aanc_disconnect_6>:
            return TRUE;
        }
    }

    /* Determine whether sink or source terminal being disconnected */
    if (terminal_id & TERMINAL_SINK_MASK)
84200970:	40 f0 a1 f0 	rMAC = r8 AND 0x800000;
84200974:	00 00 
84200976:	04 60       	if EQ jump (m) Lc_aanc_disconnect_8;

84200978 <Lc_aanc_disconnect_7>:
    {
        L4_DBG_MSG1("AANC disconnect: sink terminal %d", terminal_num);
        max_value = AANC_MAX_SINKS;
        selected_buffer = p_ext_data->inputs;
84200978:	39 00       	rMAC = r5 + Null;
        selected_metadata = p_ext_data->metadata_ip;
8420097a:	3a 30       	r0 = r5 + 32;
8420097c:	03 6e       	jump (m) Lc_aanc_disconnect_9;

8420097e <Lc_aanc_disconnect_8>:
    }
    else
    {
        L4_DBG_MSG1("AANC disconnect: source terminal %d", terminal_num);
        max_value = AANC_MAX_SOURCES;
        selected_buffer = p_ext_data->outputs;
8420097e:	39 28       	rMAC = r5 + 16;
        selected_metadata = p_ext_data->metadata_op;
84200980:	3a 32       	r0 = r5 + 40;

84200982 <Lc_aanc_disconnect_9>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
84200982:	30 25       	Null = r4 - 4;
84200984:	07 64       	if NC jump (m) Lc_aanc_disconnect_11;

84200986 <Lc_aanc_disconnect_10>:
84200986:	01 f0 03 60 	rMAC = Null + 4099;
8420098a:	92 f0 00 e8 	r0 = M[r7 + Null];
8420098e:	51 8e       	M[r0 + 4] = rMAC;
84200990:	23 6e       	jump (m) Lc_aanc_disconnect_23;

84200992 <Lc_aanc_disconnect_11>:
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    /* Can't disconnect if not connected */
    if (selected_buffer[terminal_num] == NULL)
84200992:	74 54       	r2 = r4 LSHIFT 2;
84200994:	0b 00       	r1 = rMAC + Null;
84200996:	e3 00       	r1 = r2 + r1;
84200998:	1d 00       	r3 = r1 + Null;
8420099a:	2b e8       	r1 = M[r3 + Null];
8420099c:	e4 61       	if EQ jump (m) Lc_aanc_disconnect_5;

8420099e <Lc_aanc_disconnect_12>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
        return TRUE;
    }

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
8420099e:	30 04       	Null = r4 - Null;
842009a0:	05 62       	if NE jump (m) Lc_aanc_disconnect_15;

842009a2 <Lc_aanc_disconnect_13>:
    {
        /* playback metadata has its own metadata channel */
        if (selected_metadata[AANC_METADATA_PLAYBACK_ID] != NULL)
842009a2:	11 e8       	rMAC = M[r0 + Null];
842009a4:	15 60       	if EQ jump (m) Lc_aanc_disconnect_22;

842009a6 <Lc_aanc_disconnect_14>:
        {
            selected_metadata[AANC_METADATA_PLAYBACK_ID] = NULL;
842009a6:	10 ee       	M[r0 + Null] = Null;
842009a8:	13 6e       	jump (m) Lc_aanc_disconnect_22;

842009aa <Lc_aanc_disconnect_15>:
    {
        /* Mic int/ext and fb mon metadata all muxed onto the same metadata
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
842009aa:	54 88       	r2 = M[r0 + 4];
842009ac:	e0 04       	Null = r2 - r1;
842009ae:	10 62       	if NE jump (m) Lc_aanc_disconnect_22;

842009b0 <Lc_aanc_disconnect_16>:
        {
            for (i = 1; i < max_value; i++)
842009b0:	43 20       	r1 = Null + 1;
842009b2:	0c 21       	r2 = rMAC + 4;

842009b4 <Lc_aanc_disconnect_17>:
            {
                if (i == terminal_num)
842009b4:	98 05       	Null = r1 - r4;
842009b6:	07 60       	if EQ jump (m) Lc_aanc_disconnect_20;

842009b8 <Lc_aanc_disconnect_18>:
                {
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
842009b8:	48 f0 00 e8 	r6 = M[r2 + Null];
842009bc:	04 60       	if EQ jump (m) Lc_aanc_disconnect_20;

842009be <Lc_aanc_disconnect_19>:
842009be:	88 f0 06 88 	r6 = M[r6 + 24];
842009c2:	0c 62       	if NE jump (m) Lc_aanc_disconnect_24;

842009c4 <Lc_aanc_disconnect_20>:
         * channel. Try to find an alternative channel to set the metadata to if
         * we're disconnecting the existing metadata channel. */
        if (selected_metadata[AANC_METADATA_MIC_ID] ==
            selected_buffer[terminal_num])
        {
            for (i = 1; i < max_value; i++)
842009c4:	5b 20       	r1 = r1 + 1;
842009c6:	24 21       	r2 = r2 + 4;
842009c8:	18 25       	Null = r1 - 4;
842009ca:	f5 65       	if NC jump (m) Lc_aanc_disconnect_17;

842009cc <Lc_aanc_disconnect_21>:
                    break;
                }
            }
            if (!found_alternative)
            {
                selected_metadata[AANC_METADATA_MIC_ID] = NULL;
842009cc:	50 8e       	M[r0 + 4] = Null;

842009ce <Lc_aanc_disconnect_22>:
            }
        }
    }

    selected_buffer[terminal_num] = NULL;
842009ce:	28 ee       	M[r3 + Null] = Null;

    update_touched_sink_sources(p_ext_data);
842009d0:	3a 00       	r0 = r5 + Null;
842009d2:	06 f0 35 e1 	call (m) Lc_update_touched_sink_sources_1;

842009d6 <Lc_aanc_disconnect_23>:
    if (opmgr_op_is_running(op_data))
    {
        if (p_ext_data->aanc_cap_params.OFFSET_DISABLE_AG_CALC == 0)
        {
            base_op_change_response_status(resp_data, STATUS_CMD_FAILED);
            return TRUE;
842009d6:	42 20       	r0 = Null + 1;
842009d8:	05 6e       	jump (m) Lc_aanc_disconnect_25;

842009da <Lc_aanc_disconnect_24>:
                    continue;
                }
                if (selected_buffer[i] != NULL &&
                    buff_has_metadata(selected_buffer[i]))
                {
                    selected_metadata[AANC_METADATA_MIC_ID] = selected_buffer[i];
842009da:	5b 54       	r1 = r1 LSHIFT 2;
842009dc:	c9 e8       	rMAC = M[rMAC + r1];
842009de:	51 8e       	M[r0 + 4] = rMAC;
                    found_alternative = TRUE;
                    break;
842009e0:	f7 6f       	jump (m) Lc_aanc_disconnect_22;

842009e2 <Lc_aanc_disconnect_25>:
    selected_buffer[terminal_num] = NULL;

    update_touched_sink_sources(p_ext_data);

    return TRUE;
}
842009e2:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842009e4:	d8 4c       	rts;

842009e6 <$_aanc_buffer_details>:

bool aanc_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
842009e6:	f6 1d       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x10;
842009e8:	42 de       	M[FP + 32] = r0;
842009ea:	1b 09       	r9 = r1 + Null;
842009ec:	4c de       	M[FP + 36] = r2;
842009ee:	2a 09       	r8 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842009f0:	ef fd fd ff 	call (m) 0x4e6;
842009f4:	37 e7 
842009f6:	17 00       	r5 = r0 + Null;

bool aanc_buffer_details(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    unsigned terminal_id = OPMGR_GET_OP_CONNECT_TERMINAL_ID(message_data);
842009f8:	b8 f0 00 e8 	r6 = M[r9 + Null];
#ifndef DISABLE_IN_PLACE
    unsigned terminal_num = terminal_id & TERMINAL_NUM_MASK;
842009fc:	89 f0 3f 00 	r7 = r6 AND 0x3f;
    unsigned max_value;
    tCbuffer** opposite_buffer;
    tCbuffer** selected_metadata;

    /* Response pointer */
    OP_BUF_DETAILS_RSP *p_resp = (OP_BUF_DETAILS_RSP*) *resp_data;
84200a00:	a6 f0 00 e8 	r4 = M[r8 + Null];

    if (!base_op_buffer_details(op_data, message_data, response_id, resp_data))
84200a04:	55 08       	r3 = r8 + Null;
84200a06:	5b 08       	r1 = r9 + Null;
84200a08:	4c d8       	r2 = M[FP + 36];
84200a0a:	42 d8       	r0 = M[FP + 32];
84200a0c:	ef fd fc ff 	call (m) 0x37c;
84200a10:	31 eb 
84200a12:	10 04       	Null = r0 - Null;
84200a14:	03 62       	if NE jump (m) Lc_aanc_buffer_details_3;

84200a16 <Lc_aanc_buffer_details_2>:
    {
        return FALSE;
84200a16:	02 00       	r0 = Null + Null;
84200a18:	5b 6e       	jump (m) Lc_aanc_buffer_details_18;

84200a1a <Lc_aanc_buffer_details_3>:
    p_resp->runs_in_place = FALSE;
    p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
#else

    /* Determine whether sink or source terminal being disconnected */
    if (terminal_id & TERMINAL_SINK_MASK)
84200a1a:	40 f0 81 f0 	rMAC = r6 AND 0x800000;
84200a1e:	00 00 
84200a20:	04 60       	if EQ jump (m) Lc_aanc_buffer_details_5;

84200a22 <Lc_aanc_buffer_details_4>:
    {
        L4_DBG_MSG1("AANC buffer details: sink buffer %d", terminal_num);
        max_value = AANC_MAX_SINKS;
        opposite_buffer = p_ext_data->outputs;
84200a22:	39 28       	rMAC = r5 + 16;
        selected_metadata = p_ext_data->metadata_ip;
84200a24:	3a 30       	r0 = r5 + 32;
84200a26:	03 6e       	jump (m) Lc_aanc_buffer_details_6;

84200a28 <Lc_aanc_buffer_details_5>:
    }
    else
    {
        L4_DBG_MSG1("AANC buffer details: source buffer %d", terminal_num);
        max_value = AANC_MAX_SOURCES;
        opposite_buffer = p_ext_data->inputs;
84200a28:	39 00       	rMAC = r5 + Null;
        selected_metadata = p_ext_data->metadata_op;
84200a2a:	3a 32       	r0 = r5 + 40;

84200a2c <Lc_aanc_buffer_details_6>:
    }

    /* Can't use invalid ID */
    if (terminal_num >= max_value)
84200a2c:	90 f0 04 24 	Null = r7 - 4;
84200a30:	07 64       	if NC jump (m) Lc_aanc_buffer_details_8;

84200a32 <Lc_aanc_buffer_details_7>:
84200a32:	01 f0 03 60 	rMAC = Null + 4099;
84200a36:	a2 f0 00 e8 	r0 = M[r8 + Null];
84200a3a:	51 8e       	M[r0 + 4] = rMAC;
84200a3c:	48 6e       	jump (m) Lc_aanc_buffer_details_17;

84200a3e <Lc_aanc_buffer_details_8>:
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
    }

    if (terminal_num == AANC_PLAYBACK_TERMINAL_ID)
84200a3e:	0f f9 00 c2 	Null = r7 - Null;
84200a42:	22 62       	if NE jump (m) Lc_aanc_buffer_details_13;

84200a44 <Lc_aanc_buffer_details_9>:
    {
        if (opposite_buffer[AANC_PLAYBACK_TERMINAL_ID] != NULL)
84200a44:	0b e8       	r1 = M[rMAC + Null];
84200a46:	11 60       	if EQ jump (m) Lc_aanc_buffer_details_11;

84200a48 <Lc_aanc_buffer_details_10>:
        {
            p_resp->runs_in_place = TRUE;
84200a48:	33 92       	r1 = MBU[r4 + 8];
84200a4a:	33 ff f7 1f 	r1 = r1 AND 0xfffffff7;
84200a4e:	5b c9       	r1 = r1 OR 0x8;
84200a50:	33 9a       	MB[r4 + 8] = r1;
            p_resp->b.in_place_buff_params.in_place_terminal = \
                terminal_id ^ TERMINAL_SINK_MASK;
84200a52:	08 f0 00 f0 	r1 = r6 XOR 0x800000;
84200a56:	00 f8 93 c8 
84200a5a:	33 8f       	M[r4 + 16] = r1;
            p_resp->b.in_place_buff_params.size = AANC_DEFAULT_BUFFER_SIZE;
84200a5c:	03 f0 80 40 	r1 = Null + 128;
84200a60:	73 8f       	M[r4 + 20] = r1;
            p_resp->b.in_place_buff_params.buffer = \
                opposite_buffer[AANC_PLAYBACK_TERMINAL_ID];
84200a62:	09 e8       	rMAC = M[rMAC + Null];
84200a64:	b1 8f       	M[r4 + 24] = rMAC;
84200a66:	08 6e       	jump (m) Lc_aanc_buffer_details_12;

84200a68 <Lc_aanc_buffer_details_11>:
            L4_DBG_MSG1("aanc_playback_buffer_details: %d",
                        p_resp->b.buffer_size);
        }
        else
        {
            p_resp->runs_in_place = FALSE;
84200a68:	31 92       	rMAC = MBU[r4 + 8];
84200a6a:	11 ff f7 1f 	rMAC = rMAC AND 0xfffffff7;
84200a6e:	31 9a       	MB[r4 + 8] = rMAC;
            p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
84200a70:	01 f0 80 40 	rMAC = Null + 128;
84200a74:	31 8f       	M[r4 + 16] = rMAC;

84200a76 <Lc_aanc_buffer_details_12>:
        }
        p_resp->supports_metadata = TRUE;
84200a76:	31 92       	rMAC = MBU[r4 + 8];
84200a78:	11 ff ef 1f 	rMAC = rMAC AND 0xffffffef;
84200a7c:	c9 c9       	rMAC = rMAC OR 0x10;
84200a7e:	31 9a       	MB[r4 + 8] = rMAC;
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_PLAYBACK_ID];
84200a80:	11 e8       	rMAC = M[r0 + Null];
84200a82:	f1 8e       	M[r4 + 12] = rMAC;
84200a84:	24 6e       	jump (m) Lc_aanc_buffer_details_17;

84200a86 <Lc_aanc_buffer_details_13>:
    }
    else
    {
        if (opposite_buffer[terminal_num] != NULL)
84200a86:	01 f9 d3 c8 	r1 = r7 LSHIFT 2;
84200a8a:	59 00       	rMAC = r1 + rMAC;
84200a8c:	0b e8       	r1 = M[rMAC + Null];
84200a8e:	11 60       	if EQ jump (m) Lc_aanc_buffer_details_15;

84200a90 <Lc_aanc_buffer_details_14>:
        {
            p_resp->runs_in_place = TRUE;
84200a90:	33 92       	r1 = MBU[r4 + 8];
84200a92:	33 ff f7 1f 	r1 = r1 AND 0xfffffff7;
84200a96:	5b c9       	r1 = r1 OR 0x8;
84200a98:	33 9a       	MB[r4 + 8] = r1;
            p_resp->b.in_place_buff_params.in_place_terminal = \
                terminal_id ^ TERMINAL_SINK_MASK;
84200a9a:	08 f0 00 f0 	r1 = r6 XOR 0x800000;
84200a9e:	00 f8 93 c8 
84200aa2:	33 8f       	M[r4 + 16] = r1;
            p_resp->b.in_place_buff_params.size = AANC_DEFAULT_BUFFER_SIZE;
84200aa4:	03 f0 80 40 	r1 = Null + 128;
84200aa8:	73 8f       	M[r4 + 20] = r1;
            p_resp->b.in_place_buff_params.buffer = \
                opposite_buffer[terminal_num];
84200aaa:	09 e8       	rMAC = M[rMAC + Null];
84200aac:	b1 8f       	M[r4 + 24] = rMAC;
84200aae:	08 6e       	jump (m) Lc_aanc_buffer_details_16;

84200ab0 <Lc_aanc_buffer_details_15>:
            L4_DBG_MSG1("aanc_buffer_details: %d", p_resp->b.buffer_size);
        }
        else
        {
            p_resp->runs_in_place = FALSE;
84200ab0:	31 92       	rMAC = MBU[r4 + 8];
84200ab2:	11 ff f7 1f 	rMAC = rMAC AND 0xfffffff7;
84200ab6:	31 9a       	MB[r4 + 8] = rMAC;
            p_resp->b.buffer_size = AANC_DEFAULT_BUFFER_SIZE;
84200ab8:	01 f0 80 40 	rMAC = Null + 128;
84200abc:	31 8f       	M[r4 + 16] = rMAC;

84200abe <Lc_aanc_buffer_details_16>:
        }
        p_resp->supports_metadata = TRUE;
84200abe:	31 92       	rMAC = MBU[r4 + 8];
84200ac0:	11 ff ef 1f 	rMAC = rMAC AND 0xffffffef;
84200ac4:	c9 c9       	rMAC = rMAC OR 0x10;
84200ac6:	31 9a       	MB[r4 + 8] = rMAC;
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_MIC_ID];
84200ac8:	51 88       	rMAC = M[r0 + 4];
84200aca:	f1 8e       	M[r4 + 12] = rMAC;

84200acc <Lc_aanc_buffer_details_17>:
    {
        /* invalid terminal id */
        L4_DBG_MSG1("AANC buffer details failed: invalid terminal %d",
                    terminal_num);
        base_op_change_response_status(resp_data, STATUS_INVALID_CMD_PARAMS);
        return TRUE;
84200acc:	42 20       	r0 = Null + 1;

84200ace <Lc_aanc_buffer_details_18>:
        p_resp->metadata_buffer = selected_metadata[AANC_METADATA_MIC_ID];
    }

#endif /* DISABLE_IN_PLACE */
    return TRUE;
}
84200ace:	f6 49       	SP = SP - 0x10, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200ad0:	d8 4c       	rts;

84200ad2 <$_aanc_get_sched_info>:

bool aanc_get_sched_info(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *response_id, void **resp_data)
{
84200ad2:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84200ad4:	17 00       	r5 = r0 + Null;
84200ad6:	2e 00       	r4 = r3 + Null;
    OP_SCHED_INFO_RSP* resp;

    resp = base_op_get_sched_info_ex(op_data, message_data, response_id);
84200ad8:	ef fd fc ff 	call (m) 0x41c;
84200adc:	25 ea 
    if (resp == NULL)
84200ade:	10 04       	Null = r0 - Null;
84200ae0:	09 62       	if NE jump (m) Lc_aanc_get_sched_info_3;

84200ae2 <Lc_aanc_get_sched_info_2>:
    {
        return base_op_build_std_response_ex(op_data, STATUS_CMD_FAILED,
                                             resp_data);
84200ae2:	03 f0 00 60 	r1 = Null + 4096;
84200ae6:	34 00       	r2 = r4 + Null;
84200ae8:	3a 00       	r0 = r5 + Null;
84200aea:	ef fd fc ff 	call (m) 0x4bc;
84200aee:	33 ee 
84200af0:	05 6e       	jump (m) Lc_aanc_get_sched_info_4;

84200af2 <Lc_aanc_get_sched_info_3>:
    }

    *resp_data = resp;
84200af2:	32 ee       	M[r4 + Null] = r0;
    resp->block_size = AANC_DEFAULT_BLOCK_SIZE;
84200af4:	01 30       	rMAC = Null + 32;
84200af6:	91 8e       	M[r0 + 8] = rMAC;

    return TRUE;
84200af8:	42 20       	r0 = Null + 1;

84200afa <Lc_aanc_get_sched_info_4>:
}
84200afa:	f2 48       	popm <FP, r4, r5, rLink>;
84200afc:	d8 4c       	rts;

84200afe <$_aanc_opmsg_set_control>:
Opmsg handlers
*/
bool aanc_opmsg_set_control(OPERATOR_DATA *op_data, void *message_data,
                            unsigned *resp_length,
                            OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200afe:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
84200b00:	17 00       	r5 = r0 + Null;
84200b02:	43 de       	M[FP + 32] = r1;
84200b04:	20 09       	r6 = r2 + Null;
84200b06:	4d de       	M[FP + 36] = r3;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200b08:	ef fd fc ff 	call (m) 0x4e6;
84200b0c:	3f ee 
84200b0e:	16 00       	r4 = r0 + Null;
    unsigned num_controls;
    unsigned ctrl_value;
    unsigned ctrl_id;

    CPS_CONTROL_SOURCE  ctrl_src;
    OPMSG_RESULT_STATES result = OPMSG_RESULT_STATES_NORMAL_STATE;
84200b10:	02 09       	r8 = Null + Null;

    if(!cps_control_setup(message_data, resp_length, resp_data, &num_controls))
84200b12:	45 13       	r3 = FP + 52;
84200b14:	43 08       	r1 = r6 + Null;
84200b16:	4c d8       	r2 = M[FP + 36];
84200b18:	42 d8       	r0 = M[FP + 32];
84200b1a:	ef fd ff ff 	call (m) 0xab2;
84200b1e:	39 ec 
84200b20:	10 04       	Null = r0 - Null;
84200b22:	04 62       	if NE jump (m) Lc_aanc_opmsg_set_control_3;

84200b24 <Lc_aanc_opmsg_set_control_2>:
    {
       return FALSE;
84200b24:	02 00       	r0 = Null + Null;
84200b26:	0f f0 b9 e5 	jump (m) Lc_aanc_opmsg_set_control_71;

84200b2a <Lc_aanc_opmsg_set_control_3>:
84200b2a:	13 71       	r9 = Null + 2;
84200b2c:	c1 23       	rMAC = Null + 15;
84200b2e:	09 71       	r7 = Null + 1;
84200b30:	51 de       	M[FP + 40] = rMAC;
84200b32:	41 22       	rMAC = Null + 9;
84200b34:	59 de       	M[FP + 44] = rMAC;
84200b36:	49 08       	rMAC = r7 + Null;
84200b38:	61 de       	M[FP + 48] = rMAC;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
84200b3a:	00 09       	r6 = Null + Null;
84200b3c:	03 6e       	jump (m) Lc_aanc_opmsg_set_control_6;

84200b3e <Lc_aanc_opmsg_set_control_4>:

            /* No override flags indicated for channel */
            continue;
        }

        result = OPMSG_RESULT_STATES_UNSUPPORTED_CONTROL;
84200b3e:	22 71       	r8 = Null + 4;

84200b40 <Lc_aanc_opmsg_set_control_5>:
       return FALSE;
    }

    /* Iterate through the control messages looking for mode and gain override
     * messages */
    for (i=0; i<num_controls; i++)
84200b40:	08 75       	r6 = r6 + 1;

84200b42 <Lc_aanc_opmsg_set_control_6>:
84200b42:	69 d8       	rMAC = M[FP + 52];
84200b44:	1f f8 00 c2 	Null = r6 - rMAC;
84200b48:	02 f0 a3 e0 	if C jump (m) Lc_aanc_opmsg_set_control_10;

84200b4c <Lc_aanc_opmsg_set_control_7>:
    {
        ctrl_id = cps_control_get(message_data, i, &ctrl_value, &ctrl_src);
84200b4c:	c5 13       	r3 = FP + 60;
84200b4e:	84 13       	r2 = FP + 56;
84200b50:	43 08       	r1 = r6 + Null;
84200b52:	42 d8       	r0 = M[FP + 32];
84200b54:	ef fd ff ff 	call (m) 0xb00;
84200b58:	2d ed 

        /* Mode override */
        if (ctrl_id == OPMSG_CONTROL_MODE_ID)
84200b5a:	50 24       	Null = r0 - 1;
84200b5c:	84 62       	if NE jump (m) Lc_aanc_opmsg_set_control_33;

84200b5e <Lc_aanc_opmsg_set_control_8>:
        {

            /* Check for valid mode */
            ctrl_value &= AANC_SYSMODE_MASK;
84200b5e:	71 d8       	rMAC = M[FP + 56];
84200b60:	09 c1       	rMAC = rMAC AND 0x7;
84200b62:	71 de       	M[FP + 56] = rMAC;
            if (ctrl_value >= AANC_SYSMODE_MAX_MODES)
84200b64:	c8 25       	Null = rMAC - 7;
84200b66:	0e 64       	if NC jump (m) Lc_aanc_opmsg_set_control_12;

84200b68 <Lc_aanc_opmsg_set_control_9>:
            {
                result = OPMSG_RESULT_STATES_INVALID_CONTROL_VALUE;
84200b68:	2a 71       	r8 = Null + 5;

84200b6a <Lc_aanc_opmsg_set_control_10>:
    }

    /* Set current operating mode based on override */
    /* NB: double AND removes gain override bits from comparison */
    if ((p_ext_data->ovr_control & AANC_CONTROL_MODE_OVERRIDE)
        & AANC_CONTROL_MODE_OVERRIDE)
84200b6a:	61 f0 66 88 	rMAC = M[r4 + 408];
84200b6e:	11 f1 00 00 	rMAC = rMAC AND 0x2000;
84200b72:	00 f0 d9 e4 	if EQ jump (m) Lc_aanc_opmsg_set_control_69;

84200b76 <Lc_aanc_opmsg_set_control_11>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
84200b76:	61 f0 65 88 	rMAC = M[r4 + 404];
84200b7a:	61 f0 63 8e 	M[r4 + 396] = rMAC;
84200b7e:	0f f0 d5 e4 	jump (m) Lc_aanc_opmsg_set_control_70;

84200b82 <Lc_aanc_opmsg_set_control_12>:
                break;
            }

            /* Re-initialize event states if not in quiet mode */
            if (ctrl_value != AANC_SYSMODE_QUIET &&
                ctrl_value != AANC_SYSMODE_GENTLE_MUTE)
84200b82:	88 25       	Null = rMAC - 6;
84200b84:	10 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_18;

84200b86 <Lc_aanc_opmsg_set_control_13>:
84200b86:	48 25       	Null = rMAC - 5;
84200b88:	26 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_21;

84200b8a <Lc_aanc_opmsg_set_control_14>:
            {
                aanc_initialize_events(op_data, p_ext_data);
84200b8a:	33 00       	r1 = r4 + Null;
84200b8c:	3a 00       	r0 = r5 + Null;
84200b8e:	05 f0 37 ea 	call (m) Lc_aanc_initialize_events_1;
            }

            /* Gain update logic */
            switch (ctrl_value)
84200b92:	71 d8       	rMAC = M[FP + 56];
84200b94:	48 24       	Null = rMAC - 1;
84200b96:	38 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_26;

84200b98 <Lc_aanc_opmsg_set_control_15>:
84200b98:	88 24       	Null = rMAC - 2;
84200b9a:	40 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_28;

84200b9c <Lc_aanc_opmsg_set_control_16>:
84200b9c:	c8 24       	Null = rMAC - 3;
84200b9e:	39 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_27;

84200ba0 <Lc_aanc_opmsg_set_control_17>:
84200ba0:	88 25       	Null = rMAC - 6;
84200ba2:	16 62       	if NE jump (m) Lc_aanc_opmsg_set_control_20;

84200ba4 <Lc_aanc_opmsg_set_control_18>:
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
                    break;
                case AANC_SYSMODE_QUIET:
                    /* Quiet mode changes FB fine gain */
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200ba4:	61 f0 ea 86 	rMAC = MHU[r4 + 468];
84200ba8:	61 f0 de 8c 	MH[r4 + 444] = rMAC;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine >> 1;
84200bac:	62 f0 ed 86 	r0 = MHU[r4 + 474];
84200bb0:	12 58       	r0 = r0 ASHIFT -1;
84200bb2:	62 f0 e1 8c 	MH[r4 + 450] = r0;

84200bb6 <Lc_aanc_opmsg_set_control_19>:
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
                    p_ext_data->fb_gain.coarse = p_ext_data->fb_static_gain.coarse;
84200bb6:	61 f0 ec 86 	rMAC = MHU[r4 + 472];
84200bba:	61 f0 e0 8c 	MH[r4 + 448] = rMAC;
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
84200bbe:	61 f0 ef 86 	rMAC = MHU[r4 + 478];
84200bc2:	61 f0 e3 8c 	MH[r4 + 454] = rMAC;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
84200bc6:	61 f0 ee 86 	rMAC = MHU[r4 + 476];
84200bca:	61 f0 e2 8c 	MH[r4 + 452] = rMAC;

84200bce <Lc_aanc_opmsg_set_control_20>:
                    /* Handled by early exit above */
                    break;
            }

            /* Set timer and reinitialize flag in gentle mute */
            if (ctrl_value == AANC_SYSMODE_GENTLE_MUTE)
84200bce:	71 d8       	rMAC = M[FP + 56];
84200bd0:	48 25       	Null = rMAC - 5;
84200bd2:	08 62       	if NE jump (m) Lc_aanc_opmsg_set_control_22;

84200bd4 <Lc_aanc_opmsg_set_control_21>:
            {
                p_ext_data->gentle_mute_duration = aanc_calc_gentle_mute_time(
                                            p_ext_data->aanc_cap_params.OFFSET_GENTLE_MUTE_TIMER);
84200bd4:	f2 a8       	r0 = M[r4 + 76];
84200bd6:	07 f0 21 e2 	call (m) Lc_aanc_calc_gentle_mute_time_1;
84200bda:	62 f0 da 8c 	MH[r4 + 436] = r0;

                p_ext_data->gentle_mute_init_flag = FALSE;
84200bde:	60 f0 7c 8e 	M[r4 + 496] = Null;

84200be2 <Lc_aanc_opmsg_set_control_22>:
            }

            /* Set timer and reinitialize flag in quiet mode */
            if (ctrl_value == AANC_SYSMODE_QUIET)
84200be2:	71 d8       	rMAC = M[FP + 56];
84200be4:	88 25       	Null = rMAC - 6;
84200be6:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_24;

84200be8 <Lc_aanc_opmsg_set_control_23>:
            {
                p_ext_data->gentle_mute_duration = aanc_calc_gentle_mute_time(
                                            p_ext_data->aanc_cap_params.OFFSET_QUIET_MODE_TIMER);
84200be8:	62 f0 60 88 	r0 = M[r4 + 384];
84200bec:	07 f0 2b e1 	call (m) Lc_aanc_calc_gentle_mute_time_1;
84200bf0:	62 f0 da 8c 	MH[r4 + 436] = r0;

                p_ext_data->gentle_mute_init_flag = FALSE;
84200bf4:	60 f0 7c 8e 	M[r4 + 496] = Null;

84200bf8 <Lc_aanc_opmsg_set_control_24>:
            }

            /* Determine control mode source and set override flags for mode */
            if (ctrl_src == CPS_SOURCE_HOST)
84200bf8:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200bfc:	1e 62       	if NE jump (m) Lc_aanc_opmsg_set_control_30;

84200bfe <Lc_aanc_opmsg_set_control_25>:
            {
                p_ext_data->host_mode = ctrl_value;
84200bfe:	71 d8       	rMAC = M[FP + 56];
84200c00:	61 f0 64 8e 	M[r4 + 400] = rMAC;
84200c04:	9e 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c06 <Lc_aanc_opmsg_set_control_26>:
                case AANC_SYSMODE_FREEZE:
                    /* Freeze doesn't change gains */
                    break;
                case AANC_SYSMODE_MUTE_ANC:
                    /* Mute FF and FB gains */
                    p_ext_data->ff_gain.fine = 0;
84200c06:	60 f0 df 8c 	MH[r4 + 446] = Null;
                    p_ext_data->fb_gain.fine = 0;
84200c0a:	60 f0 e1 8c 	MH[r4 + 450] = Null;
                    break;
84200c0e:	e0 6f       	jump (m) Lc_aanc_opmsg_set_control_20;

84200c10 <Lc_aanc_opmsg_set_control_27>:
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
84200c10:	61 f0 eb 86 	rMAC = MHU[r4 + 470];
84200c14:	61 f0 df 8c 	MH[r4 + 446] = rMAC;
84200c18:	07 6e       	jump (m) Lc_aanc_opmsg_set_control_29;

84200c1a <Lc_aanc_opmsg_set_control_28>:
                    p_ext_data->ec_gain.fine = p_ext_data->ec_static_gain.fine;
                    p_ext_data->ec_gain.coarse = p_ext_data->ec_static_gain.coarse;
                    break;
                case AANC_SYSMODE_FULL:
                    /* Set gains to static & FF fine to algorithm value */
                    p_ext_data->ff_gain.fine = (uint16)p_ext_data->ag->p_fxlms_stats->adaptive_gain;
84200c1a:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200c1e:	09 a8       	rMAC = M[rMAC + 64];
84200c20:	49 88       	rMAC = M[rMAC + 4];
84200c22:	61 f0 df 8c 	MH[r4 + 446] = rMAC;

84200c26 <Lc_aanc_opmsg_set_control_29>:
                    p_ext_data->fb_gain.fine = 0;
                    break;
                case AANC_SYSMODE_STATIC:
                    /* Set all gains to static values */
                    p_ext_data->ff_gain.fine = p_ext_data->ff_static_gain.fine;
                    p_ext_data->ff_gain.coarse = p_ext_data->ff_static_gain.coarse;
84200c26:	61 f0 ea 86 	rMAC = MHU[r4 + 468];
84200c2a:	61 f0 de 8c 	MH[r4 + 444] = rMAC;
                    p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
84200c2e:	61 f0 ed 86 	rMAC = MHU[r4 + 474];
84200c32:	61 f0 e1 8c 	MH[r4 + 450] = rMAC;
84200c36:	c0 6f       	jump (m) Lc_aanc_opmsg_set_control_19;

84200c38 <Lc_aanc_opmsg_set_control_30>:
            {
                p_ext_data->host_mode = ctrl_value;
            }
            else
            {
                p_ext_data->qact_mode = ctrl_value;
84200c38:	71 d8       	rMAC = M[FP + 56];
84200c3a:	61 f0 65 8e 	M[r4 + 404] = rMAC;
                /* Set or clear the QACT override flag.
                * &= is used to preserve the state of the gain bits in the
                * override word.
                */
                if (ctrl_src == CPS_SOURCE_OBPM_ENABLE)
84200c3e:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200c42:	88 24       	Null = rMAC - 2;
84200c44:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_32;

84200c46 <Lc_aanc_opmsg_set_control_31>:
                {
                    p_ext_data->ovr_control |= AANC_CONTROL_MODE_OVERRIDE;
84200c46:	61 f0 66 88 	rMAC = M[r4 + 408];
84200c4a:	20 f0 00 f1 	rMAC = rMAC OR 0x2000;
84200c4e:	51 d8 
84200c50:	61 f0 66 8e 	M[r4 + 408] = rMAC;
84200c54:	76 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c56 <Lc_aanc_opmsg_set_control_32>:
                }
                else
                {
                    p_ext_data->ovr_control &= AANC_OVERRIDE_MODE_MASK;
84200c56:	61 f0 66 88 	rMAC = M[r4 + 408];
84200c5a:	11 f6 ff 1f 	rMAC = rMAC AND 0xdfff;
84200c5e:	61 f0 66 8e 	M[r4 + 408] = rMAC;
84200c62:	6f 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c64 <Lc_aanc_opmsg_set_control_33>:

            continue;
        }

        /* In/Out of Ear control */
        else if (ctrl_id == AANC_CONSTANT_IN_OUT_EAR_CTRL)
84200c64:	d0 24       	Null = r0 - 3;
84200c66:	07 62       	if NE jump (m) Lc_aanc_opmsg_set_control_35;

84200c68 <Lc_aanc_opmsg_set_control_34>:
        {
            ctrl_value &= 0x01;
84200c68:	71 d8       	rMAC = M[FP + 56];
84200c6a:	09 c0       	rMAC = rMAC AND 0x1;
84200c6c:	71 de       	M[FP + 56] = rMAC;
            p_ext_data->in_out_status = ctrl_value;
84200c6e:	61 f0 7d 8e 	M[r4 + 500] = rMAC;

            /* No override flags indicated for in/out of ear */
            continue;
84200c72:	67 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c74 <Lc_aanc_opmsg_set_control_35>:
        }

        /* Channel control */
        else if (ctrl_id == AANC_CONSTANT_CHANNEL_CTRL)
84200c74:	50 25       	Null = r0 - 5;
84200c76:	0e 62       	if NE jump (m) Lc_aanc_opmsg_set_control_40;

84200c78 <Lc_aanc_opmsg_set_control_36>:
        {
            /* Channel can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200c78:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200c7c:	62 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200c7e <Lc_aanc_opmsg_set_control_37>:
            {
                ctrl_value &= 0x1;
84200c7e:	71 d8       	rMAC = M[FP + 56];
84200c80:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200c82:	71 de       	M[FP + 56] = rMAC;
84200c84:	04 62       	if NE jump (m) Lc_aanc_opmsg_set_control_39;

84200c86 <Lc_aanc_opmsg_set_control_38>:
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC0_ID;
84200c86:	69 f0 e0 8b 	MB[r4 + 480] = r7;
84200c8a:	5b 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c8c <Lc_aanc_opmsg_set_control_39>:
                }
                else
                {
                    p_ext_data->anc_channel = AANC_ANC_INSTANCE_ANC1_ID;
84200c8c:	6b f0 e0 8b 	MB[r4 + 480] = r9;
84200c90:	58 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200c92 <Lc_aanc_opmsg_set_control_40>:
            /* No override flags indicated for channel */
            continue;
        }

        /* Feedforward control */
        else if (ctrl_id == AANC_CONSTANT_FEEDFORWARD_CTRL)
84200c92:	90 25       	Null = r0 - 6;
84200c94:	18 62       	if NE jump (m) Lc_aanc_opmsg_set_control_45;

84200c96 <Lc_aanc_opmsg_set_control_41>:
        {
            /* Feedforward can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200c96:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200c9a:	53 63       	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200c9c <Lc_aanc_opmsg_set_control_42>:
            {
                ctrl_value &= 0x1;
84200c9c:	71 d8       	rMAC = M[FP + 56];
84200c9e:	09 c0       	rMAC = rMAC AND 0x1;
                if (ctrl_value == 0)
84200ca0:	71 de       	M[FP + 56] = rMAC;
84200ca2:	09 62       	if NE jump (m) Lc_aanc_opmsg_set_control_44;

84200ca4 <Lc_aanc_opmsg_set_control_43>:
                {
                    /* hybrid */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFB_ID;
84200ca4:	6b f0 e1 8b 	MB[r4 + 481] = r9;
                    p_ext_data->anc_fb_path = AANC_ANC_PATH_FFA_ID;
84200ca8:	69 f0 e2 8b 	MB[r4 + 482] = r7;
                    p_ext_data->anc_clock_check_value = AANC_HYBRID_ENABLE;
84200cac:	51 d8       	rMAC = M[FP + 40];
84200cae:	61 f0 f2 8c 	MH[r4 + 484] = rMAC;
84200cb2:	47 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200cb4 <Lc_aanc_opmsg_set_control_44>:
                }
                else
                {
                    /* feedforward only */
                    p_ext_data->anc_ff_path = AANC_ANC_PATH_FFA_ID;
84200cb4:	69 f0 e1 8b 	MB[r4 + 481] = r7;
                    p_ext_data->anc_fb_path = 0;
84200cb8:	60 f0 e2 8b 	MB[r4 + 482] = Null;
                    p_ext_data->anc_clock_check_value = AANC_FEEDFORWARD_ENABLE;
84200cbc:	59 d8       	rMAC = M[FP + 44];
84200cbe:	61 f0 f2 8c 	MH[r4 + 484] = rMAC;
84200cc2:	3f 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200cc4 <Lc_aanc_opmsg_set_control_45>:
            /* No override flags indicated for feedforward */
            continue;
        }

        /* Gain override */
        else if (ctrl_id == AANC_CONSTANT_FF_FINE_GAIN_CTRL)
84200cc4:	10 25       	Null = r0 - 4;
84200cc6:	11 62       	if NE jump (m) Lc_aanc_opmsg_set_control_49;

84200cc8 <Lc_aanc_opmsg_set_control_46>:
        {
            if (override_gain(p_ext_data, ctrl_value, FALSE,
                              &p_ext_data->ff_gain.fine))
84200cc8:	65 f0 be 21 	r3 = r4 + 446;
84200ccc:	73 d8       	r1 = M[FP + 56];
84200cce:	04 00       	r2 = Null + Null;
84200cd0:	32 00       	r0 = r4 + Null;
84200cd2:	04 f0 2d eb 	call (m) Lc_override_gain_1;
84200cd6:	10 04       	Null = r0 - Null;
84200cd8:	06 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200cda <Lc_aanc_opmsg_set_control_47>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200cda:	33 00       	r1 = r4 + Null;
84200cdc:	3a 00       	r0 = r5 + Null;
84200cde:	03 f0 37 ec 	call (m) Lc_aanc_update_gain_1;
84200ce2:	2f 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ce4 <Lc_aanc_opmsg_set_control_48>:
            }
            else
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
84200ce4:	5a 09       	r8 = r9 + Null;
84200ce6:	2d 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200ce8 <Lc_aanc_opmsg_set_control_49>:
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FF_COARSE_GAIN_CTRL)
84200ce8:	d0 25       	Null = r0 - 7;
84200cea:	0f 62       	if NE jump (m) Lc_aanc_opmsg_set_control_52;

84200cec <Lc_aanc_opmsg_set_control_50>:
        {
            if (override_gain(p_ext_data, ctrl_value, TRUE,
                              &p_ext_data->ff_gain.coarse))
84200cec:	65 f0 bc 21 	r3 = r4 + 444;
84200cf0:	73 d8       	r1 = M[FP + 56];
84200cf2:	4c 08       	r2 = r7 + Null;
84200cf4:	32 00       	r0 = r4 + Null;
84200cf6:	04 f0 29 ea 	call (m) Lc_override_gain_1;
84200cfa:	10 04       	Null = r0 - Null;
84200cfc:	f4 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200cfe <Lc_aanc_opmsg_set_control_51>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200cfe:	33 00       	r1 = r4 + Null;
84200d00:	3a 00       	r0 = r5 + Null;
84200d02:	03 f0 33 eb 	call (m) Lc_aanc_update_gain_1;
84200d06:	1d 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200d08 <Lc_aanc_opmsg_set_control_52>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FB_FINE_GAIN_CTRL)
84200d08:	10 26       	Null = r0 - 8;
84200d0a:	0f 62       	if NE jump (m) Lc_aanc_opmsg_set_control_55;

84200d0c <Lc_aanc_opmsg_set_control_53>:
        {
            if (override_gain(p_ext_data, ctrl_value, FALSE,
                              &p_ext_data->fb_gain.fine))
84200d0c:	65 f0 c2 21 	r3 = r4 + 450;
84200d10:	73 d8       	r1 = M[FP + 56];
84200d12:	04 00       	r2 = Null + Null;
84200d14:	32 00       	r0 = r4 + Null;
84200d16:	04 f0 29 e9 	call (m) Lc_override_gain_1;
84200d1a:	10 04       	Null = r0 - Null;
84200d1c:	e4 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200d1e <Lc_aanc_opmsg_set_control_54>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200d1e:	33 00       	r1 = r4 + Null;
84200d20:	3a 00       	r0 = r5 + Null;
84200d22:	03 f0 33 ea 	call (m) Lc_aanc_update_gain_1;
84200d26:	0d 6f       	jump (m) Lc_aanc_opmsg_set_control_5;

84200d28 <Lc_aanc_opmsg_set_control_55>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_FB_COARSE_GAIN_CTRL)
84200d28:	50 26       	Null = r0 - 9;
84200d2a:	10 62       	if NE jump (m) Lc_aanc_opmsg_set_control_58;

84200d2c <Lc_aanc_opmsg_set_control_56>:
        {
            if (override_gain(p_ext_data, ctrl_value, TRUE,
                              &p_ext_data->fb_gain.coarse))
84200d2c:	65 f0 c0 21 	r3 = r4 + 448;
84200d30:	73 d8       	r1 = M[FP + 56];
84200d32:	4c 08       	r2 = r7 + Null;
84200d34:	32 00       	r0 = r4 + Null;
84200d36:	04 f0 29 e8 	call (m) Lc_override_gain_1;
84200d3a:	10 04       	Null = r0 - Null;
84200d3c:	d4 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200d3e <Lc_aanc_opmsg_set_control_57>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200d3e:	33 00       	r1 = r4 + Null;
84200d40:	3a 00       	r0 = r5 + Null;
84200d42:	03 f0 33 e9 	call (m) Lc_aanc_update_gain_1;
84200d46:	ff ff fb eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d4a <Lc_aanc_opmsg_set_control_58>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_EC_FINE_GAIN_CTRL)
84200d4a:	90 26       	Null = r0 - 10;
84200d4c:	10 62       	if NE jump (m) Lc_aanc_opmsg_set_control_61;

84200d4e <Lc_aanc_opmsg_set_control_59>:
        {
            if (override_gain(p_ext_data, ctrl_value, FALSE,
                              &p_ext_data->ec_gain.fine))
84200d4e:	65 f0 c6 21 	r3 = r4 + 454;
84200d52:	73 d8       	r1 = M[FP + 56];
84200d54:	04 00       	r2 = Null + Null;
84200d56:	32 00       	r0 = r4 + Null;
84200d58:	04 f0 27 e7 	call (m) Lc_override_gain_1;
84200d5c:	10 04       	Null = r0 - Null;
84200d5e:	c3 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200d60 <Lc_aanc_opmsg_set_control_60>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200d60:	33 00       	r1 = r4 + Null;
84200d62:	3a 00       	r0 = r5 + Null;
84200d64:	03 f0 31 e8 	call (m) Lc_aanc_update_gain_1;
84200d68:	ff ff d9 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d6c <Lc_aanc_opmsg_set_control_61>:
            {
                result = OPMSG_RESULT_STATES_PARAMETER_STATE_NOT_READY;
            }
            continue;
        }
        else if (ctrl_id == AANC_CONSTANT_EC_COARSE_GAIN_CTRL)
84200d6c:	d0 26       	Null = r0 - 11;
84200d6e:	10 62       	if NE jump (m) Lc_aanc_opmsg_set_control_64;

84200d70 <Lc_aanc_opmsg_set_control_62>:
        {
            if (override_gain(p_ext_data, ctrl_value, TRUE,
                              &p_ext_data->ec_gain.coarse))
84200d70:	65 f0 c4 21 	r3 = r4 + 452;
84200d74:	73 d8       	r1 = M[FP + 56];
84200d76:	4c 08       	r2 = r7 + Null;
84200d78:	32 00       	r0 = r4 + Null;
84200d7a:	04 f0 25 e6 	call (m) Lc_override_gain_1;
84200d7e:	10 04       	Null = r0 - Null;
84200d80:	b2 61       	if EQ jump (m) Lc_aanc_opmsg_set_control_48;

84200d82 <Lc_aanc_opmsg_set_control_63>:
            {
                aanc_update_gain(op_data, p_ext_data);
84200d82:	33 00       	r1 = r4 + Null;
84200d84:	3a 00       	r0 = r5 + Null;
84200d86:	03 f0 2f e7 	call (m) Lc_aanc_update_gain_1;
84200d8a:	ff ff b7 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200d8e <Lc_aanc_opmsg_set_control_64>:
            }
            continue;
        }

        /* Filter config control */
        else if (ctrl_id == AANC_CONSTANT_FILTER_CONFIG_CTRL)
84200d8e:	10 27       	Null = r0 - 12;
84200d90:	f1 ff af eb 	if NE jump (m) Lc_aanc_opmsg_set_control_4;

84200d94 <Lc_aanc_opmsg_set_control_65>:
        {
            /* Channel can only be updated from the host */
            if (ctrl_src == CPS_SOURCE_HOST)
84200d94:	e1 f0 3c 80 	rMAC = MBS[FP + 60];
84200d98:	f1 ff a9 eb 	if NE jump (m) Lc_aanc_opmsg_set_control_5;

84200d9c <Lc_aanc_opmsg_set_control_66>:
            {
                ctrl_value &= 0x1;
84200d9c:	71 d8       	rMAC = M[FP + 56];
84200d9e:	09 c0       	rMAC = rMAC AND 0x1;
84200da0:	71 de       	M[FP + 56] = rMAC;
                /* Set ANC channel */
                FXLMS100_PARAMETERS *p_params = p_ext_data->ag->p_fxlms_params;
84200da2:	62 f0 6e 88 	r0 = M[r4 + 440];
84200da6:	d2 99       	r0 = M[r0 + 60];
                unsigned existing_configuration = \
                    p_params->configuration & FXLMS100_CONFIG_LAYOUT_MASK_INV;
84200da8:	93 99       	r1 = M[r0 + 56];
84200daa:	33 f7 f0 1f 	r1 = r1 AND 0xfff0;
                switch (ctrl_value)
84200dae:	48 24       	Null = rMAC - 1;
84200db0:	06 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_68;

84200db2 <Lc_aanc_opmsg_set_control_67>:
                {
                    case AANC_FILTER_CONFIG_SINGLE:
                        p_params->configuration = \
                            existing_configuration | FXLMS100_CONFIG_SINGLE;
84200db2:	93 9f       	M[r0 + 56] = r1;
                        p_ext_data->filter_config = AANC_FILTER_CONFIG_SINGLE;
84200db4:	60 f0 db 8c 	MH[r4 + 438] = Null;
84200db8:	ff ff 89 eb 	jump (m) Lc_aanc_opmsg_set_control_5;

84200dbc <Lc_aanc_opmsg_set_control_68>:
                        break;
                    case AANC_FILTER_CONFIG_PARALLEL:
                        p_params->configuration = \
                            existing_configuration | FXLMS100_CONFIG_PARALLEL;
84200dbc:	19 c8       	rMAC = r1 OR 0x1;
84200dbe:	91 9f       	M[r0 + 56] = rMAC;
                        p_ext_data->filter_config = AANC_FILTER_CONFIG_PARALLEL;
84200dc0:	61 d8       	rMAC = M[FP + 48];
84200dc2:	61 f0 db 8c 	MH[r4 + 438] = rMAC;
                        break;
84200dc6:	ff ff fb ea 	jump (m) Lc_aanc_opmsg_set_control_5;

84200dca <Lc_aanc_opmsg_set_control_69>:
    {
        p_ext_data->cur_mode = p_ext_data->qact_mode;
    }
    else
    {
        p_ext_data->cur_mode = p_ext_data->host_mode;
84200dca:	61 f0 64 88 	rMAC = M[r4 + 400];
84200dce:	61 f0 63 8e 	M[r4 + 396] = rMAC;

84200dd2 <Lc_aanc_opmsg_set_control_70>:
    }

    cps_response_set_result(resp_data, result);
84200dd2:	53 08       	r1 = r8 + Null;
84200dd4:	4a d8       	r0 = M[FP + 36];
84200dd6:	ef fd fe ff 	call (m) 0xb4e;
84200dda:	39 eb 

    return TRUE;
84200ddc:	4a 08       	r0 = r7 + Null;

84200dde <Lc_aanc_opmsg_set_control_71>:
}
84200dde:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84200de0:	d8 4c       	rts;

84200de2 <$_aanc_opmsg_get_params>:

bool aanc_opmsg_get_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200de2:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200de4:	1f 00       	r5 = r1 + Null;
84200de6:	26 00       	r4 = r2 + Null;
84200de8:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200dea:	ef fd fb ff 	call (m) 0x4e6;
84200dee:	3d e7 
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                     resp_length, resp_data);
84200df0:	02 f0 fc 45 	r0 = r0 + 508;
84200df4:	45 08       	r3 = r6 + Null;
84200df6:	34 00       	r2 = r4 + Null;
84200df8:	3b 00       	r1 = r5 + Null;
84200dfa:	ef fd fc ff 	call (m) 0x792;
84200dfe:	39 ec 

84200e00 <Lc_aanc_opmsg_get_params_2>:
}
84200e00:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200e02:	d8 4c       	rts;

84200e04 <$_aanc_opmsg_get_defaults>:

bool aanc_opmsg_get_defaults(OPERATOR_DATA *op_data, void *message_data,
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200e04:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84200e06:	1f 00       	r5 = r1 + Null;
84200e08:	26 00       	r4 = r2 + Null;
84200e0a:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200e0c:	ef fd fb ff 	call (m) 0x4e6;
84200e10:	3b e6 
                             unsigned *resp_length,
                             OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetDefaultsMsgHandler(&p_ext_data->params_def, message_data,
                                    resp_length, resp_data);
84200e12:	02 f0 fc 45 	r0 = r0 + 508;
84200e16:	45 08       	r3 = r6 + Null;
84200e18:	34 00       	r2 = r4 + Null;
84200e1a:	3b 00       	r1 = r5 + Null;
84200e1c:	ef fd fd ff 	call (m) 0x840;
84200e20:	25 e1 

84200e22 <Lc_aanc_opmsg_get_defaults_2>:
}
84200e22:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84200e24:	d8 4c       	rts;

84200e26 <$_aanc_opmsg_set_params>:

bool aanc_opmsg_set_params(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200e26:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200e28:	19 09       	r7 = r1 + Null;
84200e2a:	27 00       	r5 = r2 + Null;
84200e2c:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200e2e:	ef fd fb ff 	call (m) 0x4e6;
84200e32:	39 e5 
84200e34:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    bool retval;
    /* patch_fn(aanc_opmsg_set_params); */

    retval = cpsSetParameterMsgHandler(&p_ext_data->params_def, message_data,
                                       resp_length, resp_data);
84200e36:	62 f0 fc 21 	r0 = r4 + 508;
84200e3a:	45 08       	r3 = r6 + Null;
84200e3c:	3c 00       	r2 = r5 + Null;
84200e3e:	4b 08       	r1 = r7 + Null;
84200e40:	ef fd fd ff 	call (m) 0x914;
84200e44:	35 e6 
84200e46:	17 00       	r5 = r0 + Null;

    if (retval)
84200e48:	05 60       	if EQ jump (m) Lc_aanc_opmsg_set_params_3;

84200e4a <Lc_aanc_opmsg_set_params_2>:
    {
        /* Set re-initialization flag for capability */
        p_ext_data->re_init_flag = TRUE;
84200e4a:	41 20       	rMAC = Null + 1;
84200e4c:	61 f0 7a 8e 	M[r4 + 488] = rMAC;
84200e50:	0b 6e       	jump (m) Lc_aanc_opmsg_set_params_5;

84200e52 <Lc_aanc_opmsg_set_params_3>:
    }
    else
    {
        L2_DBG_MSG("AANC Set Parameters Failed");
84200e52:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84200e56:	88 24       	Null = rMAC - 2;
84200e58:	07 68       	if LT jump (m) Lc_aanc_opmsg_set_params_5;

84200e5a <Lc_aanc_opmsg_set_params_4>:
84200e5a:	55 f1 02 f0 	r0 = Null + 357564532;
84200e5e:	74 40 
84200e60:	ef fd ff ff 	call (m) 0xccc;
84200e64:	2d e3 

84200e66 <Lc_aanc_opmsg_set_params_5>:
    }

    return retval;
84200e66:	3a 00       	r0 = r5 + Null;

84200e68 <Lc_aanc_opmsg_set_params_6>:
}
84200e68:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200e6a:	d8 4c       	rts;

84200e6c <$_aanc_opmsg_get_status>:

bool aanc_opmsg_get_status(OPERATOR_DATA *op_data, void *message_data,
                           unsigned *resp_length,
                           OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200e6c:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84200e6e:	59 4c       	SP = SP + 100;
84200e70:	19 09       	r7 = r1 + Null;
84200e72:	27 00       	r5 = r2 + Null;
84200e74:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200e76:	ef fd fb ff 	call (m) 0x4e6;
84200e7a:	31 e3 
84200e7c:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    /* patch_fn_shared(aanc_capability);  TODO: patch functions */
    int i;

    /* Build the response */
    unsigned *resp = NULL;
84200e7e:	30 de       	M[FP + 24] = Null;
    if(!common_obpm_status_helper(message_data, resp_length, resp_data,
                                  sizeof(AANC_STATISTICS), &resp))
84200e80:	81 11       	rMAC = FP + 24;
84200e82:	09 1c       	pushm <rMAC>;
84200e84:	05 f0 60 40 	r3 = Null + 96;
84200e88:	44 08       	r2 = r6 + Null;
84200e8a:	3b 00       	r1 = r5 + Null;
84200e8c:	4a 08       	r0 = r7 + Null;
84200e8e:	ef fd fe ff 	call (m) 0xb64;
84200e92:	37 e6 
84200e94:	7f 4c       	SP = SP + -4;
84200e96:	10 04       	Null = r0 - Null;
84200e98:	03 62       	if NE jump (m) Lc_aanc_opmsg_get_status_3;

84200e9a <Lc_aanc_opmsg_get_status_2>:
    {
         return FALSE;
84200e9a:	02 00       	r0 = Null + Null;
84200e9c:	96 6e       	jump (m) Lc_aanc_opmsg_get_status_13;

84200e9e <Lc_aanc_opmsg_get_status_3>:
    }

    if (resp)
84200e9e:	31 d8       	rMAC = M[FP + 24];
84200ea0:	93 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_12;

84200ea2 <Lc_aanc_opmsg_get_status_4>:
    {
        AANC_STATISTICS stats;
        AANC_STATISTICS *pstats = &stats;
        FXLMS100_PARAMETERS *p_fxlms_params = p_ext_data->ag->p_fxlms_params;
84200ea2:	63 f0 6e 88 	r1 = M[r4 + 440];
84200ea6:	d9 99       	rMAC = M[r1 + 60];
        FXLMS100_STATISTICS *p_fxlms_stats = p_ext_data->ag->p_fxlms_stats;
84200ea8:	1a a8       	r0 = M[r1 + 64];
        ED100_STATISTICS *p_ed_int_stats = p_ext_data->ag->p_ed_int_stats;
84200eaa:	39 f0 04 88 	r7 = M[r1 + 16];
        ED100_STATISTICS *p_ed_ext_stats = p_ext_data->ag->p_ed_ext_stats;
84200eae:	5f 98       	r5 = M[r1 + 36];
        ED100_STATISTICS *p_ed_pb_stats = p_ext_data->ag->p_ed_pb_stats;
84200eb0:	38 f0 0d 88 	r6 = M[r1 + 52];
        ParamType *pparam = (ParamType*)pstats;

#ifdef USE_AANC_LICENSING
        p_ext_data->license_status = AANC_LICENSE_STATUS_LICENSING_BUILD_STATUS;
84200eb4:	00 f1 03 f0 	r1 = Null + 268435456;
84200eb8:	00 40 
84200eba:	63 f0 7e 8e 	M[r4 + 504] = r1;
        if (p_fxlms_stats->licensed)
84200ebe:	90 88       	Null = M[r0 + 8];
84200ec0:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_6;

84200ec2 <Lc_aanc_opmsg_get_status_5>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_FxLMS;
84200ec2:	00 f1 03 f0 	r1 = Null + 268435458;
84200ec6:	02 40 
84200ec8:	63 f0 7e 8e 	M[r4 + 504] = r1;

84200ecc <Lc_aanc_opmsg_get_status_6>:
        /* NB: License status won't be set if the block is disabled.
         * Given that all EDs use the same license check, OR a comparison
         * between them.
         */
        if (p_ed_ext_stats->licensed || p_ed_int_stats->licensed ||
            p_ed_pb_stats->licensed)
84200ecc:	38 89       	Null = M[r5 + 16];
84200ece:	07 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

84200ed0 <Lc_aanc_opmsg_get_status_7>:
84200ed0:	90 f0 04 88 	Null = M[r7 + 16];
84200ed4:	04 62       	if NE jump (m) Lc_aanc_opmsg_get_status_9;

84200ed6 <Lc_aanc_opmsg_get_status_8>:
84200ed6:	80 f0 04 88 	Null = M[r6 + 16];
84200eda:	06 60       	if EQ jump (m) Lc_aanc_opmsg_get_status_10;

84200edc <Lc_aanc_opmsg_get_status_9>:
        {
            p_ext_data->license_status |= AANC_LICENSE_STATUS_ED;
84200edc:	63 f0 7e 88 	r1 = M[r4 + 504];
84200ee0:	1b c8       	r1 = r1 OR 0x1;
84200ee2:	63 f0 7e 8e 	M[r4 + 504] = r1;

84200ee6 <Lc_aanc_opmsg_get_status_10>:
        }
#endif /* USE_AANC_LICENSING */

        pstats->OFFSET_CUR_MODE            = p_ext_data->cur_mode;
84200ee6:	63 f0 63 88 	r1 = M[r4 + 396];
84200eea:	3b de       	M[FP + 28] = r1;
        pstats->OFFSET_OVR_CONTROL         = p_ext_data->ovr_control;
84200eec:	63 f0 66 88 	r1 = M[r4 + 408];
84200ef0:	43 de       	M[FP + 32] = r1;
        pstats->OFFSET_IN_OUT_EAR_CTRL     = p_ext_data->in_out_status;
84200ef2:	63 f0 7d 88 	r1 = M[r4 + 500];
84200ef6:	4b de       	M[FP + 36] = r1;
        pstats->OFFSET_CHANNEL             = p_ext_data->anc_channel;
84200ef8:	63 f0 e0 81 	r1 = MBS[r4 + 480];
84200efc:	53 de       	M[FP + 40] = r1;
        pstats->OFFSET_FILTER_CONFIG       = p_fxlms_params->configuration;
84200efe:	89 99       	rMAC = M[rMAC + 56];
84200f00:	59 de       	M[FP + 44] = rMAC;
        pstats->OFFSET_FEEDFORWARD_PATH    = p_ext_data->anc_ff_path;
84200f02:	61 f0 e1 81 	rMAC = MBS[r4 + 481];
84200f06:	61 de       	M[FP + 48] = rMAC;
        pstats->OFFSET_LICENSE_STATUS      = p_ext_data->license_status;
84200f08:	61 f0 7e 88 	rMAC = M[r4 + 504];
84200f0c:	69 de       	M[FP + 52] = rMAC;
        pstats->OFFSET_FLAGS               = p_ext_data->flags;
84200f0e:	61 f0 68 88 	rMAC = M[r4 + 416];
84200f12:	71 de       	M[FP + 56] = rMAC;
        pstats->OFFSET_AG_CALC             = p_fxlms_stats->adaptive_gain;
84200f14:	51 88       	rMAC = M[r0 + 4];
84200f16:	79 de       	M[FP + 60] = rMAC;
        /* Send previous gain values as stats because these are only updated
         * when the value is actually written to HW.
         */
        pstats->OFFSET_FF_FINE_GAIN_CTRL   = p_ext_data->ff_gain_prev.fine;
84200f18:	61 f0 e5 86 	rMAC = MHU[r4 + 458];
84200f1c:	81 de       	M[FP + 64] = rMAC;
        pstats->OFFSET_FF_COARSE_GAIN_CTRL = \
        p_ext_data->ff_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200f1e:	61 f0 e4 86 	rMAC = MHU[r4 + 456];
84200f22:	89 c1       	rMAC = rMAC AND 0xf;
84200f24:	89 de       	M[FP + 68] = rMAC;
        pstats->OFFSET_FF_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ff_gain_prev.fine,
            (int16)p_ext_data->ff_gain_prev.coarse);
84200f26:	61 f0 e4 86 	rMAC = MHU[r4 + 456];
84200f2a:	0b 0c       	r1 = SE16 rMAC;
84200f2c:	62 f0 e5 86 	r0 = MHU[r4 + 458];
84200f30:	0a f0 39 e5 	call (m) $_aanc_proc_calc_gain_db;
84200f34:	92 de       	M[FP + 72] = r0;
        pstats->OFFSET_FB_FINE_GAIN_CTRL   = p_ext_data->fb_gain_prev.fine;
84200f36:	61 f0 e7 86 	rMAC = MHU[r4 + 462];
84200f3a:	99 de       	M[FP + 76] = rMAC;
        pstats->OFFSET_FB_COARSE_GAIN_CTRL = \
            p_ext_data->fb_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200f3c:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
84200f40:	89 c1       	rMAC = rMAC AND 0xf;
84200f42:	a1 de       	M[FP + 80] = rMAC;
        pstats->OFFSET_FB_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->fb_gain_prev.fine,
            (int16)p_ext_data->fb_gain_prev.coarse);
84200f44:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
84200f48:	0b 0c       	r1 = SE16 rMAC;
84200f4a:	62 f0 e7 86 	r0 = MHU[r4 + 462];
84200f4e:	0a f0 3b e4 	call (m) $_aanc_proc_calc_gain_db;
84200f52:	aa de       	M[FP + 84] = r0;
        pstats->OFFSET_EC_FINE_GAIN_CTRL   = p_ext_data->ec_gain_prev.fine;
84200f54:	61 f0 e9 86 	rMAC = MHU[r4 + 466];
84200f58:	b1 de       	M[FP + 88] = rMAC;
        pstats->OFFSET_EC_COARSE_GAIN_CTRL = \
            p_ext_data->ec_gain_prev.coarse & AANC_COARSE_GAIN_MASK;
84200f5a:	61 f0 e8 86 	rMAC = MHU[r4 + 464];
84200f5e:	89 c1       	rMAC = rMAC AND 0xf;
84200f60:	b9 de       	M[FP + 92] = rMAC;
        pstats->OFFSET_EC_GAIN_DB = aanc_proc_calc_gain_db(
            p_ext_data->ec_gain_prev.fine,
            (int16)p_ext_data->ec_gain_prev.coarse);
84200f62:	61 f0 e8 86 	rMAC = MHU[r4 + 464];
84200f66:	0b 0c       	r1 = SE16 rMAC;
84200f68:	62 f0 e9 86 	r0 = MHU[r4 + 466];
84200f6c:	0a f0 3d e3 	call (m) $_aanc_proc_calc_gain_db;
84200f70:	c2 de       	M[FP + 96] = r0;
        pstats->OFFSET_SPL_EXT             = p_ed_ext_stats->spl;
84200f72:	39 e8       	rMAC = M[r5 + Null];
84200f74:	c9 de       	M[FP + 100] = rMAC;
        pstats->OFFSET_SPL_INT             = p_ed_int_stats->spl;
84200f76:	91 f0 00 e8 	rMAC = M[r7 + Null];
84200f7a:	d1 de       	M[FP + 104] = rMAC;
        pstats->OFFSET_SPL_PB              = p_ed_pb_stats->spl;
84200f7c:	81 f0 00 e8 	rMAC = M[r6 + Null];
84200f80:	d9 de       	M[FP + 108] = rMAC;
        pstats->OFFSET_PEAK_EXT            = p_ext_data->ag->ext_peak_value;
84200f82:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200f86:	09 a9       	rMAC = M[rMAC + 80];
84200f88:	e1 de       	M[FP + 112] = rMAC;
        pstats->OFFSET_PEAK_INT            = p_ext_data->ag->int_peak_value;
84200f8a:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200f8e:	49 a9       	rMAC = M[rMAC + 84];
84200f90:	e9 de       	M[FP + 116] = rMAC;
        pstats->OFFSET_PEAK_PB             = p_ext_data->ag->pb_peak_value;
84200f92:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200f96:	89 a9       	rMAC = M[rMAC + 88];
84200f98:	f1 de       	M[FP + 120] = rMAC;

        /* Reset peak meters */
        p_ext_data->ag->ext_peak_value = 0;
84200f9a:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200f9e:	08 af       	M[rMAC + 80] = Null;
        p_ext_data->ag->int_peak_value = 0;
84200fa0:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200fa4:	48 af       	M[rMAC + 84] = Null;
        p_ext_data->ag->pb_peak_value = 0;
84200fa6:	61 f0 6e 88 	rMAC = M[r4 + 440];
84200faa:	88 af       	M[rMAC + 88] = Null;

        for (i=0; i<AANC_N_STAT/2; i++)
84200fac:	06 00       	r4 = Null + Null;
84200fae:	c7 11       	r5 = FP + 28;

84200fb0 <Lc_aanc_opmsg_get_status_11>:
        {
            resp = cpsPack2Words(pparam[2*i], pparam[2*i+1], resp);
84200fb0:	34 d8       	r2 = M[FP + 24];
84200fb2:	7b 88       	r1 = M[r5 + 4];
84200fb4:	3a e8       	r0 = M[r5 + Null];
84200fb6:	ff fd c6 f1 	call (m) 0x39caa;
84200fba:	35 e7 
84200fbc:	32 de       	M[FP + 24] = r0;
        /* Reset peak meters */
        p_ext_data->ag->ext_peak_value = 0;
        p_ext_data->ag->int_peak_value = 0;
        p_ext_data->ag->pb_peak_value = 0;

        for (i=0; i<AANC_N_STAT/2; i++)
84200fbe:	76 20       	r4 = r4 + 1;
84200fc0:	3f 22       	r5 = r5 + 8;
84200fc2:	30 27       	Null = r4 - 12;
84200fc4:	f6 69       	if LT jump (m) Lc_aanc_opmsg_get_status_11;

84200fc6 <Lc_aanc_opmsg_get_status_12>:
        {
            cpsPack1Word(pparam[AANC_N_STAT-1], resp);
        }
    }

    return TRUE;
84200fc6:	42 20       	r0 = Null + 1;

84200fc8 <Lc_aanc_opmsg_get_status_13>:
}
84200fc8:	67 4c       	SP = SP + -100;
84200fca:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
84200fcc:	d8 4c       	rts;

84200fce <$_aanc_opmsg_set_ucid>:
}

bool aanc_opmsg_set_ucid(OPERATOR_DATA *op_data, void *message_data,
                         unsigned *resp_length,
                         OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84200fce:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84200fd0:	12 09       	r8 = r0 + Null;
84200fd2:	19 09       	r7 = r1 + Null;
84200fd4:	27 00       	r5 = r2 + Null;
84200fd6:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84200fd8:	ef fd fa ff 	call (m) 0x4e6;
84200fdc:	2f e8 
84200fde:	16 00       	r4 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    PS_KEY_TYPE key;
    bool retval;

    retval = cpsSetUcidMsgHandler(&p_ext_data->params_def, message_data,
                                  resp_length, resp_data);
84200fe0:	62 f0 fc 21 	r0 = r4 + 508;
84200fe4:	45 08       	r3 = r6 + Null;
84200fe6:	3c 00       	r2 = r5 + Null;
84200fe8:	4b 08       	r1 = r7 + Null;
84200fea:	ef fd fc ff 	call (m) 0x9a6;
84200fee:	3d ed 
84200ff0:	17 00       	r5 = r0 + Null;
    L5_DBG_MSG1("AANC cpsSetUcidMsgHandler Return Value %d", retval);
    key = MAP_CAPID_UCID_SBID_TO_PSKEYID(p_ext_data->cap_id,
                                         p_ext_data->params_def.ucid,
                                         OPMSG_P_STORE_PARAMETER_SUB_ID);
84200ff2:	61 f0 83 88 	rMAC = M[r4 + 524];
84200ff6:	8a c2       	r0 = rMAC AND 0x3f;
84200ff8:	12 54       	r0 = r0 LSHIFT 1;
84200ffa:	b1 99       	rMAC = M[r4 + 56];
84200ffc:	8b c6       	r1 = rMAC AND 0xffff;
84200ffe:	9b 55       	r1 = r1 LSHIFT 7;
84201000:	9b 12       	r1 = r1 OR r0;

    ps_entry_read((void*)op_data, key, PERSIST_ANY, ups_params_aanc);
84201002:	42 f0 05 f0 	r3 = Null + 69211213;
84201006:	4d 68 
84201008:	04 00       	r2 = Null + Null;
8420100a:	52 08       	r0 = r8 + Null;
8420100c:	ff fd 34 f0 	call (m) 0x7888;
84201010:	3d e3 

    L5_DBG_MSG1("AANC UCID Set to %d", p_ext_data->params_def.ucid);

    p_ext_data->re_init_flag = TRUE;
84201012:	41 20       	rMAC = Null + 1;
84201014:	61 f0 7a 8e 	M[r4 + 488] = rMAC;

    return retval;
84201018:	3a 00       	r0 = r5 + Null;

8420101a <Lc_aanc_opmsg_set_ucid_2>:
}
8420101a:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
8420101c:	d8 4c       	rts;

8420101e <$_aanc_opmsg_get_ps_id>:

bool aanc_opmsg_get_ps_id(OPERATOR_DATA *op_data, void *message_data,
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
8420101e:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84201020:	1f 00       	r5 = r1 + Null;
84201022:	26 00       	r4 = r2 + Null;
84201024:	28 09       	r6 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201026:	ef fd fa ff 	call (m) 0x4e6;
8420102a:	21 e6 
                          unsigned *resp_length,
                          OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);
    return cpsGetUcidMsgHandler(&p_ext_data->params_def, p_ext_data->cap_id,
                                message_data, resp_length, resp_data);
8420102c:	10 1c       	pushm <r6>;
8420102e:	93 99       	r1 = M[r0 + 56];
84201030:	35 00       	r3 = r4 + Null;
84201032:	02 f0 fc 45 	r0 = r0 + 508;
84201036:	3c 00       	r2 = r5 + Null;
84201038:	ef fd fc ff 	call (m) 0x9c8;
8420103c:	31 ec 
8420103e:	7f 4c       	SP = SP + -4;

84201040 <Lc_aanc_opmsg_get_ps_id_2>:
}
84201040:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201042:	d8 4c       	rts;

84201044 <$_aanc_opmsg_set_static_gain>:
Custom opmsg handlers
*/
bool aanc_opmsg_set_static_gain(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84201044:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84201046:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201048:	ef fd fa ff 	call (m) 0x4e6;
8420104c:	3f e4 
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    p_ext_data->ff_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FF_COARSE_STATIC_GAIN);
8420104e:	f1 88       	rMAC = M[r4 + 12];
84201050:	21 f0 ea 8c 	MH[r0 + 468] = rMAC;
    p_ext_data->ff_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FF_FINE_STATIC_GAIN);
84201054:	31 89       	rMAC = M[r4 + 16];
84201056:	21 f0 eb 8c 	MH[r0 + 470] = rMAC;
    L4_DBG_MSG2("AANC Set FF Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->ff_static_gain.coarse, p_ext_data->ff_static_gain.fine);

    p_ext_data->fb_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_COARSE_STATIC_GAIN);
8420105a:	71 89       	rMAC = M[r4 + 20];
8420105c:	21 f0 ec 8c 	MH[r0 + 472] = rMAC;
    p_ext_data->fb_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, FB_FINE_STATIC_GAIN);
84201060:	b1 89       	rMAC = M[r4 + 24];
84201062:	21 f0 ed 8c 	MH[r0 + 474] = rMAC;
    L4_DBG_MSG2("AANC Set FB Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->fb_static_gain.coarse, p_ext_data->fb_static_gain.fine);

    p_ext_data->ec_static_gain.coarse = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_COARSE_STATIC_GAIN);
84201066:	f1 89       	rMAC = M[r4 + 28];
84201068:	21 f0 ee 8c 	MH[r0 + 476] = rMAC;
    p_ext_data->ec_static_gain.fine = OPMSG_FIELD_GET(
        message_data, OPMSG_SET_AANC_STATIC_GAIN, EC_FINE_STATIC_GAIN);
8420106c:	31 98       	rMAC = M[r4 + 32];
8420106e:	21 f0 ef 8c 	MH[r0 + 478] = rMAC;
    L4_DBG_MSG2("AANC Set EC Static Gain: Coarse = %d, Fine = %d",
        p_ext_data->ec_static_gain.coarse, p_ext_data->ec_static_gain.fine);
    p_ext_data->flags |= AANC_FLAGS_STATIC_GAIN_LOADED;
84201072:	21 f0 68 88 	rMAC = M[r0 + 416];
84201076:	c9 ce       	rMAC = rMAC OR 0x10000;
84201078:	21 f0 68 8e 	M[r0 + 416] = rMAC;

    return TRUE;
8420107c:	42 20       	r0 = Null + 1;

8420107e <Lc_aanc_opmsg_set_static_gain_2>:
}
8420107e:	f1 48       	popm <FP, r4, rLink>;
84201080:	d8 4c       	rts;

84201082 <$_aanc_opmsg_set_plant_model>:

bool aanc_opmsg_set_plant_model(OPERATOR_DATA *op_data, void *message_data,
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
84201082:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201084:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201086:	ef fd fa ff 	call (m) 0x4e6;
8420108a:	21 e3 
8420108c:	17 00       	r5 = r0 + Null;
                                unsigned *resp_length,
                                OP_OPMSG_RSP_PAYLOAD **resp_data)
{
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    if (!aanc_fxlms100_set_plant_model(p_ext_data->ag->p_fxlms, message_data))
8420108e:	71 f0 6e 88 	rMAC = M[r5 + 440];
84201092:	4a a8       	r0 = M[rMAC + 68];
84201094:	33 00       	r1 = r4 + Null;
84201096:	0c f0 29 ea 	call (m) $_aanc_fxlms100_set_plant_model;
8420109a:	10 04       	Null = r0 - Null;
8420109c:	03 62       	if NE jump (m) Lc_aanc_opmsg_set_plant_model_3;

8420109e <Lc_aanc_opmsg_set_plant_model_2>:
    {
        L4_DBG_MSG("AANC set plant coefficients failed");
        return FALSE;
8420109e:	02 00       	r0 = Null + Null;
842010a0:	09 6e       	jump (m) Lc_aanc_opmsg_set_plant_model_4;

842010a2 <Lc_aanc_opmsg_set_plant_model_3>:
    }

    p_ext_data->flags |= AANC_FLAGS_PLANT_MODEL_LOADED;
842010a2:	71 f0 68 88 	rMAC = M[r5 + 416];
842010a6:	00 f2 00 f1 	rMAC = rMAC OR 0x20000;
842010aa:	51 d8 
842010ac:	71 f0 68 8e 	M[r5 + 416] = rMAC;

    return TRUE;
842010b0:	42 20       	r0 = Null + 1;

842010b2 <Lc_aanc_opmsg_set_plant_model_4>:
}
842010b2:	f2 48       	popm <FP, r4, r5, rLink>;
842010b4:	d8 4c       	rts;

842010b6 <$_aanc_opmsg_set_control_model>:

bool aanc_opmsg_set_control_model(OPERATOR_DATA *op_data,
                                  void *message_data,
                                  unsigned *resp_length,
                                  OP_OPMSG_RSP_PAYLOAD **resp_data)
{
842010b6:	f2 1d       	pushm <FP(=SP), r4, r5, rLink>, SP = SP + 0x10;
842010b8:	1e 00       	r4 = r1 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
842010ba:	ef fd fa ff 	call (m) 0x4e6;
842010be:	2d e1 
842010c0:	17 00       	r5 = r0 + Null;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    int destination;

    if (!aanc_fxlms100_set_control_model(p_ext_data->ag->p_fxlms, message_data,
                                         &destination))
842010c2:	04 11       	r2 = FP + 16;
842010c4:	71 f0 6e 88 	rMAC = M[r5 + 440];
842010c8:	4a a8       	r0 = M[rMAC + 68];
842010ca:	33 00       	r1 = r4 + Null;
842010cc:	0c f0 2b ea 	call (m) $_aanc_fxlms100_set_control_model;
842010d0:	10 04       	Null = r0 - Null;
842010d2:	03 62       	if NE jump (m) Lc_aanc_opmsg_set_control_model_3;

842010d4 <Lc_aanc_opmsg_set_control_model_2>:
    {
        L4_DBG_MSG("AANC set control coefficients failed");
        return FALSE;
842010d4:	02 00       	r0 = Null + Null;
842010d6:	17 6e       	jump (m) Lc_aanc_opmsg_set_control_model_7;

842010d8 <Lc_aanc_opmsg_set_control_model_3>:
    }

    if (destination)
842010d8:	20 d8       	Null = M[FP + 16];
842010da:	0a 60       	if EQ jump (m) Lc_aanc_opmsg_set_control_model_5;

842010dc <Lc_aanc_opmsg_set_control_model_4>:
    {
        p_ext_data->flags |= AANC_FLAGS_CONTROL_1_MODEL_LOADED;
842010dc:	71 f0 68 88 	rMAC = M[r5 + 416];
842010e0:	00 f0 00 f8 	rMAC = rMAC OR 0x80000;
842010e4:	00 f1 51 c8 
842010e8:	71 f0 68 8e 	M[r5 + 416] = rMAC;
842010ec:	08 6e       	jump (m) Lc_aanc_opmsg_set_control_model_6;

842010ee <Lc_aanc_opmsg_set_control_model_5>:
    }
    else
    {
        p_ext_data->flags |= AANC_FLAGS_CONTROL_0_MODEL_LOADED;
842010ee:	71 f0 68 88 	rMAC = M[r5 + 416];
842010f2:	00 f4 00 f1 	rMAC = rMAC OR 0x40000;
842010f6:	51 d8 
842010f8:	71 f0 68 8e 	M[r5 + 416] = rMAC;

842010fc <Lc_aanc_opmsg_set_control_model_6>:
    }

    p_ext_data->re_init_flag = TRUE;
842010fc:	41 20       	rMAC = Null + 1;
842010fe:	71 f0 7a 8e 	M[r5 + 488] = rMAC;

    return TRUE;
84201102:	0a 00       	r0 = rMAC + Null;

84201104 <Lc_aanc_opmsg_set_control_model_7>:
}
84201104:	f2 49       	SP = SP - 0x10, popm <FP, r4, r5, rLink>;
84201106:	d8 4c       	rts;

84201108 <$_aanc_process_data>:

/****************************************************************************
Data processing function
*/
void aanc_process_data(OPERATOR_DATA *op_data, TOUCHED_TERMINALS *touched)
{
84201108:	f6 1e       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>, SP = SP + 0x20;
8420110a:	42 de       	M[FP + 32] = r0;
8420110c:	4b de       	M[FP + 36] = r1;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
8420110e:	ef fd f9 ff 	call (m) 0x4e6;
84201112:	39 ee 
84201114:	11 09       	r7 = r0 + Null;
    int i = 0;

    /* Certain conditions require an "early exit" that will just discard any
     * data in the input buffers and not do any other processing
     */
    bool exit_early = FALSE;
84201116:	03 09       	r9 = Null + Null;

    /* track the number of samples process */
    int sample_count = 0;
84201118:	50 de       	M[FP + 40] = Null;

    /* After data is processed flags are tested to determine the equivalent
     * operating state. This is an input to the gain update decision state
     * machine.
     */
    unsigned mode_after_flags = p_ext_data->cur_mode;
8420111a:	9a f0 63 88 	r8 = M[r7 + 396];

    /* Reference the calculated gain */
    unsigned *p_gain_calc = &p_ext_data->ag->p_fxlms_stats->adaptive_gain;
8420111e:	91 f0 6e 88 	rMAC = M[r7 + 440];
84201122:	09 a8       	rMAC = M[rMAC + 64];
84201124:	09 21       	rMAC = rMAC + 4;
84201126:	59 de       	M[FP + 44] = rMAC;

    /* Reference the capability parameters */
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
84201128:	91 f0 3c 20 	rMAC = r7 + 60;
8420112c:	61 de       	M[FP + 48] = rMAC;

    bool calculate_gain = TRUE;
8420112e:	41 20       	rMAC = Null + 1;
84201130:	69 de       	M[FP + 52] = rMAC;
 * number of samples will be returned.
 *
 */
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space = AANC_DEFAULT_FRAME_SIZE;
84201132:	06 f0 40 40 	r4 = Null + 64;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
84201136:	91 f0 ce 86 	rMAC = MHU[r7 + 412];
8420113a:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
8420113e:	08 27       	Null = rMAC - 12;
84201140:	01 f0 89 e6 	if NE jump (m) Lc_aanc_process_data_84;

84201144 <Lc_aanc_process_data_2>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201144:	07 00       	r5 = Null + Null;
84201146:	48 09       	r6 = r7 + Null;

84201148 <Lc_aanc_process_data_3>:
    {
        if (p_ext_data->inputs[i] != NULL)
84201148:	82 f0 00 e8 	r0 = M[r6 + Null];
8420114c:	07 60       	if EQ jump (m) Lc_aanc_process_data_6;

8420114e <Lc_aanc_process_data_4>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
8420114e:	ff fd c6 f1 	call (m) 0x39dd4;
84201152:	27 e4 
            if (amt < min_data_space)
84201154:	90 05       	Null = r0 - r4;
84201156:	02 66       	if GE jump (m) Lc_aanc_process_data_6;

84201158 <Lc_aanc_process_data_5>:
            {
                min_data_space = amt;
84201158:	16 00       	r4 = r0 + Null;

8420115a <Lc_aanc_process_data_6>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
8420115a:	7f 20       	r5 = r5 + 1;
8420115c:	20 75       	r6 = r6 + 4;
8420115e:	f8 24       	Null = r5 - 3;
84201160:	f4 6d       	if LE jump (m) Lc_aanc_process_data_3;

84201162 <Lc_aanc_process_data_7>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
84201162:	91 f0 cf 86 	rMAC = MHU[r7 + 414];
84201166:	11 60       	if EQ jump (m) Lc_aanc_process_data_13;

84201168 <Lc_aanc_process_data_8>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201168:	07 00       	r5 = Null + Null;
8420116a:	98 f0 10 20 	r6 = r7 + 16;

8420116e <Lc_aanc_process_data_9>:
        {
            if (p_ext_data->outputs[i] != NULL)
8420116e:	82 f0 00 e8 	r0 = M[r6 + Null];
84201172:	07 60       	if EQ jump (m) Lc_aanc_process_data_12;

84201174 <Lc_aanc_process_data_10>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
84201174:	ff fd c6 f1 	call (m) 0x39d88;
84201178:	35 e0 
                if (amt < min_data_space)
8420117a:	90 05       	Null = r0 - r4;
8420117c:	02 66       	if GE jump (m) Lc_aanc_process_data_12;

8420117e <Lc_aanc_process_data_11>:
                {
                    min_data_space = amt;
8420117e:	16 00       	r4 = r0 + Null;

84201180 <Lc_aanc_process_data_12>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201180:	7f 20       	r5 = r5 + 1;
84201182:	20 75       	r6 = r6 + 4;
84201184:	f8 24       	Null = r5 - 3;
84201186:	f4 6d       	if LE jump (m) Lc_aanc_process_data_9;

84201188 <Lc_aanc_process_data_13>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
84201188:	37 00       	r5 = r4 + Null;
        L5_DBG_MSG("Minimum number of ports (int and ext mic) not connected");
        return;
    }

     /* Return early if no data or not enough space to process */
    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
8420118a:	60 f0 40 24 	Null = r4 - 64;
8420118e:	0b f0 bb e5 	if LT jump (m) Lc_aanc_process_data_84;

84201192 <Lc_aanc_process_data_14>:
    /* Other conditions that are invalid for running AANC need to discard
     * input data if it exists.
     */

    /* Don't do any processing in standby */
    if (p_ext_data->cur_mode == AANC_SYSMODE_STANDBY)
84201192:	90 f0 63 88 	Null = M[r7 + 396];
84201196:	02 62       	if NE jump (m) Lc_aanc_process_data_16;

84201198 <Lc_aanc_process_data_15>:
    {
        exit_early = TRUE;
84201198:	0b 71       	r9 = Null + 1;

8420119a <Lc_aanc_process_data_16>:
    }

    /* Don't do any processing if out of ear */
    bool disable_ear_check = (p_params->OFFSET_AANC_DEBUG &
                              AANC_CONFIG_AANC_DEBUG_DISABLE_EAR_STATUS_CHECK);
8420119a:	61 d8       	rMAC = M[FP + 48];
8420119c:	49 89       	rMAC = M[rMAC + 20];
8420119e:	49 c0       	rMAC = rMAC AND 0x2;
    if ((p_ext_data->in_out_status != AANC_IN_EAR) && !disable_ear_check)
842011a0:	92 f0 7d 88 	r0 = M[r7 + 500];
842011a4:	50 24       	Null = r0 - 1;
842011a6:	04 60       	if EQ jump (m) Lc_aanc_process_data_19;

842011a8 <Lc_aanc_process_data_17>:
842011a8:	08 04       	Null = rMAC - Null;
842011aa:	02 62       	if NE jump (m) Lc_aanc_process_data_19;

842011ac <Lc_aanc_process_data_18>:
    {
        exit_early = TRUE;
842011ac:	0b 71       	r9 = Null + 1;

842011ae <Lc_aanc_process_data_19>:

    /* Don't do any processing if ANC HW clocks are invalid */
#ifndef RUNNING_ON_KALSIM
    uint16 anc0_enable;
    uint16 anc1_enable;
    uint16 *anc_selected = &anc0_enable;
842011ae:	86 13       	r4 = FP + 56;

    stream_get_anc_enable(&anc0_enable, &anc1_enable);
842011b0:	c3 13       	r1 = FP + 60;
842011b2:	82 13       	r0 = FP + 56;
842011b4:	ff fd 58 f0 	call (m) 0xc1c2;
842011b8:	2f e0 

    if (p_ext_data->anc_channel == AANC_ANC_INSTANCE_ANC1_ID)
842011ba:	91 f0 e0 81 	rMAC = MBS[r7 + 480];
842011be:	88 24       	Null = rMAC - 2;
842011c0:	02 62       	if NE jump (m) Lc_aanc_process_data_21;

842011c2 <Lc_aanc_process_data_20>:
    {
        anc_selected = &anc1_enable;
842011c2:	c6 13       	r4 = FP + 60;

842011c4 <Lc_aanc_process_data_21>:
    }

    bool anc_is_running = *anc_selected == p_ext_data->anc_clock_check_value;
842011c4:	33 e6       	r1 = MHU[r4 + Null];
842011c6:	92 f0 f2 86 	r0 = MHU[r7 + 484];
842011ca:	01 00       	rMAC = Null + Null;
842011cc:	98 04       	Null = r1 - r0;
842011ce:	20 f0 41 ce 	if EQ rMAC = Null + 1;
    bool disable_clock_check = (p_params->OFFSET_AANC_DEBUG &
                                AANC_CONFIG_AANC_DEBUG_DISABLE_ANC_CLOCK_CHECK);
842011d2:	62 d8       	r0 = M[FP + 48];
842011d4:	52 89       	r0 = M[r0 + 20];
842011d6:	d2 c0       	r0 = r0 AND 0x4;
    /* Don't do any processing if HW clocks aren't running */
    if (!anc_is_running && !disable_clock_check)
842011d8:	08 04       	Null = rMAC - Null;
842011da:	0f 62       	if NE jump (m) Lc_aanc_process_data_26;

842011dc <Lc_aanc_process_data_22>:
842011dc:	10 04       	Null = r0 - Null;
842011de:	0d 62       	if NE jump (m) Lc_aanc_process_data_26;

842011e0 <Lc_aanc_process_data_23>:
    {
        L2_DBG_MSG1("AANC invalid clocks detected: %d", *anc_selected);
842011e0:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842011e4:	88 24       	Null = rMAC - 2;
842011e6:	07 68       	if LT jump (m) Lc_aanc_process_data_25;

842011e8 <Lc_aanc_process_data_24>:
842011e8:	55 f1 02 f0 	r0 = Null + 357564559;
842011ec:	8f 40 
842011ee:	ef fd fd ff 	call (m) 0xcde;
842011f2:	31 e7 

842011f4 <Lc_aanc_process_data_25>:
    }
#endif

    if (exit_early)
    {
        bool discard_data = TRUE;
842011f4:	08 71       	r6 = Null + 1;
842011f6:	57 6e       	jump (m) Lc_aanc_process_data_36;

842011f8 <Lc_aanc_process_data_26>:
        L2_DBG_MSG1("AANC invalid clocks detected: %d", *anc_selected);
        exit_early = TRUE;
    }
#endif

    if (exit_early)
842011f8:	0f fb 00 c2 	Null = r9 - Null;
842011fc:	fc 63       	if NE jump (m) Lc_aanc_process_data_25;

842011fe <Lc_aanc_process_data_27>:

    /***************************
     * Adaptive gain processing
     ***************************/

    if (p_ext_data->re_init_flag == TRUE)
842011fe:	91 f0 7a 88 	rMAC = M[r7 + 488];
84201202:	48 24       	Null = rMAC - 1;
84201204:	32 62       	if NE jump (m) Lc_aanc_process_data_29;

84201206 <Lc_aanc_process_data_28>:
    {
        ADAPTIVE_GAIN *p_ag = p_ext_data->ag;
84201206:	96 f0 6e 88 	r4 = M[r7 + 440];
        p_ext_data->re_init_flag = FALSE;
8420120a:	90 f0 7a 8e 	M[r7 + 488] = Null;

        /* Copy terminal buffer pointers */
        p_ag->p_playback_ip = p_ext_data->inputs[AANC_PLAYBACK_TERMINAL_ID];
8420120e:	91 f0 00 e8 	rMAC = M[r7 + Null];
84201212:	61 f0 20 8e 	M[r4 + 128] = rMAC;
        p_ag->p_fbmon_ip = p_ext_data->inputs[AANC_FB_MON_TERMINAL_ID];
84201216:	91 f0 01 88 	rMAC = M[r7 + 4];
8420121a:	71 bf       	M[r4 + 116] = rMAC;
        p_ag->p_mic_int_ip = p_ext_data->inputs[AANC_MIC_INT_TERMINAL_ID];
8420121c:	91 f0 02 88 	rMAC = M[r7 + 8];
84201220:	b1 bf       	M[r4 + 120] = rMAC;
        p_ag->p_mic_ext_ip = p_ext_data->inputs[AANC_MIC_EXT_TERMINAL_ID];
84201222:	91 f0 03 88 	rMAC = M[r7 + 12];
84201226:	f1 bf       	M[r4 + 124] = rMAC;

        p_ag->p_playback_op = p_ext_data->outputs[AANC_PLAYBACK_TERMINAL_ID];
84201228:	91 f0 04 88 	rMAC = M[r7 + 16];
8420122c:	31 bf       	M[r4 + 112] = rMAC;
        p_ag->p_fbmon_op = p_ext_data->outputs[AANC_FB_MON_TERMINAL_ID];
8420122e:	91 f0 05 88 	rMAC = M[r7 + 20];
84201232:	61 f0 21 8e 	M[r4 + 132] = rMAC;
        p_ag->p_mic_int_op = p_ext_data->outputs[AANC_MIC_INT_TERMINAL_ID];
84201236:	91 f0 06 88 	rMAC = M[r7 + 24];
8420123a:	61 f0 22 8e 	M[r4 + 136] = rMAC;
        p_ag->p_mic_ext_op = p_ext_data->outputs[AANC_MIC_EXT_TERMINAL_ID];
8420123e:	91 f0 07 88 	rMAC = M[r7 + 28];
84201242:	61 f0 23 8e 	M[r4 + 140] = rMAC;

        aanc_initialize_events(op_data, p_ext_data);
84201246:	4b 08       	r1 = r7 + Null;
84201248:	42 d8       	r0 = M[FP + 32];
8420124a:	02 f0 3b e4 	call (m) Lc_aanc_initialize_events_1;

        aanc_proc_initialize(p_params, p_ag, p_params->OFFSET_FXLMS_INITIAL_VALUE,
                             &p_ext_data->flags, p_ext_data->re_init_hard);
8420124e:	91 f0 7b 88 	rMAC = M[r7 + 492];
84201252:	09 1c       	pushm <rMAC>;
84201254:	95 f0 a0 21 	r3 = r7 + 416;
84201258:	61 d8       	rMAC = M[FP + 48];
8420125a:	0a 00       	r0 = rMAC + Null;
8420125c:	14 f0 46 88 	r2 = M[rMAC + 280];
84201260:	33 00       	r1 = r4 + Null;
84201262:	05 f0 31 e2 	call (m) $_aanc_proc_initialize;
84201266:	7f 4c       	SP = SP + -4;

84201268 <Lc_aanc_process_data_29>:
    }

    /* Identify whether to do the gain calculation step */
    if ((p_params->OFFSET_DISABLE_AG_CALC & 0x1) ||
        (p_ext_data->cur_mode != AANC_SYSMODE_FULL))
84201268:	61 d8       	rMAC = M[FP + 48];
8420126a:	49 88       	rMAC = M[rMAC + 4];
8420126c:	09 c0       	rMAC = rMAC AND 0x1;
8420126e:	05 62       	if NE jump (m) Lc_aanc_process_data_31;

84201270 <Lc_aanc_process_data_30>:
84201270:	91 f0 63 88 	rMAC = M[r7 + 396];
84201274:	88 24       	Null = rMAC - 2;
84201276:	02 60       	if EQ jump (m) Lc_aanc_process_data_32;

84201278 <Lc_aanc_process_data_31>:
    {
        calculate_gain = FALSE;
84201278:	68 de       	M[FP + 52] = Null;

8420127a <Lc_aanc_process_data_32>:
8420127a:	0b 71       	r9 = Null + 1;

8420127c <Lc_aanc_process_data_33>:
    }

    /* Consume all the data in the input buffer, or until there isn't space
     * available.
     */
    while (samples_to_process >= AANC_DEFAULT_FRAME_SIZE)
8420127c:	70 f0 40 24 	Null = r5 - 64;
84201280:	c1 68       	if LT jump (m) Lc_aanc_process_data_79;

84201282 <Lc_aanc_process_data_34>:
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);
84201282:	92 f0 6e 88 	r0 = M[r7 + 440];
84201286:	6b d8       	r1 = M[FP + 52];
84201288:	06 f0 21 e5 	call (m) $_aanc_proc_process_data;
 * number of samples will be returned.
 *
 */
static inline int aanc_calc_samples_to_process(AANC_OP_DATA *p_ext_data)
{
    int i, amt, min_data_space = AANC_DEFAULT_FRAME_SIZE;
8420128c:	06 f0 40 40 	r4 = Null + 64;

    /* Return if int and ext mic input terminals are not connected */
    if ((p_ext_data->touched_sinks & AANC_MIN_VALID_SINKS) != AANC_MIN_VALID_SINKS)
84201290:	91 f0 ce 86 	rMAC = MHU[r7 + 412];
84201294:	11 f0 0c 00 	rMAC = rMAC AND 0xc;
84201298:	08 27       	Null = rMAC - 12;
8420129a:	1e 60       	if EQ jump (m) Lc_aanc_process_data_42;

8420129c <Lc_aanc_process_data_35>:
    {
        return INT_MAX;
8420129c:	ff f7 f6 f7 	r4 = Null + 2147483647;
842012a0:	ff 7b 
842012a2:	3c 6e       	jump (m) Lc_aanc_process_data_53;

842012a4 <Lc_aanc_process_data_36>:
        bool discard_data = TRUE;

        /* There is at least 1 frame to process */
        do {
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
842012a4:	06 00       	r4 = Null + Null;
842012a6:	4f 08       	r5 = r7 + Null;

842012a8 <Lc_aanc_process_data_37>:
            {
                if (p_ext_data->inputs[i] != NULL)
842012a8:	3a e8       	r0 = M[r5 + Null];
842012aa:	0e 60       	if EQ jump (m) Lc_aanc_process_data_40;

842012ac <Lc_aanc_process_data_38>:
                {
                    /* Discard a frame of data */
                    cbuffer_discard_data(p_ext_data->inputs[i],
                                         AANC_DEFAULT_FRAME_SIZE);
842012ac:	03 f0 40 40 	r1 = Null + 64;
842012b0:	ff fd c6 f1 	call (m) 0x39f54;
842012b4:	25 e5 

                    /* If there isn't a frame worth of data left then don't
                     * iterate through the input terminals again.
                     */
                    samples_to_process = cbuffer_calc_amount_data_in_words(
                        p_ext_data->inputs[i]);
842012b6:	3a e8       	r0 = M[r5 + Null];
842012b8:	ff fd c5 f1 	call (m) 0x39dd4;
842012bc:	3d e8 

                    if (samples_to_process < AANC_DEFAULT_FRAME_SIZE)
842012be:	20 f0 40 24 	Null = r0 - 64;
842012c2:	02 66       	if GE jump (m) Lc_aanc_process_data_40;

842012c4 <Lc_aanc_process_data_39>:
                    {
                        discard_data = FALSE;
842012c4:	00 09       	r6 = Null + Null;

842012c6 <Lc_aanc_process_data_40>:
        bool discard_data = TRUE;

        /* There is at least 1 frame to process */
        do {
            /* Iterate through all sinks */
            for (i = 0; i < AANC_MAX_SINKS; i++)
842012c6:	76 20       	r4 = r4 + 1;
842012c8:	3f 21       	r5 = r5 + 4;
842012ca:	30 25       	Null = r4 - 4;
842012cc:	ee 69       	if LT jump (m) Lc_aanc_process_data_37;

842012ce <Lc_aanc_process_data_41>:
                    {
                        discard_data = FALSE;
                    }
                }
            }
        } while (discard_data);
842012ce:	0f f8 00 c2 	Null = r6 - Null;
842012d2:	e9 63       	if NE jump (m) Lc_aanc_process_data_36;

842012d4 <Lc__ite_7>:
842012d4:	ba 6e       	jump (m) Lc_aanc_process_data_84;

842012d6 <Lc_aanc_process_data_42>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842012d6:	07 00       	r5 = Null + Null;
842012d8:	48 09       	r6 = r7 + Null;

842012da <Lc_aanc_process_data_43>:
    {
        if (p_ext_data->inputs[i] != NULL)
842012da:	82 f0 00 e8 	r0 = M[r6 + Null];
842012de:	07 60       	if EQ jump (m) Lc_aanc_process_data_46;

842012e0 <Lc_aanc_process_data_44>:
        {
            amt = cbuffer_calc_amount_data_in_words(p_ext_data->inputs[i]);
842012e0:	ff fd c5 f1 	call (m) 0x39dd4;
842012e4:	35 e7 
            if (amt < min_data_space)
842012e6:	90 05       	Null = r0 - r4;
842012e8:	02 66       	if GE jump (m) Lc_aanc_process_data_46;

842012ea <Lc_aanc_process_data_45>:
            {
                min_data_space = amt;
842012ea:	16 00       	r4 = r0 + Null;

842012ec <Lc_aanc_process_data_46>:
    {
        return INT_MAX;
    }

    /* Calculate the amount of data available */
    for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842012ec:	7f 20       	r5 = r5 + 1;
842012ee:	20 75       	r6 = r6 + 4;
842012f0:	f8 24       	Null = r5 - 3;
842012f2:	f4 6d       	if LE jump (m) Lc_aanc_process_data_43;

842012f4 <Lc_aanc_process_data_47>:
            }
        }
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
842012f4:	91 f0 cf 86 	rMAC = MHU[r7 + 414];
842012f8:	11 60       	if EQ jump (m) Lc_aanc_process_data_53;

842012fa <Lc_aanc_process_data_48>:
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
842012fa:	07 00       	r5 = Null + Null;
842012fc:	98 f0 10 20 	r6 = r7 + 16;

84201300 <Lc_aanc_process_data_49>:
        {
            if (p_ext_data->outputs[i] != NULL)
84201300:	82 f0 00 e8 	r0 = M[r6 + Null];
84201304:	07 60       	if EQ jump (m) Lc_aanc_process_data_52;

84201306 <Lc_aanc_process_data_50>:
            {
                amt = cbuffer_calc_amount_space_in_words(p_ext_data->outputs[i]);
84201306:	ff fd c5 f1 	call (m) 0x39d88;
8420130a:	23 e4 
                if (amt < min_data_space)
8420130c:	90 05       	Null = r0 - r4;
8420130e:	02 66       	if GE jump (m) Lc_aanc_process_data_52;

84201310 <Lc_aanc_process_data_51>:
                {
                    min_data_space = amt;
84201310:	16 00       	r4 = r0 + Null;

84201312 <Lc_aanc_process_data_52>:
    }

    /*  Calculate the available space */
    if (p_ext_data->touched_sources != 0)
    {
        for (i = AANC_PLAYBACK_TERMINAL_ID; i <= AANC_MIC_EXT_TERMINAL_ID; i++)
84201312:	7f 20       	r5 = r5 + 1;
84201314:	20 75       	r6 = r6 + 4;
84201316:	f8 24       	Null = r5 - 3;
84201318:	f4 6d       	if LE jump (m) Lc_aanc_process_data_49;

8420131a <Lc_aanc_process_data_53>:
            }
        }
    }
    /* Samples to process determined as minimum of data and space available */
    return min_data_space;
}
8420131a:	37 00       	r5 = r4 + Null;
    {
        aanc_proc_process_data(p_ext_data->ag, calculate_gain);

        samples_to_process = aanc_calc_samples_to_process(p_ext_data);

        sample_count += AANC_DEFAULT_FRAME_SIZE;
8420131c:	51 d8       	rMAC = M[FP + 40];
8420131e:	01 f0 40 44 	rMAC = rMAC + 64;
84201322:	51 de       	M[FP + 40] = rMAC;
#endif /* RUNNING_ON_KALSIM */

        /*************************
         * Check processing flags
         *************************/
        if (p_ext_data->flags & AANC_ED_FLAG_MASK)
84201324:	91 f0 68 88 	rMAC = M[r7 + 416];
84201328:	12 f0 70 00 	r0 = rMAC AND 0x70;
8420132c:	02 60       	if EQ jump (m) Lc_aanc_process_data_56;

8420132e <Lc_aanc_process_data_55>:
        {
            L5_DBG_MSG1("AANC ED detected: %d",
                        p_ext_data->flags & AANC_ED_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
8420132e:	22 71       	r8 = Null + 4;

84201330 <Lc_aanc_process_data_56>:
        }

        if (p_ext_data->flags & AANC_CLIPPING_FLAG_MASK)
84201330:	12 f0 00 07 	r0 = rMAC AND 0x700;
84201334:	02 60       	if EQ jump (m) Lc_aanc_process_data_58;

84201336 <Lc_aanc_process_data_57>:
        {
            L5_DBG_MSG1("AANC Clipping detected: %d",
                        p_ext_data->flags & AANC_CLIPPING_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
84201336:	22 71       	r8 = Null + 4;

84201338 <Lc_aanc_process_data_58>:
        }

        if (p_ext_data->flags & AANC_SATURATION_FLAG_MASK)
84201338:	11 f7 00 10 	rMAC = rMAC AND 0xf000;
8420133c:	02 60       	if EQ jump (m) Lc_aanc_process_data_60;

8420133e <Lc_aanc_process_data_59>:
        {
            L5_DBG_MSG1("AANC Saturation detected: %d",
                        p_ext_data->flags & AANC_SATURATION_FLAG_MASK);
            mode_after_flags = AANC_SYSMODE_FREEZE;
8420133e:	22 71       	r8 = Null + 4;

84201340 <Lc_aanc_process_data_60>:

        /**************
         * Update gain
         **************/
        /* Check SYSMODE state as this is the primary control */
        switch (p_ext_data->cur_mode)
84201340:	93 f0 63 88 	r1 = M[r7 + 396];
84201344:	58 24       	Null = r1 - 1;
84201346:	09 f0 a3 e1 	if LS jump (m) Lc_aanc_process_data_77;

8420134a <Lc_aanc_process_data_61>:
8420134a:	98 24       	Null = r1 - 2;
8420134c:	1b 60       	if EQ jump (m) Lc_aanc_process_data_67;

8420134e <Lc_aanc_process_data_62>:
8420134e:	18 25       	Null = r1 - 4;
84201350:	09 f0 99 e1 	if LS jump (m) Lc_aanc_process_data_77;

84201354 <Lc_aanc_process_data_63>:
84201354:	98 25       	Null = r1 - 6;
84201356:	08 f0 ff e0 	if HI jump (m) Lc_aanc_process_data_75;

8420135a <Lc_aanc_process_data_64>:
                break;
            case AANC_SYSMODE_QUIET:
                /* Fall through as action is taken in gentle mute */                
            case AANC_SYSMODE_GENTLE_MUTE:
                /* Gentle mute ramps gain down to 0 */
                if (p_ext_data->ff_gain.fine > 0)
8420135a:	92 f0 df 86 	r0 = MHU[r7 + 446];
8420135e:	10 24       	Null = r0 - 0;
84201360:	44 6c       	if LE jump (m) Lc_aanc_process_data_77;

84201362 <Lc_aanc_process_data_65>:
                {
                    if (!(p_ext_data->gentle_mute_init_flag))
84201362:	90 f0 7c 88 	Null = M[r7 + 496];
84201366:	1c 62       	if NE jump (m) Lc_aanc_process_data_71;

84201368 <Lc_aanc_process_data_66>:
                    {
                        /* Initialize gain value,
                        calculate gain decrease rate during gentle mute period */
                        p_ext_data->gentle_mute_init_flag = TRUE;
84201368:	9b f0 7c 8e 	M[r7 + 496] = r9;
                        p_ext_data->gentle_mute_gain = p_ext_data->ff_gain.fine << 16;
8420136c:	92 56       	r0 = r0 LSHIFT 16;
8420136e:	92 f0 6b 8e 	M[r7 + 428] = r0;
                        p_ext_data->gain_dec_rate = p_ext_data->gentle_mute_gain/ \
                            p_ext_data->gentle_mute_duration;
84201372:	93 f0 da 86 	r1 = MHU[r7 + 436];
84201376:	ff fd c7 f0 	call (m) 0x1a290;
8420137a:	3b e8 
8420137c:	92 f0 6c 8e 	M[r7 + 432] = r0;
84201380:	1b 6e       	jump (m) Lc_aanc_process_data_74;

84201382 <Lc_aanc_process_data_67>:
            case AANC_SYSMODE_MUTE_ANC:
                /* Mute action is taken in SET_CONTROL */
                break;
            case AANC_SYSMODE_FULL:
                /* Don't update the gain if any flags were set */
                if (mode_after_flags == AANC_SYSMODE_FREEZE)
84201382:	a0 f0 04 24 	Null = r8 - 4;
84201386:	31 60       	if EQ jump (m) Lc_aanc_process_data_77;

84201388 <Lc_aanc_process_data_68>:
                {
                    L4_DBG_MSG1("AANC FULL Mode, FREEZE: gain frozen at %d",
                                p_ext_data->ff_gain.fine);
                    break;
                }
                else if (mode_after_flags == AANC_SYSMODE_MUTE_ANC)
84201388:	a0 f0 01 24 	Null = r8 - 1;
8420138c:	04 62       	if NE jump (m) Lc_aanc_process_data_70;

8420138e <Lc_aanc_process_data_69>:
                {
                    L4_DBG_MSG("AANC FULL Mode, MUTE: updating gain to 0");
                    p_ext_data->ff_gain.fine = 0;
8420138e:	90 f0 df 8c 	MH[r7 + 446] = Null;
                    break;
84201392:	2b 6e       	jump (m) Lc_aanc_process_data_77;

84201394 <Lc_aanc_process_data_70>:
                }
                L4_DBG_MSG1("AANC FULL mode, FULL: updating gain to %d",
                            *p_gain_calc);
                p_ext_data->ff_gain.fine = (uint16) *p_gain_calc;
84201394:	59 d8       	rMAC = M[FP + 44];
84201396:	09 e8       	rMAC = M[rMAC + Null];
84201398:	91 f0 df 8c 	MH[r7 + 446] = rMAC;
                break;
8420139c:	26 6e       	jump (m) Lc_aanc_process_data_77;

8420139e <Lc_aanc_process_data_71>:
                            p_ext_data->gentle_mute_duration;
                    }
                    else
                    {
                        /* decrease gain at the determined rate */
                        if (p_ext_data->gentle_mute_gain >= p_ext_data->gain_dec_rate)
8420139e:	91 f0 6b 88 	rMAC = M[r7 + 428];
842013a2:	92 f0 6c 88 	r0 = M[r7 + 432];
842013a6:	88 04       	Null = rMAC - r0;
842013a8:	05 64       	if NC jump (m) Lc_aanc_process_data_73;

842013aa <Lc_aanc_process_data_72>:
                        {
                            p_ext_data->gentle_mute_gain = \
                                p_ext_data->gentle_mute_gain - p_ext_data->gain_dec_rate;
842013aa:	89 04       	rMAC = rMAC - r0;
842013ac:	91 f0 6b 8e 	M[r7 + 428] = rMAC;
842013b0:	03 6e       	jump (m) Lc_aanc_process_data_74;

842013b2 <Lc_aanc_process_data_73>:
                        }
                        else
                        {
                            p_ext_data->gentle_mute_gain = 0;
842013b2:	90 f0 6b 8e 	M[r7 + 428] = Null;

842013b6 <Lc_aanc_process_data_74>:
                        }
                    }
                    p_ext_data->ff_gain.fine = (uint16) ((p_ext_data->gentle_mute_gain + \
                        (1 << 15)) >> 16);
842013b6:	91 f0 6b 88 	rMAC = M[r7 + 428];
842013ba:	02 f0 12 f0 	r0 = rMAC + 32768;
842013be:	00 20 
842013c0:	94 52       	r2 = r0 LSHIFT -16;
842013c2:	94 f0 df 8c 	MH[r7 + 446] = r2;
                    aanc_fxlms100_update_gain(p_ext_data->ag->p_fxlms,
                                            p_ext_data->ag->p_fxlms_stats,
                                            p_ext_data->ff_gain.fine);
842013c6:	91 f0 6e 88 	rMAC = M[r7 + 440];
842013ca:	0b a8       	r1 = M[rMAC + 64];
842013cc:	4a a8       	r0 = M[rMAC + 68];
842013ce:	0a f0 25 eb 	call (m) $_aanc_fxlms100_update_gain;
842013d2:	0b 6e       	jump (m) Lc_aanc_process_data_77;

842013d4 <Lc_aanc_process_data_75>:
                    L4_DBG_MSG1("AANC GENTLE_MUTE mode: updating gain to %d",
                                p_ext_data->ff_gain.fine);
                }
                break;
            default:
                L2_DBG_MSG1("AANC SYSMODE invalid: %d", p_ext_data->cur_mode);
842013d4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
842013d8:	88 24       	Null = rMAC - 2;
842013da:	07 68       	if LT jump (m) Lc_aanc_process_data_77;

842013dc <Lc_aanc_process_data_76>:
842013dc:	55 f1 02 f0 	r0 = Null + 357564592;
842013e0:	b0 40 
842013e2:	ef fd fc ff 	call (m) 0xcde;
842013e6:	3d e7 

842013e8 <Lc_aanc_process_data_77>:
                break;
        }

        /* Evaluate event messaging criteria */
        if (!(p_params->OFFSET_AANC_DEBUG &
            AANC_CONFIG_AANC_DEBUG_DISABLE_EVENT_MESSAGING))
842013e8:	61 d8       	rMAC = M[FP + 48];
842013ea:	49 89       	rMAC = M[rMAC + 20];
842013ec:	49 c1       	rMAC = rMAC AND 0x8;
842013ee:	47 63       	if NE jump (m) Lc_aanc_process_data_33;

842013f0 <Lc_aanc_process_data_78>:
        {
            aanc_process_events(op_data, p_ext_data);
842013f0:	4b 08       	r1 = r7 + Null;
842013f2:	42 d8       	r0 = M[FP + 32];
842013f4:	02 f0 2d e0 	call (m) Lc_aanc_process_events_1;
            p_ext_data->prev_flags = p_ext_data->flags;
842013f8:	91 f0 68 88 	rMAC = M[r7 + 416];
842013fc:	91 f0 69 8e 	M[r7 + 420] = rMAC;
84201400:	3e 6f       	jump (m) Lc_aanc_process_data_33;

84201402 <Lc_aanc_process_data_79>:
    * set the FB fine gain to its static value.
    *
    * Clear "hard" reinitializion so that FB gain is not touched in
    * subsequent iterations.
    */
    if (p_ext_data->re_init_hard)
84201402:	90 f0 7b 88 	Null = M[r7 + 492];
84201406:	07 60       	if EQ jump (m) Lc_aanc_process_data_81;

84201408 <Lc_aanc_process_data_80>:
    {
        p_ext_data->fb_gain.fine = p_ext_data->fb_static_gain.fine;
84201408:	91 f0 ed 86 	rMAC = MHU[r7 + 474];
8420140c:	91 f0 e1 8c 	MH[r7 + 450] = rMAC;
        p_ext_data->re_init_hard = FALSE;
84201410:	90 f0 7b 8e 	M[r7 + 492] = Null;

84201414 <Lc_aanc_process_data_81>:
    }

    aanc_update_gain(op_data, p_ext_data);
84201414:	4b 08       	r1 = r7 + Null;
84201416:	42 d8       	r0 = M[FP + 32];
84201418:	2e 4e       	call (m) Lc_aanc_update_gain_1;
8420141a:	52 d8       	r0 = M[FP + 40];
8420141c:	01 f2 d8 c8 	r6 = r0 LSHIFT 2;

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
84201420:	06 00       	r4 = Null + Null;
84201422:	97 f0 20 20 	r5 = r7 + 32;

84201426 <Lc_aanc_process_data_82>:
    {
        metadata_strict_transport(p_ext_data->metadata_ip[i],
                                  p_ext_data->metadata_op[i],
                                  sample_count * OCTETS_PER_SAMPLE);
84201426:	bb 88       	r1 = M[r5 + 8];
84201428:	3a e8       	r0 = M[r5 + Null];
8420142a:	44 08       	r2 = r6 + Null;
8420142c:	ff fd 9c f0 	call (m) 0x14c88;
84201430:	3d e2 
    aanc_update_gain(op_data, p_ext_data);

    /****************
     * Pass Metadata
     ****************/
    for (i = 0; i < AANC_NUM_METADATA_CHANNELS; i++)
84201432:	76 20       	r4 = r4 + 1;
84201434:	3f 21       	r5 = r5 + 4;
84201436:	b0 24       	Null = r4 - 2;
84201438:	f7 69       	if LT jump (m) Lc_aanc_process_data_82;

8420143a <Lc_aanc_process_data_83>:
    }

    /***************************
     * Update touched terminals
     ***************************/
    touched->sinks = (unsigned) p_ext_data->touched_sinks;
8420143a:	91 f0 ce 86 	rMAC = MHU[r7 + 412];
8420143e:	4a d8       	r0 = M[FP + 36];
84201440:	51 8e       	M[r0 + 4] = rMAC;
    touched->sources = (unsigned) p_ext_data->touched_sources;
84201442:	91 f0 cf 86 	rMAC = MHU[r7 + 414];
84201446:	11 ee       	M[r0 + Null] = rMAC;

84201448 <Lc_aanc_process_data_84>:

    L5_DBG_MSG("AANC process channel data completed");

    return;
}
84201448:	f6 4a       	SP = SP - 0x20, popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
8420144a:	d8 4c       	rts;

8420144c <$_ups_params_aanc>:

bool ups_params_aanc(void* instance_data, PS_KEY_TYPE key,
                     PERSISTENCE_RANK rank, uint16 length,
                     unsigned* data, STATUS_KYMERA status,
                     uint16 extra_status_info)
{
8420144c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
8420144e:	2f 00       	r5 = r3 + Null;
 *
 * \return  Pointer to extra operator data AANC_OP_DATA.
 */
static inline AANC_OP_DATA *get_instance_data(OPERATOR_DATA *op_data)
{
    return (AANC_OP_DATA *) base_op_get_instance_data(op_data);
84201450:	ef fd f8 ff 	call (m) 0x4e6;
84201454:	37 e4 
84201456:	16 00       	r4 = r0 + Null;
                     uint16 extra_status_info)
{
    OPERATOR_DATA *op_data = (OPERATOR_DATA*) instance_data;
    AANC_OP_DATA *p_ext_data = get_instance_data(op_data);

    cpsSetParameterFromPsStore(&p_ext_data->params_def, length, data, status);
84201458:	e5 d5       	r3 = MHS[FP + -8];
8420145a:	fc d9       	r2 = M[FP + -4];
8420145c:	62 f0 fc 21 	r0 = r4 + 508;
84201460:	3b 00       	r1 = r5 + Null;
84201462:	ef fd fa ff 	call (m) 0xa0a;
84201466:	29 ed 

    /* Set the reinitialization flag after setting the parameters */
    p_ext_data->re_init_flag = TRUE;
84201468:	41 20       	rMAC = Null + 1;
8420146a:	61 f0 7a 8e 	M[r4 + 488] = rMAC;

    return TRUE;
8420146e:	0a 00       	r0 = rMAC + Null;

84201470 <Lc_ups_params_aanc_2>:
}
84201470:	f2 48       	popm <FP, r4, r5, rLink>;
84201472:	d8 4c       	rts;

84201474 <Lc_aanc_update_gain_1>:
 * to the HW.
 *
 */
#else
static bool aanc_update_gain(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
84201474:	f1 1c       	pushm <FP(=SP), r4, rLink>;
84201476:	1e 00       	r4 = r1 + Null;
    /* Only update EC and FB gains if in hybrid mode */
    if (p_ext_data->anc_fb_path > 0)
84201478:	61 f0 e2 81 	rMAC = MBS[r4 + 482];
8420147c:	08 24       	Null = rMAC - 0;
8420147e:	7f 6c       	if LE jump (m) Lc_aanc_update_gain_22;

84201480 <Lc_aanc_update_gain_2>:
    {
        /* Update EC gain */
        if (p_ext_data->ec_gain.fine != p_ext_data->ec_gain_prev.fine)
84201480:	64 f0 e3 86 	r2 = MHU[r4 + 454];
84201484:	61 f0 e9 86 	rMAC = MHU[r4 + 466];
84201488:	60 04       	Null = r2 - rMAC;
8420148a:	19 60       	if EQ jump (m) Lc_aanc_update_gain_7;

8420148c <Lc_aanc_update_gain_3>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
8420148c:	61 f0 db 86 	rMAC = MHU[r4 + 438];
84201490:	48 24       	Null = rMAC - 1;
84201492:	0c 62       	if NE jump (m) Lc_aanc_update_gain_5;

84201494 <Lc_aanc_update_gain_4>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
84201494:	c3 20       	r1 = Null + 3;
84201496:	42 20       	r0 = Null + 1;
84201498:	0c f0 3f e6 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
8420149c:	64 f0 e3 86 	r2 = MHU[r4 + 454];
842014a0:	c3 20       	r1 = Null + 3;
842014a2:	82 20       	r0 = Null + 2;
842014a4:	0c f0 33 e6 	call (m) $_stream_anc_set_anc_fine_gain;
842014a8:	06 6e       	jump (m) Lc_aanc_update_gain_6;

842014aa <Lc_aanc_update_gain_5>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.fine);
842014aa:	c3 20       	r1 = Null + 3;
842014ac:	62 f0 e0 81 	r0 = MBS[r4 + 480];
842014b0:	0c f0 27 e6 	call (m) $_stream_anc_set_anc_fine_gain;

842014b4 <Lc_aanc_update_gain_6>:
            }
            p_ext_data->ec_gain_prev.fine = p_ext_data->ec_gain.fine;
842014b4:	61 f0 e3 86 	rMAC = MHU[r4 + 454];
842014b8:	61 f0 e9 8c 	MH[r4 + 466] = rMAC;

842014bc <Lc_aanc_update_gain_7>:
        }
        if (p_ext_data->ec_gain.coarse != p_ext_data->ec_gain_prev.coarse)
842014bc:	64 f0 e2 86 	r2 = MHU[r4 + 452];
842014c0:	61 f0 e8 86 	rMAC = MHU[r4 + 464];
842014c4:	60 04       	Null = r2 - rMAC;
842014c6:	19 60       	if EQ jump (m) Lc_aanc_update_gain_12;

842014c8 <Lc_aanc_update_gain_8>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
842014c8:	61 f0 db 86 	rMAC = MHU[r4 + 438];
842014cc:	48 24       	Null = rMAC - 1;
842014ce:	0c 62       	if NE jump (m) Lc_aanc_update_gain_10;

842014d0 <Lc_aanc_update_gain_9>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842014d0:	c3 20       	r1 = Null + 3;
842014d2:	42 20       	r0 = Null + 1;
842014d4:	0c f0 2f e5 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842014d8:	64 f0 e2 86 	r2 = MHU[r4 + 452];
842014dc:	c3 20       	r1 = Null + 3;
842014de:	82 20       	r0 = Null + 2;
842014e0:	0c f0 23 e5 	call (m) $_stream_anc_set_anc_coarse_gain;
842014e4:	06 6e       	jump (m) Lc_aanc_update_gain_11;

842014e6 <Lc_aanc_update_gain_10>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            AANC_ANC_PATH_FB_ID,
                                            p_ext_data->ec_gain.coarse);
842014e6:	c3 20       	r1 = Null + 3;
842014e8:	62 f0 e0 81 	r0 = MBS[r4 + 480];
842014ec:	0c f0 37 e4 	call (m) $_stream_anc_set_anc_coarse_gain;

842014f0 <Lc_aanc_update_gain_11>:
            }
            p_ext_data->ec_gain_prev.coarse = p_ext_data->ec_gain.coarse;
842014f0:	61 f0 e2 86 	rMAC = MHU[r4 + 452];
842014f4:	61 f0 e8 8c 	MH[r4 + 464] = rMAC;

842014f8 <Lc_aanc_update_gain_12>:
        }

        /* Update FB gain */
        if (p_ext_data->fb_gain.fine != p_ext_data->fb_gain_prev.fine)
842014f8:	64 f0 e1 86 	r2 = MHU[r4 + 450];
842014fc:	61 f0 e7 86 	rMAC = MHU[r4 + 462];
84201500:	60 04       	Null = r2 - rMAC;
84201502:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_17;

84201504 <Lc_aanc_update_gain_13>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
84201504:	61 f0 db 86 	rMAC = MHU[r4 + 438];
84201508:	48 24       	Null = rMAC - 1;
8420150a:	0e 62       	if NE jump (m) Lc_aanc_update_gain_15;

8420150c <Lc_aanc_update_gain_14>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
8420150c:	63 f0 e2 81 	r1 = MBS[r4 + 482];
84201510:	42 20       	r0 = Null + 1;
84201512:	0c f0 25 e3 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
84201516:	64 f0 e1 86 	r2 = MHU[r4 + 450];
8420151a:	63 f0 e2 81 	r1 = MBS[r4 + 482];
8420151e:	82 20       	r0 = Null + 2;
84201520:	0c f0 37 e2 	call (m) $_stream_anc_set_anc_fine_gain;
84201524:	07 6e       	jump (m) Lc_aanc_update_gain_16;

84201526 <Lc_aanc_update_gain_15>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.fine);
84201526:	63 f0 e2 81 	r1 = MBS[r4 + 482];
8420152a:	62 f0 e0 81 	r0 = MBS[r4 + 480];
8420152e:	0c f0 29 e2 	call (m) $_stream_anc_set_anc_fine_gain;

84201532 <Lc_aanc_update_gain_16>:
            }
            p_ext_data->fb_gain_prev.fine = p_ext_data->fb_gain.fine;
84201532:	61 f0 e1 86 	rMAC = MHU[r4 + 450];
84201536:	61 f0 e7 8c 	MH[r4 + 462] = rMAC;

8420153a <Lc_aanc_update_gain_17>:
        }
        if (p_ext_data->fb_gain.coarse != p_ext_data->fb_gain_prev.coarse)
8420153a:	64 f0 e0 86 	r2 = MHU[r4 + 448];
8420153e:	61 f0 e6 86 	rMAC = MHU[r4 + 460];
84201542:	60 04       	Null = r2 - rMAC;
84201544:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_22;

84201546 <Lc_aanc_update_gain_18>:
        {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
84201546:	61 f0 db 86 	rMAC = MHU[r4 + 438];
8420154a:	48 24       	Null = rMAC - 1;
8420154c:	0e 62       	if NE jump (m) Lc_aanc_update_gain_20;

8420154e <Lc_aanc_update_gain_19>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
8420154e:	63 f0 e2 81 	r1 = MBS[r4 + 482];
84201552:	42 20       	r0 = Null + 1;
84201554:	0c f0 2f e1 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
84201558:	64 f0 e0 86 	r2 = MHU[r4 + 448];
8420155c:	63 f0 e2 81 	r1 = MBS[r4 + 482];
84201560:	82 20       	r0 = Null + 2;
84201562:	0c f0 21 e1 	call (m) $_stream_anc_set_anc_coarse_gain;
84201566:	07 6e       	jump (m) Lc_aanc_update_gain_21;

84201568 <Lc_aanc_update_gain_20>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_fb_path,
                                            p_ext_data->fb_gain.coarse);
84201568:	63 f0 e2 81 	r1 = MBS[r4 + 482];
8420156c:	62 f0 e0 81 	r0 = MBS[r4 + 480];
84201570:	0c f0 33 e0 	call (m) $_stream_anc_set_anc_coarse_gain;

84201574 <Lc_aanc_update_gain_21>:
            }
            p_ext_data->fb_gain_prev.coarse = p_ext_data->fb_gain.coarse;
84201574:	61 f0 e0 86 	rMAC = MHU[r4 + 448];
84201578:	61 f0 e6 8c 	MH[r4 + 460] = rMAC;

8420157c <Lc_aanc_update_gain_22>:
        }
    }

    /* Update FF gain */
    if (p_ext_data->ff_gain.fine != p_ext_data->ff_gain_prev.fine)
8420157c:	64 f0 df 86 	r2 = MHU[r4 + 446];
84201580:	61 f0 e5 86 	rMAC = MHU[r4 + 458];
84201584:	60 04       	Null = r2 - rMAC;
84201586:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_27;

84201588 <Lc_aanc_update_gain_23>:
    {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
84201588:	61 f0 db 86 	rMAC = MHU[r4 + 438];
8420158c:	48 24       	Null = rMAC - 1;
8420158e:	0e 62       	if NE jump (m) Lc_aanc_update_gain_25;

84201590 <Lc_aanc_update_gain_24>:
            {
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
84201590:	63 f0 e1 81 	r1 = MBS[r4 + 481];
84201594:	42 20       	r0 = Null + 1;
84201596:	0b f0 21 ef 	call (m) $_stream_anc_set_anc_fine_gain;
                stream_anc_set_anc_fine_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
8420159a:	64 f0 df 86 	r2 = MHU[r4 + 446];
8420159e:	63 f0 e1 81 	r1 = MBS[r4 + 481];
842015a2:	82 20       	r0 = Null + 2;
842015a4:	0b f0 33 ee 	call (m) $_stream_anc_set_anc_fine_gain;
842015a8:	07 6e       	jump (m) Lc_aanc_update_gain_26;

842015aa <Lc_aanc_update_gain_25>:
            }
            else
            {
                stream_anc_set_anc_fine_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.fine);
842015aa:	63 f0 e1 81 	r1 = MBS[r4 + 481];
842015ae:	62 f0 e0 81 	r0 = MBS[r4 + 480];
842015b2:	0b f0 25 ee 	call (m) $_stream_anc_set_anc_fine_gain;

842015b6 <Lc_aanc_update_gain_26>:
            }
        p_ext_data->ff_gain_prev.fine = p_ext_data->ff_gain.fine;
842015b6:	61 f0 df 86 	rMAC = MHU[r4 + 446];
842015ba:	61 f0 e5 8c 	MH[r4 + 458] = rMAC;

842015be <Lc_aanc_update_gain_27>:
    }
    if (p_ext_data->ff_gain.coarse != p_ext_data->ff_gain_prev.coarse)
842015be:	64 f0 de 86 	r2 = MHU[r4 + 444];
842015c2:	61 f0 e4 86 	rMAC = MHU[r4 + 456];
842015c6:	60 04       	Null = r2 - rMAC;
842015c8:	1c 60       	if EQ jump (m) Lc_aanc_update_gain_32;

842015ca <Lc_aanc_update_gain_28>:
    {
            if (p_ext_data->filter_config == AANC_FILTER_CONFIG_PARALLEL)
842015ca:	61 f0 db 86 	rMAC = MHU[r4 + 438];
842015ce:	48 24       	Null = rMAC - 1;
842015d0:	0e 62       	if NE jump (m) Lc_aanc_update_gain_30;

842015d2 <Lc_aanc_update_gain_29>:
            {
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC0_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842015d2:	63 f0 e1 81 	r1 = MBS[r4 + 481];
842015d6:	42 20       	r0 = Null + 1;
842015d8:	0b f0 2b ed 	call (m) $_stream_anc_set_anc_coarse_gain;
                stream_anc_set_anc_coarse_gain(AANC_ANC_INSTANCE_ANC1_ID,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842015dc:	64 f0 de 86 	r2 = MHU[r4 + 444];
842015e0:	63 f0 e1 81 	r1 = MBS[r4 + 481];
842015e4:	82 20       	r0 = Null + 2;
842015e6:	0b f0 3d ec 	call (m) $_stream_anc_set_anc_coarse_gain;
842015ea:	07 6e       	jump (m) Lc_aanc_update_gain_31;

842015ec <Lc_aanc_update_gain_30>:
            }
            else
            {
                stream_anc_set_anc_coarse_gain(p_ext_data->anc_channel,
                                            p_ext_data->anc_ff_path,
                                            p_ext_data->ff_gain.coarse);
842015ec:	63 f0 e1 81 	r1 = MBS[r4 + 481];
842015f0:	62 f0 e0 81 	r0 = MBS[r4 + 480];
842015f4:	0b f0 2f ec 	call (m) $_stream_anc_set_anc_coarse_gain;

842015f8 <Lc_aanc_update_gain_31>:
            }
        p_ext_data->ff_gain_prev.coarse = p_ext_data->ff_gain.coarse;
842015f8:	61 f0 de 86 	rMAC = MHU[r4 + 444];
842015fc:	61 f0 e4 8c 	MH[r4 + 456] = rMAC;

84201600 <Lc_aanc_update_gain_32>:
    }

    return TRUE;
84201600:	42 20       	r0 = Null + 1;

84201602 <Lc_aanc_update_gain_33>:
}
84201602:	f1 48       	popm <FP, r4, rLink>;
84201604:	d8 4c       	rts;

84201606 <Lc_update_touched_sink_sources_1>:
 * Because this is solely dependent on the terminal connections it can be
 * calculated in connect/disconnect rather than in every process_data loop.
 */
static bool update_touched_sink_sources(AANC_OP_DATA *p_ext_data)
{
    uint16 touched_sinks = 0;
84201606:	01 00       	rMAC = Null + Null;
    uint16 touched_sources = 0;
84201608:	03 00       	r1 = Null + Null;

    /* Update touched sinks & sources */
    if (p_ext_data->inputs[AANC_PLAYBACK_TERMINAL_ID] != NULL)
8420160a:	14 e8       	r2 = M[r0 + Null];
8420160c:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_3;

8420160e <Lc_update_touched_sink_sources_2>:
    {
        touched_sinks |= (1 << AANC_PLAYBACK_TERMINAL_ID);
8420160e:	41 20       	rMAC = Null + 1;

84201610 <Lc_update_touched_sink_sources_3>:
    }
    if (p_ext_data->outputs[AANC_PLAYBACK_TERMINAL_ID] != NULL)
84201610:	14 89       	r2 = M[r0 + 16];
84201612:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_5;

84201614 <Lc_update_touched_sink_sources_4>:
    {
        touched_sources |= (1 << AANC_PLAYBACK_TERMINAL_ID);
84201614:	43 20       	r1 = Null + 1;

84201616 <Lc_update_touched_sink_sources_5>:
    }

    if (p_ext_data->inputs[AANC_FB_MON_TERMINAL_ID] != NULL &&
        p_ext_data->outputs[AANC_FB_MON_TERMINAL_ID] != NULL)
84201616:	54 88       	r2 = M[r0 + 4];
84201618:	05 60       	if EQ jump (m) Lc_update_touched_sink_sources_8;

8420161a <Lc_update_touched_sink_sources_6>:
8420161a:	54 89       	r2 = M[r0 + 20];
8420161c:	03 60       	if EQ jump (m) Lc_update_touched_sink_sources_8;

8420161e <Lc_update_touched_sink_sources_7>:
    {
        touched_sinks |= (1 << AANC_FB_MON_TERMINAL_ID);
8420161e:	49 c8       	rMAC = rMAC OR 0x2;
        touched_sources |= (1 << AANC_FB_MON_TERMINAL_ID);
84201620:	5b c8       	r1 = r1 OR 0x2;

84201622 <Lc_update_touched_sink_sources_8>:
    }

    if (p_ext_data->outputs[AANC_MIC_INT_TERMINAL_ID] != NULL)
84201622:	94 89       	r2 = M[r0 + 24];
84201624:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_10;

84201626 <Lc_update_touched_sink_sources_9>:
    {
        touched_sources |= (1 << AANC_MIC_INT_TERMINAL_ID);
84201626:	db c8       	r1 = r1 OR 0x4;

84201628 <Lc_update_touched_sink_sources_10>:
    }
    /* Always read internal mic input buffer when processing data */
    touched_sinks |= (1 << AANC_MIC_INT_TERMINAL_ID);
84201628:	c9 c8       	rMAC = rMAC OR 0x4;

    if (p_ext_data->outputs[AANC_MIC_EXT_TERMINAL_ID] != NULL)
8420162a:	d4 89       	r2 = M[r0 + 28];
8420162c:	02 60       	if EQ jump (m) Lc_update_touched_sink_sources_12;

8420162e <Lc_update_touched_sink_sources_11>:
    {
        touched_sources |= (1 << AANC_MIC_EXT_TERMINAL_ID);
8420162e:	5b c9       	r1 = r1 OR 0x8;

84201630 <Lc_update_touched_sink_sources_12>:
    }
    /* Always read external mic input buffer when processing data */
    touched_sinks |= (1 << AANC_MIC_EXT_TERMINAL_ID);
84201630:	49 c9       	rMAC = rMAC OR 0x8;

    p_ext_data->touched_sinks = touched_sinks;
84201632:	21 f0 ce 8c 	MH[r0 + 412] = rMAC;
    p_ext_data->touched_sources = touched_sources;
84201636:	23 f0 cf 8c 	MH[r0 + 414] = r1;

    return TRUE;
8420163a:	42 20       	r0 = Null + 1;

8420163c <Lc_update_touched_sink_sources_13>:
8420163c:	d8 4c       	rts;

8420163e <Lc_override_gain_1>:
 */
static bool override_gain(AANC_OP_DATA *p_ext_data, unsigned ctrl_value,
                          bool coarse_value, uint16 *p_gain_value)
{
    if (!((p_ext_data->cur_mode == AANC_SYSMODE_FREEZE) ||
          (p_ext_data->cur_mode == AANC_SYSMODE_STATIC)))
8420163e:	21 f0 63 88 	rMAC = M[r0 + 396];
84201642:	08 25       	Null = rMAC - 4;
84201644:	05 60       	if EQ jump (m) Lc_override_gain_4;

84201646 <Lc_override_gain_2>:
84201646:	c8 24       	Null = rMAC - 3;
84201648:	03 60       	if EQ jump (m) Lc_override_gain_4;

8420164a <Lc_override_gain_3>:
    {
        return FALSE;
8420164a:	02 00       	r0 = Null + Null;
8420164c:	0e 6e       	jump (m) Lc_override_gain_9;

8420164e <Lc_override_gain_4>:
    }

    /* Mask for bottom 16 bits */
    ctrl_value &= 0xFFFF;
8420164e:	9b c6       	r1 = r1 AND 0xffff;

    if (coarse_value)
84201650:	20 04       	Null = r2 - Null;
84201652:	09 60       	if EQ jump (m) Lc_override_gain_8;

84201654 <Lc_override_gain_5>:
    {
        /* B-308001: Backwards compatibility with uint4 from QACT.
         * QACT will send 15 = -1 .. 8 = -8 but these need to be in full
         * (u)int16.
         */
        if (ctrl_value > 7 && ctrl_value < 16)
84201654:	d8 25       	Null = r1 - 7;
84201656:	09 f0 8f e0 	if LS jump (m) Lc_override_gain_8;

8420165a <Lc_override_gain_6>:
8420165a:	18 2c       	Null = r1 - 16;
8420165c:	02 f0 89 e0 	if C jump (m) Lc_override_gain_8;

84201660 <Lc_override_gain_7>:
        {
            ctrl_value = (65536 - 16) + ctrl_value;
84201660:	73 f0 f0 7f 	r1 = r1 + 65520;

84201664 <Lc_override_gain_8>:
        }
    }

    /* Set the gain */
    *p_gain_value = (uint16) ctrl_value;
84201664:	2b ec       	MH[r3 + Null] = r1;
    L4_DBG_MSG1("AANC gain override: %d", *p_gain_value);

    return TRUE;
84201666:	42 20       	r0 = Null + 1;

84201668 <Lc_override_gain_9>:
84201668:	d8 4c       	rts;

8420166a <Lc_aanc_send_event_trigger_1>:
 *
 * \return  bool indicating success
 */
static bool aanc_send_event_trigger(OPERATOR_DATA *op_data, bool detect,
                                    uint16 id, uint16 payload)
{
8420166a:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
8420166c:	12 09       	r8 = r0 + Null;
8420166e:	21 09       	r7 = r2 + Null;
84201670:	28 09       	r6 = r3 + Null;
    unsigned msg_size = OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER_WORD_SIZE;
    unsigned *trigger_message = NULL;
    OPMSG_REPLY_ID message_id = OPMSG_REPLY_ID_AANC_EVENT_TRIGGER;
84201672:	06 22       	r4 = Null + 8;
    if (!detect)
84201674:	18 04       	Null = r1 - Null;
84201676:	02 62       	if NE jump (m) Lc_aanc_send_event_trigger_3;

84201678 <Lc_aanc_send_event_trigger_2>:
    {
        message_id = OPMSG_REPLY_ID_AANC_EVENT_NEGATIVE_TRIGGER;
84201678:	46 22       	r4 = Null + 9;

8420167a <Lc_aanc_send_event_trigger_3>:
    }

    trigger_message = xpnewn(msg_size, unsigned);
8420167a:	c3 20       	r1 = Null + 3;
8420167c:	02 22       	r0 = Null + 8;
8420167e:	ff fd 28 f0 	call (m) 0x67ac;
84201682:	2f e9 
84201684:	17 00       	r5 = r0 + Null;
    if (trigger_message == NULL)
84201686:	0d 62       	if NE jump (m) Lc_aanc_send_event_trigger_7;

84201688 <Lc_aanc_send_event_trigger_4>:
    {
        L2_DBG_MSG("Failed to send AANC event message");
84201688:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
8420168c:	88 24       	Null = rMAC - 2;
8420168e:	07 68       	if LT jump (m) Lc_aanc_send_event_trigger_6;

84201690 <Lc_aanc_send_event_trigger_5>:
84201690:	55 f1 02 f0 	r0 = Null + 357564416;
84201694:	00 40 
84201696:	ef fd fb ff 	call (m) 0xccc;
8420169a:	37 e1 

8420169c <Lc_aanc_send_event_trigger_6>:
        return FALSE;
8420169c:	02 00       	r0 = Null + Null;
8420169e:	11 6e       	jump (m) Lc_aanc_send_event_trigger_8;

842016a0 <Lc_aanc_send_event_trigger_7>:
    }

    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             ID,
                             id);
842016a0:	79 f0 00 ee 	M[r5 + Null] = r7;
    OPMSG_CREATION_FIELD_SET(trigger_message,
                             OPMSG_UNSOLICITED_AANC_EVENT_TRIGGER,
                             PAYLOAD,
                             payload);
842016a4:	78 f0 01 8e 	M[r5 + 4] = r6;

    L4_DBG_MSG2("AANC Event Sent: [%d, %d]", trigger_message[0],
                trigger_message[1]);
    common_send_unsolicited_message(op_data, (unsigned)message_id, msg_size,
                                    trigger_message);
842016a8:	84 20       	r2 = Null + 2;
842016aa:	3d 00       	r3 = r5 + Null;
842016ac:	33 00       	r1 = r4 + Null;
842016ae:	52 08       	r0 = r8 + Null;
842016b0:	ef fd f7 ff 	call (m) 0x592;
842016b4:	23 e7 

    pdelete(trigger_message);
842016b6:	3a 00       	r0 = r5 + Null;
842016b8:	ff fd 29 f0 	call (m) 0x68d8;
842016bc:	21 e1 

    return TRUE;
842016be:	42 20       	r0 = Null + 1;

842016c0 <Lc_aanc_send_event_trigger_8>:
}
842016c0:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
842016c2:	d8 4c       	rts;

842016c4 <Lc_aanc_process_event_clear_condition_1>:
 * \return  void.
 */
static void aanc_process_event_clear_condition(OPERATOR_DATA *op_data,
                                               AANC_EVENT *p_event,
                                               uint16 id, uint16 payload)
{
842016c4:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842016c6:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
842016c8:	31 90       	rMAC = MBS[r4 + 8];
842016ca:	04 f0 97 e0 	if NEG jump (m) Lc_aanc_process_event_clear_condition_6;

842016ce <Lc_aanc_process_event_clear_condition_2>:
842016ce:	48 24       	Null = rMAC - 1;
842016d0:	05 6c       	if LE jump (m) Lc_aanc_process_event_clear_condition_5;

842016d2 <Lc_aanc_process_event_clear_condition_3>:
842016d2:	88 24       	Null = rMAC - 2;
842016d4:	06 62       	if NE jump (m) Lc_aanc_process_event_clear_condition_6;

842016d6 <Lc_aanc_process_event_clear_condition_4>:
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
            case AANC_EVENT_SENT:
                aanc_send_event_trigger(op_data, FALSE, id, payload);
842016d6:	03 00       	r1 = Null + Null;
842016d8:	c9 4f       	call (m) Lc_aanc_send_event_trigger_1;

842016da <Lc_aanc_process_event_clear_condition_5>:
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842016da:	71 88       	rMAC = M[r4 + 4];
842016dc:	31 ee       	M[r4 + Null] = rMAC;
       p_event->running = AANC_EVENT_CLEAR;
842016de:	30 9a       	MB[r4 + 8] = Null;

842016e0 <Lc_aanc_process_event_clear_condition_6>:
                   is correct.
                */
            case AANC_EVENT_DETECTED:
                /* Have detected but not sent message so clear */
                aanc_clear_event(p_event);
                break;
842016e0:	f1 48       	popm <FP, r4, rLink>;
842016e2:	d8 4c       	rts;

842016e4 <Lc_aanc_initialize_events_1>:
 * \param  p_ext_data  Address of the AANC extra_op_data.
 *
 * \return  void.
 */
static void aanc_initialize_events(OPERATOR_DATA *op_data, AANC_OP_DATA *p_ext_data)
{
842016e4:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
842016e6:	17 00       	r5 = r0 + Null;
842016e8:	1e 00       	r4 = r1 + Null;
    unsigned set_frames = 0;
    AANC_PARAMETERS *p_params = &p_ext_data->aanc_cap_params;
842016ea:	68 f0 3c 20 	r6 = r4 + 60;

    set_frames = (p_params->OFFSET_EVENT_GAIN_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
842016ee:	81 f0 47 88 	rMAC = M[r6 + 284];
842016f2:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842016f6:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Gain Event Initialized at %d frames", set_frames);
    p_ext_data->gain_event.set_frames = set_frames;
842016f8:	62 f0 85 8e 	M[r4 + 532] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                       AANC_EVENT_ID_GAIN, 0);
842016fc:	63 f0 10 22 	r1 = r4 + 528;
84201700:	05 00       	r3 = Null + Null;
84201702:	04 00       	r2 = Null + Null;
84201704:	3a 00       	r0 = r5 + Null;
84201706:	df 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_ED_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201708:	81 f0 48 88 	rMAC = M[r6 + 288];
8420170c:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201710:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC ED Event Initialized at %d frames", set_frames);
    p_ext_data->ed_event.set_frames = set_frames;
84201712:	62 f0 88 8e 	M[r4 + 544] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                       AANC_EVENT_ID_ED, 0);
84201716:	44 20       	r2 = Null + 1;
84201718:	63 f0 1c 22 	r1 = r4 + 540;
8420171c:	05 00       	r3 = Null + Null;
8420171e:	3a 00       	r0 = r5 + Null;
84201720:	d2 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_DETECT * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201722:	81 f0 49 88 	rMAC = M[r6 + 292];
84201726:	7d f1 92 c9 	r0 = rMAC * 250 (int);
8420172a:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Detect Initialized at %d frames", set_frames);
    p_ext_data->quiet_event_detect.set_frames = set_frames;
8420172c:	62 f0 8b 8e 	M[r4 + 556] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_detect,
                                       AANC_EVENT_ID_QUIET, 0);
84201730:	84 20       	r2 = Null + 2;
84201732:	63 f0 28 22 	r1 = r4 + 552;
84201736:	05 00       	r3 = Null + Null;
84201738:	3a 00       	r0 = r5 + Null;
8420173a:	c5 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_QUIET_CLEAR * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
8420173c:	81 f0 4a 88 	rMAC = M[r6 + 296];
84201740:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201744:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Quiet Mode Cleared Initialized at %d frames", set_frames);
    p_ext_data->quiet_event_clear.set_frames = set_frames;
84201746:	62 f0 8e 8e 	M[r4 + 568] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->quiet_event_clear,
                                       AANC_EVENT_ID_QUIET, 0);
8420174a:	84 20       	r2 = Null + 2;
8420174c:	63 f0 34 22 	r1 = r4 + 564;
84201750:	05 00       	r3 = Null + Null;
84201752:	3a 00       	r0 = r5 + Null;
84201754:	b8 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_CLIP_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201756:	81 f0 4b 88 	rMAC = M[r6 + 300];
8420175a:	7d f1 92 c9 	r0 = rMAC * 250 (int);
8420175e:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Clip Event Initialized at %d frames", set_frames);
    p_ext_data->clip_event.set_frames = set_frames;
84201760:	62 f0 91 8e 	M[r4 + 580] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                       AANC_EVENT_ID_CLIP, 0);
84201764:	c4 20       	r2 = Null + 3;
84201766:	63 f0 40 22 	r1 = r4 + 576;
8420176a:	05 00       	r3 = Null + Null;
8420176c:	3a 00       	r0 = r5 + Null;
8420176e:	ab 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SAT_STUCK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
84201770:	81 f0 4c 88 	rMAC = M[r6 + 304];
84201774:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201778:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Saturation Event Initialized at %d frames", set_frames);
    p_ext_data->sat_event.set_frames = set_frames;
8420177a:	62 f0 94 8e 	M[r4 + 592] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                       AANC_EVENT_ID_SAT, 0);
8420177e:	04 21       	r2 = Null + 4;
84201780:	63 f0 4c 22 	r1 = r4 + 588;
84201784:	05 00       	r3 = Null + Null;
84201786:	3a 00       	r0 = r5 + Null;
84201788:	9e 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

    set_frames = (p_params->OFFSET_EVENT_SELF_TALK * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
8420178a:	81 f0 4d 88 	rMAC = M[r6 + 308];
8420178e:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201792:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC Self-Talk Event Initialized at %d frames", set_frames);
    p_ext_data->self_talk_event.set_frames = set_frames;
84201794:	62 f0 97 8e 	M[r4 + 604] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->self_talk_event,
                                       AANC_EVENT_ID_SELF_TALK, 0);
84201798:	44 21       	r2 = Null + 5;
8420179a:	63 f0 58 22 	r1 = r4 + 600;
8420179e:	05 00       	r3 = Null + Null;
842017a0:	3a 00       	r0 = r5 + Null;
842017a2:	91 4f       	call (m) Lc_aanc_process_event_clear_condition_1;
    set_frames = (p_params->OFFSET_EVENT_SPL * AANC_FRAME_RATE)
                                                         >> TIMER_PARAM_SHIFT;
842017a4:	81 f0 52 88 	rMAC = M[r6 + 328];
842017a8:	7d f1 92 c9 	r0 = rMAC * 250 (int);
842017ac:	d2 52       	r0 = r0 LSHIFT -20;
    L4_DBG_MSG1("AANC SPL Event Initialized at %d frames", set_frames);
    p_ext_data->spl_event.set_frames = set_frames;
842017ae:	62 f0 9a 8e 	M[r4 + 616] = r0;
    aanc_process_event_clear_condition(op_data, &p_ext_data->spl_event,
                                       AANC_EVENT_ID_SPL, 0);
842017b2:	84 21       	r2 = Null + 6;
842017b4:	63 f0 64 22 	r1 = r4 + 612;
842017b8:	05 00       	r3 = Null + Null;
842017ba:	3a 00       	r0 = r5 + Null;
842017bc:	84 4f       	call (m) Lc_aanc_process_event_clear_condition_1;
    set_frames = 1;
    L4_DBG_MSG1("AANC Gentle Mute Event Initialized at %d frames", set_frames);
    p_ext_data->gentle_mute_event.set_frames = set_frames;
842017be:	41 20       	rMAC = Null + 1;
842017c0:	61 f0 9d 8e 	M[r4 + 628] = rMAC;
    aanc_clear_event(&p_ext_data->gentle_mute_event);
842017c4:	61 f0 70 22 	rMAC = r4 + 624;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842017c8:	4a 88       	r0 = M[rMAC + 4];
842017ca:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842017cc:	08 9a       	MB[rMAC + 8] = Null;

842017ce <Lc_aanc_initialize_events_2>:
                                       AANC_EVENT_ID_SPL, 0);
    set_frames = 1;
    L4_DBG_MSG1("AANC Gentle Mute Event Initialized at %d frames", set_frames);
    p_ext_data->gentle_mute_event.set_frames = set_frames;
    aanc_clear_event(&p_ext_data->gentle_mute_event);
}
842017ce:	f3 48       	popm <FP, r4, r5, r6, rLink>;
842017d0:	d8 4c       	rts;

842017d2 <Lc_aanc_process_event_detect_condition_1>:
 * \return  void.
 */
static void aanc_process_event_detect_condition(OPERATOR_DATA *op_data,
                                                AANC_EVENT *p_event,
                                                uint16 id, uint16 payload)
{
842017d2:	f1 1c       	pushm <FP(=SP), r4, rLink>;
842017d4:	1e 00       	r4 = r1 + Null;
    switch (p_event->running)
842017d6:	31 90       	rMAC = MBS[r4 + 8];
842017d8:	08 60       	if EQ jump (m) Lc_aanc_process_event_detect_condition_5;

842017da <Lc_aanc_process_event_detect_condition_2>:
842017da:	48 24       	Null = rMAC - 1;
842017dc:	10 62       	if NE jump (m) Lc_aanc_process_event_detect_condition_7;

842017de <Lc_aanc_process_event_detect_condition_3>:
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
            p_event->running = AANC_EVENT_DETECTED;
            break;
        case AANC_EVENT_DETECTED:
            if (p_event->frame_counter > 0)
842017de:	31 e8       	rMAC = M[r4 + Null];
842017e0:	0a 60       	if EQ jump (m) Lc_aanc_process_event_detect_condition_6;

842017e2 <Lc_aanc_process_event_detect_condition_4>:
            {
                p_event->frame_counter -= 1;
842017e2:	49 24       	rMAC = rMAC - 1;
842017e4:	31 ee       	M[r4 + Null] = rMAC;
842017e6:	0b 6e       	jump (m) Lc_aanc_process_event_detect_condition_7;

842017e8 <Lc_aanc_process_event_detect_condition_5>:
                                                uint16 id, uint16 payload)
{
    switch (p_event->running)
    {
        case AANC_EVENT_CLEAR:
            p_event->frame_counter -= 1;
842017e8:	ff f6 11 d1 	rMAC = M[r4] + -1;
842017ec:	31 ee       	M[r4 + Null] = rMAC;
            p_event->running = AANC_EVENT_DETECTED;
842017ee:	41 20       	rMAC = Null + 1;
842017f0:	31 9a       	MB[r4 + 8] = rMAC;
            break;
842017f2:	05 6e       	jump (m) Lc_aanc_process_event_detect_condition_7;

842017f4 <Lc_aanc_process_event_detect_condition_6>:
            {
                p_event->frame_counter -= 1;
            }
            else
            {
                aanc_send_event_trigger(op_data, TRUE, id, payload);
842017f4:	43 20       	r1 = Null + 1;
842017f6:	3a 4f       	call (m) Lc_aanc_send_event_trigger_1;
                p_event->running = AANC_EVENT_SENT;
842017f8:	81 20       	rMAC = Null + 2;
842017fa:	31 9a       	MB[r4 + 8] = rMAC;

842017fc <Lc_aanc_process_event_detect_condition_7>:
            }
            break;
        case AANC_EVENT_SENT:
            break;
    }
}
842017fc:	f1 48       	popm <FP, r4, rLink>;
842017fe:	d8 4c       	rts;

84201800 <Lc_aanc_process_events_1>:
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_process_events(OPERATOR_DATA *op_data,
                                AANC_OP_DATA *p_ext_data)
{
84201800:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
84201802:	10 09       	r6 = r0 + Null;
84201804:	1e 00       	r4 = r1 + Null;
    /* Adaptive gain event: reset if ED detected */
    if (p_ext_data->flags & AANC_ED_FLAG_MASK)
84201806:	61 f0 68 88 	rMAC = M[r4 + 416];
8420180a:	11 f0 70 00 	rMAC = rMAC AND 0x70;
8420180e:	0f 60       	if EQ jump (m) Lc_aanc_process_events_5;

84201810 <Lc_aanc_process_events_2>:
    {
        /* If we had previously sent a message then send the negative trigger */
        if (p_ext_data->gain_event.running == AANC_EVENT_SENT)
84201810:	61 f0 18 90 	rMAC = MBS[r4 + 536];
84201814:	88 24       	Null = rMAC - 2;
84201816:	05 62       	if NE jump (m) Lc_aanc_process_events_4;

84201818 <Lc_aanc_process_events_3>:
        {
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
84201818:	05 00       	r3 = Null + Null;
8420181a:	04 00       	r2 = Null + Null;
8420181c:	03 00       	r1 = Null + Null;
8420181e:	26 4f       	call (m) Lc_aanc_send_event_trigger_1;

84201820 <Lc_aanc_process_events_4>:
        }
        aanc_clear_event(&p_ext_data->gain_event);
84201820:	61 f0 10 22 	rMAC = r4 + 528;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201824:	4a 88       	r0 = M[rMAC + 4];
84201826:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201828:	08 9a       	MB[rMAC + 8] = Null;
8420182a:	10 6e       	jump (m) Lc_aanc_process_events_8;

8420182c <Lc_aanc_process_events_5>:
            aanc_send_event_trigger(op_data, FALSE, AANC_EVENT_ID_GAIN, 0);
        }
        aanc_clear_event(&p_ext_data->gain_event);
    }
    /* Condition holds */
    else if (p_ext_data->ff_gain.fine == p_ext_data->ff_gain_prev.fine)
8420182c:	65 f0 df 86 	r3 = MHU[r4 + 446];
84201830:	61 f0 e5 86 	rMAC = MHU[r4 + 458];
84201834:	68 04       	Null = r3 - rMAC;
84201836:	06 62       	if NE jump (m) Lc_aanc_process_events_7;

84201838 <Lc_aanc_process_events_6>:
    {
        aanc_process_event_detect_condition(op_data, &p_ext_data->gain_event,
                                            AANC_EVENT_ID_GAIN,
                                            p_ext_data->ff_gain.fine);
84201838:	63 f0 10 22 	r1 = r4 + 528;
8420183c:	04 00       	r2 = Null + Null;
8420183e:	ca 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201840:	05 6e       	jump (m) Lc_aanc_process_events_8;

84201842 <Lc_aanc_process_events_7>:
    /* Condition cleared */
    else
    {
        aanc_process_event_clear_condition(op_data, &p_ext_data->gain_event,
                                           AANC_EVENT_ID_GAIN,
                                           p_ext_data->ff_gain.fine);
84201842:	63 f0 10 22 	r1 = r4 + 528;
84201846:	04 00       	r2 = Null + Null;
84201848:	3e 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

8420184a <Lc_aanc_process_events_8>:
    }

    /* ED event */
    bool cur_ed = p_ext_data->flags & AANC_ED_FLAG_MASK;
8420184a:	61 f0 68 88 	rMAC = M[r4 + 416];
8420184e:	15 f0 70 00 	r3 = rMAC AND 0x70;
    bool prev_ed = p_ext_data->prev_flags & AANC_ED_FLAG_MASK;
84201852:	61 f0 69 88 	rMAC = M[r4 + 420];
84201856:	11 f0 70 00 	rMAC = rMAC AND 0x70;
    if (cur_ed)
8420185a:	28 04       	Null = r3 - Null;
8420185c:	09 60       	if EQ jump (m) Lc_aanc_process_events_11;

8420185e <Lc_aanc_process_events_9>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_ed == prev_ed)
8420185e:	68 04       	Null = r3 - rMAC;
84201860:	0f 62       	if NE jump (m) Lc_aanc_process_events_13;

84201862 <Lc_aanc_process_events_10>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->ed_event,
                                                AANC_EVENT_ID_ED,
                                                (uint16)cur_ed);
84201862:	44 20       	r2 = Null + 1;
84201864:	63 f0 1c 22 	r1 = r4 + 540;
84201868:	42 08       	r0 = r6 + Null;
8420186a:	b4 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
8420186c:	09 6e       	jump (m) Lc_aanc_process_events_13;

8420186e <Lc_aanc_process_events_11>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_ed != prev_ed)
8420186e:	08 04       	Null = rMAC - Null;
84201870:	07 60       	if EQ jump (m) Lc_aanc_process_events_13;

84201872 <Lc_aanc_process_events_12>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->ed_event,
                                               AANC_EVENT_ID_ED,
                                               (uint16)cur_ed);
84201872:	44 20       	r2 = Null + 1;
84201874:	63 f0 1c 22 	r1 = r4 + 540;
84201878:	05 00       	r3 = Null + Null;
8420187a:	42 08       	r0 = r6 + Null;
8420187c:	24 4f       	call (m) Lc_aanc_process_event_clear_condition_1;

8420187e <Lc_aanc_process_events_13>:
        }
    }

    /* Quiet mode has positive and negative triggers */
    bool cur_qm = p_ext_data->flags & AANC_FLAGS_QUIET_MODE;
8420187e:	61 f0 68 88 	rMAC = M[r4 + 416];
    bool prev_qm = p_ext_data->prev_flags & AANC_FLAGS_QUIET_MODE;
84201882:	62 f0 69 88 	r0 = M[r4 + 420];
84201886:	08 f0 22 f0 	r0 = r0 AND 0x100000;
8420188a:	00 00 

    if (cur_qm)
8420188c:	08 f0 11 f0 	rMAC = rMAC AND 0x100000;
84201890:	00 00 
84201892:	25 60       	if EQ jump (m) Lc_aanc_process_events_19;

84201894 <Lc_aanc_process_events_14>:
    {
        if (prev_qm) /* Steady state for quiet mode detect event */
84201894:	10 04       	Null = r0 - Null;
84201896:	15 60       	if EQ jump (m) Lc_aanc_process_events_18;

84201898 <Lc_aanc_process_events_15>:
        {
            if (p_ext_data->quiet_event_detect.running == AANC_EVENT_DETECTED)
84201898:	61 f0 30 90 	rMAC = MBS[r4 + 560];
8420189c:	48 24       	Null = rMAC - 1;
8420189e:	42 62       	if NE jump (m) Lc_aanc_process_events_24;

842018a0 <Lc_aanc_process_events_16>:
            {
                p_ext_data->quiet_event_detect.frame_counter -= 1;
842018a0:	61 f0 8a 88 	rMAC = M[r4 + 552];
842018a4:	49 24       	rMAC = rMAC - 1;
                if (p_ext_data->quiet_event_detect.frame_counter <= 0)
842018a6:	61 f0 8a 8e 	M[r4 + 552] = rMAC;
842018aa:	3c 62       	if NE jump (m) Lc_aanc_process_events_24;

842018ac <Lc_aanc_process_events_17>:
                {
                    aanc_send_event_trigger(op_data, TRUE,
                                            AANC_EVENT_ID_QUIET, 0);
842018ac:	84 20       	r2 = Null + 2;
842018ae:	43 20       	r1 = Null + 1;
842018b0:	05 00       	r3 = Null + Null;
842018b2:	42 08       	r0 = r6 + Null;
842018b4:	fe ff 37 ed 	call (m) Lc_aanc_send_event_trigger_1;
                    p_ext_data->quiet_event_detect.running = AANC_EVENT_SENT;
842018b8:	81 20       	rMAC = Null + 2;
842018ba:	61 f0 30 9a 	MB[r4 + 560] = rMAC;
842018be:	32 6e       	jump (m) Lc_aanc_process_events_24;

842018c0 <Lc_aanc_process_events_18>:
                }
            }
        }
        else /* Rising edge for quiet mode detect event */
        {
            p_ext_data->quiet_event_detect.frame_counter -= 1;
842018c0:	61 f0 8a 88 	rMAC = M[r4 + 552];
842018c4:	49 24       	rMAC = rMAC - 1;
842018c6:	61 f0 8a 8e 	M[r4 + 552] = rMAC;
            p_ext_data->quiet_event_detect.running = AANC_EVENT_DETECTED;
842018ca:	41 20       	rMAC = Null + 1;
842018cc:	61 f0 30 9a 	MB[r4 + 560] = rMAC;
            aanc_clear_event(&p_ext_data->quiet_event_clear);
842018d0:	61 f0 34 22 	rMAC = r4 + 564;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842018d4:	4a 88       	r0 = M[rMAC + 4];
842018d6:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842018d8:	08 9a       	MB[rMAC + 8] = Null;
842018da:	24 6e       	jump (m) Lc_aanc_process_events_24;

842018dc <Lc_aanc_process_events_19>:
            aanc_clear_event(&p_ext_data->quiet_event_clear);
        }
    }
    else
    {
        if (prev_qm) /* Falling edge for quiet mode clear event */
842018dc:	10 04       	Null = r0 - Null;
842018de:	0f 60       	if EQ jump (m) Lc_aanc_process_events_21;

842018e0 <Lc_aanc_process_events_20>:
        {
            p_ext_data->quiet_event_clear.frame_counter -= 1;
842018e0:	61 f0 8d 88 	rMAC = M[r4 + 564];
842018e4:	49 24       	rMAC = rMAC - 1;
842018e6:	61 f0 8d 8e 	M[r4 + 564] = rMAC;
            p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
842018ea:	41 20       	rMAC = Null + 1;
842018ec:	61 f0 3c 9a 	MB[r4 + 572] = rMAC;
            aanc_clear_event(&p_ext_data->quiet_event_detect);
842018f0:	61 f0 28 22 	rMAC = r4 + 552;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
842018f4:	4a 88       	r0 = M[rMAC + 4];
842018f6:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
842018f8:	08 9a       	MB[rMAC + 8] = Null;
842018fa:	14 6e       	jump (m) Lc_aanc_process_events_24;

842018fc <Lc_aanc_process_events_21>:
            p_ext_data->quiet_event_clear.running = AANC_EVENT_DETECTED;
            aanc_clear_event(&p_ext_data->quiet_event_detect);
        }
        else /* Steady state for quite mode clear event */
        {
            if (p_ext_data->quiet_event_clear.running == AANC_EVENT_DETECTED)
842018fc:	61 f0 3c 90 	rMAC = MBS[r4 + 572];
84201900:	48 24       	Null = rMAC - 1;
84201902:	10 62       	if NE jump (m) Lc_aanc_process_events_24;

84201904 <Lc_aanc_process_events_22>:
            {
                p_ext_data->quiet_event_clear.frame_counter -= 1;
84201904:	61 f0 8d 88 	rMAC = M[r4 + 564];
84201908:	49 24       	rMAC = rMAC - 1;
                if (p_ext_data->quiet_event_clear.frame_counter <= 0)
8420190a:	61 f0 8d 8e 	M[r4 + 564] = rMAC;
8420190e:	0a 62       	if NE jump (m) Lc_aanc_process_events_24;

84201910 <Lc_aanc_process_events_23>:
                {
                    aanc_send_event_trigger(op_data, FALSE,
                                            AANC_EVENT_ID_QUIET, 0);
84201910:	84 20       	r2 = Null + 2;
84201912:	05 00       	r3 = Null + Null;
84201914:	03 00       	r1 = Null + Null;
84201916:	42 08       	r0 = r6 + Null;
84201918:	fe ff 33 ea 	call (m) Lc_aanc_send_event_trigger_1;
                    p_ext_data->quiet_event_clear.running = AANC_EVENT_SENT;
8420191c:	81 20       	rMAC = Null + 2;
8420191e:	61 f0 3c 9a 	MB[r4 + 572] = rMAC;

84201922 <Lc_aanc_process_events_24>:
            }
        }
    }

    /* Clipping event */
    bool cur_clip = p_ext_data->flags & AANC_CLIPPING_FLAG_MASK;
84201922:	61 f0 68 88 	rMAC = M[r4 + 416];
84201926:	15 f0 00 07 	r3 = rMAC AND 0x700;
    bool prev_clip = p_ext_data->prev_flags & AANC_CLIPPING_FLAG_MASK;
8420192a:	61 f0 69 88 	rMAC = M[r4 + 420];
8420192e:	11 f0 00 07 	rMAC = rMAC AND 0x700;
    if (cur_clip)
84201932:	28 04       	Null = r3 - Null;
84201934:	09 60       	if EQ jump (m) Lc_aanc_process_events_27;

84201936 <Lc_aanc_process_events_25>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_clip == prev_clip)
84201936:	68 04       	Null = r3 - rMAC;
84201938:	10 62       	if NE jump (m) Lc_aanc_process_events_29;

8420193a <Lc_aanc_process_events_26>:
        {
            aanc_process_event_detect_condition(op_data,
                                                &p_ext_data->clip_event,
                                                AANC_EVENT_ID_CLIP,
                                                (uint16)cur_clip);
8420193a:	c4 20       	r2 = Null + 3;
8420193c:	63 f0 40 22 	r1 = r4 + 576;
84201940:	42 08       	r0 = r6 + Null;
84201942:	48 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
84201944:	0a 6e       	jump (m) Lc_aanc_process_events_29;

84201946 <Lc_aanc_process_events_27>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_clip != prev_clip)
84201946:	08 04       	Null = rMAC - Null;
84201948:	08 60       	if EQ jump (m) Lc_aanc_process_events_29;

8420194a <Lc_aanc_process_events_28>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->clip_event,
                                               AANC_EVENT_ID_CLIP,
                                               (uint16)cur_clip);
8420194a:	c4 20       	r2 = Null + 3;
8420194c:	63 f0 40 22 	r1 = r4 + 576;
84201950:	05 00       	r3 = Null + Null;
84201952:	42 08       	r0 = r6 + Null;
84201954:	fe ff 31 eb 	call (m) Lc_aanc_process_event_clear_condition_1;

84201958 <Lc_aanc_process_events_29>:
        }
    }

    /* Saturation event */
    bool cur_sat = p_ext_data->flags & AANC_SATURATION_FLAG_MASK;
84201958:	61 f0 68 88 	rMAC = M[r4 + 416];
8420195c:	15 f7 00 10 	r3 = rMAC AND 0xf000;
    bool prev_sat = p_ext_data->prev_flags & AANC_SATURATION_FLAG_MASK;
84201960:	61 f0 69 88 	rMAC = M[r4 + 420];
84201964:	11 f7 00 10 	rMAC = rMAC AND 0xf000;
    if (cur_sat)
84201968:	28 04       	Null = r3 - Null;
8420196a:	09 60       	if EQ jump (m) Lc_aanc_process_events_32;

8420196c <Lc_aanc_process_events_30>:
    {
        /* Non-zero flags and no change starts/continues event */
        if (cur_sat == prev_sat)
8420196c:	68 04       	Null = r3 - rMAC;
8420196e:	10 62       	if NE jump (m) Lc_aanc_process_events_34;

84201970 <Lc_aanc_process_events_31>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->sat_event,
                                                AANC_EVENT_ID_SAT,
                                                (uint16)cur_sat);
84201970:	04 21       	r2 = Null + 4;
84201972:	63 f0 4c 22 	r1 = r4 + 588;
84201976:	42 08       	r0 = r6 + Null;
84201978:	2d 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
8420197a:	0a 6e       	jump (m) Lc_aanc_process_events_34;

8420197c <Lc_aanc_process_events_32>:
        }
    }
    else
    {
        /* Flags reset causes event to be reset */
        if (cur_sat != prev_sat)
8420197c:	08 04       	Null = rMAC - Null;
8420197e:	08 60       	if EQ jump (m) Lc_aanc_process_events_34;

84201980 <Lc_aanc_process_events_33>:
        {
            aanc_process_event_clear_condition(op_data, &p_ext_data->sat_event,
                                               AANC_EVENT_ID_SAT,
                                               (uint16)cur_sat);
84201980:	04 21       	r2 = Null + 4;
84201982:	63 f0 4c 22 	r1 = r4 + 588;
84201986:	05 00       	r3 = Null + Null;
84201988:	42 08       	r0 = r6 + Null;
8420198a:	fe ff 3b e9 	call (m) Lc_aanc_process_event_clear_condition_1;

8420198e <Lc_aanc_process_events_34>:
        }
    }

    /* Self-talk event */
    int cur_ext = p_ext_data->ag->p_ed_ext_stats->spl;
8420198e:	61 f0 6e 88 	rMAC = M[r4 + 440];
84201992:	4a 98       	r0 = M[rMAC + 36];
84201994:	17 e8       	r5 = M[r0 + Null];
    int cur_int = p_ext_data->ag->p_ed_int_stats->spl;
84201996:	09 89       	rMAC = M[rMAC + 16];
84201998:	09 e8       	rMAC = M[rMAC + Null];
    int delta_ext = cur_int - cur_ext;
8420199a:	ca 05       	r0 = rMAC - r5;
    if (delta_ext > 0)
8420199c:	10 24       	Null = r0 - 0;
8420199e:	08 6c       	if LE jump (m) Lc_aanc_process_events_36;

842019a0 <Lc_aanc_process_events_35>:
    {
        aanc_process_event_detect_condition(op_data,
                                            &p_ext_data->self_talk_event,
                                            AANC_EVENT_ID_SELF_TALK,
                                            (uint16)(delta_ext >> 16));
842019a0:	95 5a       	r3 = r0 ASHIFT -16;
842019a2:	44 21       	r2 = Null + 5;
842019a4:	63 f0 58 22 	r1 = r4 + 600;
842019a8:	42 08       	r0 = r6 + Null;
842019aa:	14 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
842019ac:	09 6e       	jump (m) Lc_aanc_process_events_37;

842019ae <Lc_aanc_process_events_36>:
    else
    {
        aanc_process_event_clear_condition(op_data,
                                           &p_ext_data->self_talk_event,
                                           AANC_EVENT_ID_SELF_TALK,
                                           (uint16)(delta_ext >> 16));
842019ae:	92 5a       	r0 = r0 ASHIFT -16;
842019b0:	44 21       	r2 = Null + 5;
842019b2:	63 f0 58 22 	r1 = r4 + 600;
842019b6:	95 c6       	r3 = r0 AND 0xffff;
842019b8:	42 08       	r0 = r6 + Null;
842019ba:	fe ff 2b e8 	call (m) Lc_aanc_process_event_clear_condition_1;

842019be <Lc_aanc_process_events_37>:
    }
    /* SPL event */
    int spl_threshold = p_ext_data->aanc_cap_params.OFFSET_EVENT_SPL_THRESHOLD;
842019be:	61 f0 62 88 	rMAC = M[r4 + 392];
    if (cur_ext > spl_threshold)
842019c2:	78 04       	Null = r5 - rMAC;
842019c4:	09 6c       	if LE jump (m) Lc_aanc_process_events_39;

842019c6 <Lc_aanc_process_events_38>:
    {
        aanc_process_event_detect_condition(op_data,
                                            &p_ext_data->spl_event,
                                            AANC_EVENT_ID_SPL,
                                            (uint16)(cur_ext >> 16));
842019c6:	ba 5a       	r0 = r5 ASHIFT -16;
842019c8:	84 21       	r2 = Null + 6;
842019ca:	63 f0 64 22 	r1 = r4 + 612;
842019ce:	95 c6       	r3 = r0 AND 0xffff;
842019d0:	42 08       	r0 = r6 + Null;
842019d2:	00 4f       	call (m) Lc_aanc_process_event_detect_condition_1;
842019d4:	09 6e       	jump (m) Lc_aanc_process_events_40;

842019d6 <Lc_aanc_process_events_39>:
    else
    {
        aanc_process_event_clear_condition(op_data,
                                           &p_ext_data->spl_event,
                                           AANC_EVENT_ID_SPL,
                                           (uint16)(cur_ext >> 16));
842019d6:	ba 5a       	r0 = r5 ASHIFT -16;
842019d8:	84 21       	r2 = Null + 6;
842019da:	63 f0 64 22 	r1 = r4 + 612;
842019de:	95 c6       	r3 = r0 AND 0xffff;
842019e0:	42 08       	r0 = r6 + Null;
842019e2:	fe ff 23 e7 	call (m) Lc_aanc_process_event_clear_condition_1;

842019e6 <Lc_aanc_process_events_40>:
    }

    /* Gentle mute event */
    if (p_ext_data->cur_mode == AANC_SYSMODE_GENTLE_MUTE ||
        p_ext_data->cur_mode == AANC_SYSMODE_QUIET)
842019e6:	61 f0 63 88 	rMAC = M[r4 + 396];
842019ea:	48 25       	Null = rMAC - 5;
842019ec:	03 60       	if EQ jump (m) Lc_aanc_process_events_42;

842019ee <Lc_aanc_process_events_41>:
842019ee:	88 25       	Null = rMAC - 6;
842019f0:	10 62       	if NE jump (m) Lc_aanc_process_events_45;

842019f2 <Lc_aanc_process_events_42>:
    {
        if (p_ext_data->ff_gain.fine == 0)
842019f2:	65 f0 df 86 	r3 = MHU[r4 + 446];
842019f6:	08 62       	if NE jump (m) Lc_aanc_process_events_44;

842019f8 <Lc_aanc_process_events_43>:
        {
            aanc_process_event_detect_condition(op_data, &p_ext_data->gentle_mute_event,
                                                AANC_EVENT_ID_GENTLE_MUTE,
                                                p_ext_data->ff_gain.fine);            
842019f8:	c4 21       	r2 = Null + 7;
842019fa:	63 f0 70 22 	r1 = r4 + 624;
842019fe:	42 08       	r0 = r6 + Null;
84201a00:	fe ff 33 ee 	call (m) Lc_aanc_process_event_detect_condition_1;
84201a04:	06 6e       	jump (m) Lc_aanc_process_events_45;

84201a06 <Lc_aanc_process_events_44>:
        }
        else
        {
            aanc_clear_event(&p_ext_data->gentle_mute_event);
84201a06:	61 f0 70 22 	rMAC = r4 + 624;
    return TRUE;
}

static inline void aanc_clear_event(AANC_EVENT *p_event)
{
       p_event->frame_counter =p_event->set_frames;
84201a0a:	4a 88       	r0 = M[rMAC + 4];
84201a0c:	0a ee       	M[rMAC + Null] = r0;
       p_event->running = AANC_EVENT_CLEAR;
84201a0e:	08 9a       	MB[rMAC + 8] = Null;

84201a10 <Lc_aanc_process_events_45>:
        {
            aanc_clear_event(&p_ext_data->gentle_mute_event);
        }
    }

    return TRUE;
84201a10:	42 20       	r0 = Null + 1;

84201a12 <Lc_aanc_process_events_46>:
}
84201a12:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201a14:	d8 4c       	rts;

84201a16 <Lc_aanc_calc_gentle_mute_time_1>:
static uint16 aanc_calc_gentle_mute_time(unsigned timer_param)
{
    uint16 timer_duration;
    /* Calculate number of frames from timer parameter */
    timer_duration = (uint16) (
                        (timer_param * AANC_FRAME_RATE) >> 20);
84201a16:	7d f2 92 c9 	r0 = r0 * 250 (int);

    /* Check if gentle mute duration is 0,
    if it is 0, set to 1 to allow 1 frame for gain to ramp down to 0 */

    if (timer_duration == 0)
84201a1a:	d2 52       	r0 = r0 LSHIFT -20;
84201a1c:	02 62       	if NE jump (m) Lc_aanc_calc_gentle_mute_time_3;

84201a1e <Lc_aanc_calc_gentle_mute_time_2>:
    {
        timer_duration = 1;
84201a1e:	42 20       	r0 = Null + 1;

84201a20 <Lc_aanc_calc_gentle_mute_time_3>:
    }
    return timer_duration;
84201a20:	d8 4c       	rts;

84201a22 <$_AANC_GetDefaults>:
84201a22:	20 f0 c7 24 	Null = r0 - 199;
   0x00080000u,			// EVENT_SPL
   0xFFA00000u			// EVENT_SPL_THRESHOLD
};

unsigned *AANC_GetDefaults(unsigned capid){
	switch(capid){
84201a26:	05 60       	if EQ jump (m) Lc_AANC_GetDefaults_3;

84201a28 <Lc_AANC_GetDefaults_2>:
84201a28:	01 f0 20 f0 	Null = r0 - 16543;
84201a2c:	9f 24 
84201a2e:	05 62       	if NE jump (m) Lc_AANC_GetDefaults_4;

84201a30 <Lc_AANC_GetDefaults_3>:
		case 0x00C7: return defaults_aancAANC_MONO_16K;
84201a30:	f8 ff 02 f0 	r0 = Null + -8388604;
84201a34:	04 40 
84201a36:	02 6e       	jump (m) Lc_AANC_GetDefaults_5;

84201a38 <Lc_AANC_GetDefaults_4>:
		case 0x409F: return defaults_aancAANC_MONO_16K;
	}
	return((unsigned *)0);
84201a38:	02 00       	r0 = Null + Null;

84201a3a <Lc_AANC_GetDefaults_5>:
84201a3a:	d8 4c       	rts;

84201a3c <$_aanc_proc_create>:
84201a3c:	f3 1c       	pushm <FP(=SP), r4, r5, r6, rLink>;
/******************************************************************************
Public Function Implementations
*/

bool aanc_proc_create(ADAPTIVE_GAIN **pp_ag, unsigned sample_rate)
{
84201a3e:	17 00       	r5 = r0 + Null;
84201a40:	18 09       	r6 = r1 + Null;

    ADAPTIVE_GAIN *p_ag = xzpnew(ADAPTIVE_GAIN);
84201a42:	c3 20       	r1 = Null + 3;
84201a44:	02 f0 90 40 	r0 = Null + 144;
84201a48:	ff fd 27 f0 	call (m) 0x68a6;
84201a4c:	3f e2 
84201a4e:	16 00       	r4 = r0 + Null;
    if (p_ag == NULL)
84201a50:	0e 62       	if NE jump (m) Lc_aanc_proc_create_5;

84201a52 <Lc_aanc_proc_create_2>:
    {
        *pp_ag = NULL;
84201a52:	38 ee       	M[r5 + Null] = Null;
        L2_DBG_MSG("AANC_PROC failed to allocate adaptive gain");
84201a54:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a58:	88 24       	Null = rMAC - 2;
84201a5a:	07 68       	if LT jump (m) Lc_aanc_proc_create_4;

84201a5c <Lc_aanc_proc_create_3>:
84201a5c:	55 f1 02 f0 	r0 = Null + 357564617;
84201a60:	c9 40 
84201a62:	ef fd f9 ff 	call (m) 0xccc;
84201a66:	2b e3 

84201a68 <Lc_aanc_proc_create_4>:
        return FALSE;
84201a68:	02 00       	r0 = Null + Null;
84201a6a:	e7 6e       	jump (m) Lc_aanc_proc_create_39;

84201a6c <Lc_aanc_proc_create_5>:
    }

    *pp_ag = p_ag;
84201a6c:	3e ee       	M[r5 + Null] = r4;

    p_ag->p_aanc_reinit_flag = NULL;
84201a6e:	30 ee       	M[r4 + Null] = Null;

    /* Allocate internal input cbuffer in DM1 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_ip, MALLOC_PREFERENCE_DM1))
84201a70:	43 20       	r1 = Null + 1;
84201a72:	32 21       	r0 = r4 + 4;
84201a74:	04 f0 27 e3 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201a78:	10 04       	Null = r0 - Null;
84201a7a:	0e 62       	if NE jump (m) Lc_aanc_proc_create_8;

84201a7c <Lc_aanc_proc_create_6>:
    {
        aanc_proc_destroy(pp_ag);
84201a7c:	3a 00       	r0 = r5 + Null;
84201a7e:	df 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic input buffer");
84201a80:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201a84:	88 24       	Null = rMAC - 2;
84201a86:	f1 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201a88 <Lc_aanc_proc_create_7>:
84201a88:	55 f1 02 f0 	r0 = Null + 357564660;
84201a8c:	f4 40 
84201a8e:	ef fd f9 ff 	call (m) 0xccc;
84201a92:	3f e1 
84201a94:	ea 6f       	jump (m) Lc_aanc_proc_create_4;

84201a96 <Lc_aanc_proc_create_8>:
        return FALSE;
    }

    /* Allocate external input cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_ip, MALLOC_PREFERENCE_DM2))
84201a96:	83 20       	r1 = Null + 2;
84201a98:	32 2a       	r0 = r4 + 24;
84201a9a:	04 f0 21 e2 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201a9e:	10 04       	Null = r0 - Null;
84201aa0:	0e 62       	if NE jump (m) Lc_aanc_proc_create_11;

84201aa2 <Lc_aanc_proc_create_9>:
    {
        aanc_proc_destroy(pp_ag);
84201aa2:	3a 00       	r0 = r5 + Null;
84201aa4:	cc 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic input buffer");
84201aa6:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201aaa:	88 24       	Null = rMAC - 2;
84201aac:	de 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201aae <Lc_aanc_proc_create_10>:
84201aae:	55 f1 02 f0 	r0 = Null + 357564710;
84201ab2:	26 41 
84201ab4:	ef fd f9 ff 	call (m) 0xccc;
84201ab8:	39 e0 
84201aba:	d7 6f       	jump (m) Lc_aanc_proc_create_4;

84201abc <Lc_aanc_proc_create_11>:
        return FALSE;
    }

    /* Create playback cbuffer without specific bank allocation */
    p_ag->p_tmp_pb_ip = cbuffer_create_with_malloc(AANC_INTERNAL_BUFFER_SIZE,
                                                   BUF_DESC_SW_BUFFER);
84201abc:	02 f0 41 40 	r0 = Null + 65;
84201ac0:	03 00       	r1 = Null + Null;
84201ac2:	ff fd 94 f0 	call (m) 0x142c6;
84201ac6:	25 e0 
84201ac8:	f2 9e       	M[r4 + 44] = r0;
    if (p_ag->p_tmp_pb_ip == NULL)
84201aca:	f1 98       	rMAC = M[r4 + 44];
84201acc:	0e 62       	if NE jump (m) Lc_aanc_proc_create_14;

84201ace <Lc_aanc_proc_create_12>:
    {
        aanc_proc_destroy(pp_ag);
84201ace:	3a 00       	r0 = r5 + Null;
84201ad0:	b6 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate playback cbuffer");
84201ad2:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ad6:	88 24       	Null = rMAC - 2;
84201ad8:	c8 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201ada <Lc_aanc_proc_create_13>:
84201ada:	55 f1 02 f0 	r0 = Null + 357564760;
84201ade:	58 41 
84201ae0:	ef fd f8 ff 	call (m) 0xccc;
84201ae4:	2d ef 
84201ae6:	c1 6f       	jump (m) Lc_aanc_proc_create_4;

84201ae8 <Lc_aanc_proc_create_14>:
        return FALSE;
    }

    /* Create EDs */
    if (!aanc_proc_create_ed(&p_ag->p_ed_int_params, &p_ag->p_ed_int_stats,
                             &p_ag->p_ed_int, sample_rate))
84201ae8:	34 29       	r2 = r4 + 20;
84201aea:	33 28       	r1 = r4 + 16;
84201aec:	32 23       	r0 = r4 + 12;
84201aee:	45 08       	r3 = r6 + Null;
84201af0:	03 f0 37 eb 	call (m) Lc_aanc_proc_create_ed_1;
84201af4:	10 04       	Null = r0 - Null;
84201af6:	0e 62       	if NE jump (m) Lc_aanc_proc_create_17;

84201af8 <Lc_aanc_proc_create_15>:
    {
        aanc_proc_destroy(pp_ag);
84201af8:	3a 00       	r0 = r5 + Null;
84201afa:	a1 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create int mic ED");
84201afc:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201b00:	88 24       	Null = rMAC - 2;
84201b02:	b3 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201b04 <Lc_aanc_proc_create_16>:
84201b04:	55 f1 02 f0 	r0 = Null + 357564806;
84201b08:	86 41 
84201b0a:	ef fd f8 ff 	call (m) 0xccc;
84201b0e:	23 ee 
84201b10:	ac 6f       	jump (m) Lc_aanc_proc_create_4;

84201b12 <Lc_aanc_proc_create_17>:
        return FALSE;
    }

    if (!aanc_proc_create_ed(&p_ag->p_ed_ext_params, &p_ag->p_ed_ext_stats,
                             &p_ag->p_ed_ext, sample_rate))
84201b12:	34 32       	r2 = r4 + 40;
84201b14:	33 31       	r1 = r4 + 36;
84201b16:	32 30       	r0 = r4 + 32;
84201b18:	45 08       	r3 = r6 + Null;
84201b1a:	03 f0 2d ea 	call (m) Lc_aanc_proc_create_ed_1;
84201b1e:	10 04       	Null = r0 - Null;
84201b20:	0e 62       	if NE jump (m) Lc_aanc_proc_create_20;

84201b22 <Lc_aanc_proc_create_18>:
    {
        aanc_proc_destroy(pp_ag);
84201b22:	3a 00       	r0 = r5 + Null;
84201b24:	8c 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create ext mic ED");
84201b26:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201b2a:	88 24       	Null = rMAC - 2;
84201b2c:	9e 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201b2e <Lc_aanc_proc_create_19>:
84201b2e:	55 f1 02 f0 	r0 = Null + 357564844;
84201b32:	ac 41 
84201b34:	ef fd f8 ff 	call (m) 0xccc;
84201b38:	39 ec 
84201b3a:	97 6f       	jump (m) Lc_aanc_proc_create_4;

84201b3c <Lc_aanc_proc_create_20>:
        return FALSE;
    }

    if (!aanc_proc_create_ed(&p_ag->p_ed_pb_params, &p_ag->p_ed_pb_stats,
                             &p_ag->p_ed_pb, sample_rate))
84201b3c:	34 3a       	r2 = r4 + 56;
84201b3e:	33 39       	r1 = r4 + 52;
84201b40:	32 38       	r0 = r4 + 48;
84201b42:	45 08       	r3 = r6 + Null;
84201b44:	03 f0 23 e9 	call (m) Lc_aanc_proc_create_ed_1;
84201b48:	10 04       	Null = r0 - Null;
84201b4a:	0e 62       	if NE jump (m) Lc_aanc_proc_create_23;

84201b4c <Lc_aanc_proc_create_21>:
    {
        aanc_proc_destroy(pp_ag);
84201b4c:	3a 00       	r0 = r5 + Null;
84201b4e:	77 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create playback mic ED");
84201b50:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201b54:	88 24       	Null = rMAC - 2;
84201b56:	89 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201b58 <Lc_aanc_proc_create_22>:
84201b58:	55 f1 02 f0 	r0 = Null + 357564882;
84201b5c:	d2 41 
84201b5e:	ef fd f8 ff 	call (m) 0xccc;
84201b62:	2f eb 
84201b64:	82 6f       	jump (m) Lc_aanc_proc_create_4;

84201b66 <Lc_aanc_proc_create_23>:
        return FALSE;
    }

    /* Allocate int mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_int_op, MALLOC_PREFERENCE_DM2))
84201b66:	83 20       	r1 = Null + 2;
84201b68:	32 22       	r0 = r4 + 8;
84201b6a:	03 f0 31 eb 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201b6e:	10 04       	Null = r0 - Null;
84201b70:	0e 62       	if NE jump (m) Lc_aanc_proc_create_26;

84201b72 <Lc_aanc_proc_create_24>:
    {
        aanc_proc_destroy(pp_ag);
84201b72:	3a 00       	r0 = r5 + Null;
84201b74:	64 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate int mic output buffer");
84201b76:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201b7a:	88 24       	Null = rMAC - 2;
84201b7c:	76 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201b7e <Lc_aanc_proc_create_25>:
84201b7e:	55 f1 02 f0 	r0 = Null + 357564925;
84201b82:	fd 41 
84201b84:	ef fd f8 ff 	call (m) 0xccc;
84201b88:	29 ea 
84201b8a:	6f 6f       	jump (m) Lc_aanc_proc_create_4;

84201b8c <Lc_aanc_proc_create_26>:
        return FALSE;
    }

    /* Allocate ext mic output cbuffer in DM2 */
    if (!aanc_proc_create_cbuffer(&p_ag->p_tmp_ext_op, MALLOC_PREFERENCE_DM2))
84201b8c:	83 20       	r1 = Null + 2;
84201b8e:	32 2b       	r0 = r4 + 28;
84201b90:	03 f0 2b ea 	call (m) Lc_aanc_proc_create_cbuffer_1;
84201b94:	10 04       	Null = r0 - Null;
84201b96:	0e 62       	if NE jump (m) Lc_aanc_proc_create_29;

84201b98 <Lc_aanc_proc_create_27>:
    {
        aanc_proc_destroy(pp_ag);
84201b98:	3a 00       	r0 = r5 + Null;
84201b9a:	51 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to allocate ext mic output buffer");
84201b9c:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201ba0:	88 24       	Null = rMAC - 2;
84201ba2:	63 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201ba4 <Lc_aanc_proc_create_28>:
84201ba4:	55 f1 02 f0 	r0 = Null + 357564976;
84201ba8:	30 42 
84201baa:	ef fd f8 ff 	call (m) 0xccc;
84201bae:	23 e9 
84201bb0:	5c 6f       	jump (m) Lc_aanc_proc_create_4;

84201bb2 <Lc_aanc_proc_create_29>:
        return FALSE;
    }

    /* Allocate and zero FXLMS parameters */
    p_ag->p_fxlms_params = xzpnew(FXLMS100_PARAMETERS);
84201bb2:	c3 20       	r1 = Null + 3;
84201bb4:	02 3b       	r0 = Null + 60;
84201bb6:	ff fd 26 f0 	call (m) 0x68a6;
84201bba:	31 e7 
    if (p_ag->p_fxlms_params == NULL)
84201bbc:	f2 9f       	M[r4 + 60] = r0;
84201bbe:	0e 62       	if NE jump (m) Lc_aanc_proc_create_32;

84201bc0 <Lc_aanc_proc_create_30>:
    {
        aanc_proc_destroy(pp_ag);
84201bc0:	3a 00       	r0 = r5 + Null;
84201bc2:	3d 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms parameters");
84201bc4:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201bc8:	88 24       	Null = rMAC - 2;
84201bca:	4f 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201bcc <Lc_aanc_proc_create_31>:
84201bcc:	55 f1 02 f0 	r0 = Null + 357565027;
84201bd0:	63 42 
84201bd2:	ef fd f8 ff 	call (m) 0xccc;
84201bd6:	3b e7 
84201bd8:	48 6f       	jump (m) Lc_aanc_proc_create_4;

84201bda <Lc_aanc_proc_create_32>:
        return FALSE;
    }

    /* Allocate and zero FXLMS statistics */
    p_ag->p_fxlms_stats = xzpnew(FXLMS100_STATISTICS);
84201bda:	c3 20       	r1 = Null + 3;
84201bdc:	02 38       	r0 = Null + 48;
84201bde:	ff fd 26 f0 	call (m) 0x68a6;
84201be2:	29 e6 
84201be4:	14 00       	r2 = r0 + Null;
    if (p_ag->p_fxlms_stats == NULL)
84201be6:	34 ae       	M[r4 + 64] = r2;
84201be8:	0e 62       	if NE jump (m) Lc_aanc_proc_create_35;

84201bea <Lc_aanc_proc_create_33>:
    {
        aanc_proc_destroy(pp_ag);
84201bea:	3a 00       	r0 = r5 + Null;
84201bec:	28 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms statistics");
84201bee:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201bf2:	88 24       	Null = rMAC - 2;
84201bf4:	3a 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201bf6 <Lc_aanc_proc_create_34>:
84201bf6:	55 f1 02 f0 	r0 = Null + 357565071;
84201bfa:	8f 42 
84201bfc:	ef fd f8 ff 	call (m) 0xccc;
84201c00:	31 e6 
84201c02:	33 6f       	jump (m) Lc_aanc_proc_create_4;

84201c04 <Lc_aanc_proc_create_35>:
        return FALSE;
    }

    /* Create FXLMS data structure */
    if (!aanc_fxlms100_create(&p_ag->p_fxlms, p_ag->p_fxlms_params,
                              p_ag->p_fxlms_stats, AANC_PROC_NUM_TAPS_BP))
84201c04:	45 21       	r3 = Null + 5;
84201c06:	f3 99       	r1 = M[r4 + 60];
84201c08:	62 f0 44 20 	r0 = r4 + 68;
84201c0c:	04 f0 27 ea 	call (m) $_aanc_fxlms100_create;
84201c10:	10 04       	Null = r0 - Null;
84201c12:	0e 62       	if NE jump (m) Lc_aanc_proc_create_38;

84201c14 <Lc_aanc_proc_create_36>:
    {
        aanc_proc_destroy(pp_ag);
84201c14:	3a 00       	r0 = r5 + Null;
84201c16:	13 4e       	call (m) $_aanc_proc_destroy;
        L2_DBG_MSG("AANC_PROC failed to create fxlms");
84201c18:	01 f0 3c 91 	rMAC = MBS[Null + 0x33c];
84201c1c:	88 24       	Null = rMAC - 2;
84201c1e:	25 69       	if LT jump (m) Lc_aanc_proc_create_4;

84201c20 <Lc_aanc_proc_create_37>:
84201c20:	55 f1 02 f0 	r0 = Null + 357565115;
84201c24:	bb 42 
84201c26:	ef fd f8 ff 	call (m) 0xccc;
84201c2a:	27 e5 
84201c2c:	1e 6f       	jump (m) Lc_aanc_proc_create_4;

84201c2e <Lc_aanc_proc_create_38>:
        return FALSE;
    }

    p_ag->clip_threshold = AANC_PROC_CLIPPING_THRESHOLD;
84201c2e:	ff f3 f1 f7 	rMAC = Null + 1073741823;
84201c32:	ff 7b 
84201c34:	b1 ae       	M[r4 + 72] = rMAC;

    return TRUE;
84201c36:	42 20       	r0 = Null + 1;

84201c38 <Lc_aanc_proc_create_39>:
}
84201c38:	f3 48       	popm <FP, r4, r5, r6, rLink>;
84201c3a:	d8 4c       	rts;

84201c3c <$_aanc_proc_destroy>:

bool aanc_proc_destroy(ADAPTIVE_GAIN **pp_ag)
{
84201c3c:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
84201c3e:	17 00       	r5 = r0 + Null;
    if (*pp_ag == NULL)
84201c40:	3e e8       	r4 = M[r5 + Null];
84201c42:	35 60       	if EQ jump (m) Lc_aanc_proc_destroy_3;

84201c44 <Lc_aanc_proc_destroy_2>:
        return TRUE;
    }

    ADAPTIVE_GAIN *p_ag = *pp_ag;

    aanc_fxlms100_destroy(&p_ag->p_fxlms);
84201c44:	62 f0 44 20 	r0 = r4 + 68;
84201c48:	05 f0 21 e8 	call (m) $_aanc_fxlms100_destroy;
    pdelete(p_ag->p_fxlms_params);
84201c4c:	f2 99       	r0 = M[r4 + 60];
84201c4e:	ff fd 26 f0 	call (m) 0x68d8;
84201c52:	2b e4 
    pdelete(p_ag->p_fxlms_stats);
84201c54:	32 a8       	r0 = M[r4 + 64];
84201c56:	ff fd 26 f0 	call (m) 0x68d8;
84201c5a:	23 e4 

    aanc_proc_destroy_ed(&p_ag->p_ed_int_params, &p_ag->p_ed_int_stats,
                         &p_ag->p_ed_int);
84201c5c:	34 29       	r2 = r4 + 20;
84201c5e:	33 28       	r1 = r4 + 16;
84201c60:	32 23       	r0 = r4 + 12;
84201c62:	03 f0 39 e2 	call (m) Lc_aanc_proc_destroy_ed_1;
    aanc_proc_destroy_ed(&p_ag->p_ed_ext_params, &p_ag->p_ed_ext_stats,
                         &p_ag->p_ed_ext);
84201c66:	34 32       	r2 = r4 + 40;
84201c68:	33 31       	r1 = r4 + 36;
84201c6a:	32 30       	r0 = r4 + 32;
84201c6c:	03 f0 2f e2 	call (m) Lc_aanc_proc_destroy_ed_1;
    aanc_proc_destroy_ed(&p_ag->p_ed_pb_params, &p_ag->p_ed_pb_stats,
                         &p_ag->p_ed_pb);
84201c70:	34 3a       	r2 = r4 + 56;
84201c72:	33 39       	r1 = r4 + 52;
84201c74:	32 38       	r0 = r4 + 48;
84201c76:	03 f0 25 e2 	call (m) Lc_aanc_proc_destroy_ed_1;

    cbuffer_destroy(p_ag->p_tmp_int_ip);
84201c7a:	72 88       	r0 = M[r4 + 4];
84201c7c:	ff fd 93 f0 	call (m) 0x1439a;
84201c80:	3f e8 
    cbuffer_destroy(p_ag->p_tmp_ext_ip);
84201c82:	b2 89       	r0 = M[r4 + 24];
84201c84:	ff fd 93 f0 	call (m) 0x1439a;
84201c88:	37 e8 
    cbuffer_destroy(p_ag->p_tmp_pb_ip);
84201c8a:	f2 98       	r0 = M[r4 + 44];
84201c8c:	ff fd 93 f0 	call (m) 0x1439a;
84201c90:	2f e8 

    cbuffer_destroy(p_ag->p_tmp_int_op);
84201c92:	b2 88       	r0 = M[r4 + 8];
84201c94:	ff fd 93 f0 	call (m) 0x1439a;
84201c98:	27 e8 
    cbuffer_destroy(p_ag->p_tmp_ext_op);
84201c9a:	f2 89       	r0 = M[r4 + 28];
84201c9c:	ff fd 93 f0 	call (m) 0x1439a;
84201ca0:	3f e7 

    pdelete(p_ag);
84201ca2:	32 00       	r0 = r4 + Null;
84201ca4:	ff fd 26 f0 	call (m) 0x68d8;
84201ca8:	35 e1 
    *pp_ag = NULL;
84201caa:	38 ee       	M[r5 + Null] = Null;

84201cac <Lc_aanc_proc_destroy_3>:

bool aanc_proc_destroy(ADAPTIVE_GAIN **pp_ag)
{
    if (*pp_ag == NULL)
    {
        return TRUE;
84201cac:	42 20       	r0 = Null + 1;

84201cae <Lc_aanc_proc_destroy_4>:

    pdelete(p_ag);
    *pp_ag = NULL;

    return TRUE;
}
84201cae:	f2 48       	popm <FP, r4, r5, rLink>;
84201cb0:	d8 4c       	rts;

84201cb2 <$_aanc_proc_initialize>:

bool aanc_proc_initialize(AANC_PARAMETERS *p_params, ADAPTIVE_GAIN *p_ag,
                          unsigned ag_start, unsigned *p_flags,
                          bool hard_initialize)
{
84201cb2:	f5 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, rLink>;
84201cb4:	50 f3 10 cf 	SP = SP + 160;
84201cb8:	16 00       	r4 = r0 + Null;
84201cba:	18 09       	r6 = r1 + Null;
84201cbc:	e9 f3 ff b9 	r7 = M[FP + -4];
    /* Initialize pointers to parameters and flags */
    p_ag->p_aanc_params = p_params;
84201cc0:	86 f0 1a 8e 	M[r6 + 104] = r4;
    p_ag->p_aanc_flags = p_flags;
84201cc4:	85 f0 1b 8e 	M[r6 + 108] = r3;

    /* Initialize the FXLMS */
    FXLMS100_PARAMETERS *p_fxlms_params = p_ag->p_fxlms_params;
84201cc8:	87 f0 0f 88 	r5 = M[r6 + 60];

    p_fxlms_params->target_nr = p_params->OFFSET_TARGET_NOISE_REDUCTION;
84201ccc:	61 f0 50 88 	rMAC = M[r4 + 320];
84201cd0:	39 ee       	M[r5 + Null] = rMAC;
    p_fxlms_params->mu = p_params->OFFSET_MU;
84201cd2:	b1 88       	rMAC = M[r4 + 8];
84201cd4:	79 8e       	M[r5 + 4] = rMAC;
    p_fxlms_params->gamma = p_params->OFFSET_GAMMA;
84201cd6:	f1 88       	rMAC = M[r4 + 12];
84201cd8:	b9 8e       	M[r5 + 8] = rMAC;
    p_fxlms_params->lambda = p_params->OFFSET_LAMBDA;
84201cda:	61 f0 4f 88 	rMAC = M[r4 + 316];
84201cde:	39 8f       	M[r5 + 16] = rMAC;
    p_fxlms_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
84201ce0:	01 f0 40 40 	rMAC = Null + 64;
84201ce4:	f9 8e       	M[r5 + 12] = rMAC;
    p_fxlms_params->min_bound = p_params->OFFSET_FXLMS_MIN_BOUND;
84201ce6:	61 f0 43 88 	rMAC = M[r4 + 268];
84201cea:	f9 9e       	M[r5 + 44] = rMAC;
    p_fxlms_params->max_bound = p_params->OFFSET_FXLMS_MAX_BOUND;
84201cec:	61 f0 44 88 	rMAC = M[r4 + 272];
84201cf0:	39 9f       	M[r5 + 48] = rMAC;
    p_fxlms_params->max_delta = p_params->OFFSET_FXLMS_MAX_DELTA;
84201cf2:	61 f0 45 88 	rMAC = M[r4 + 276];
84201cf6:	79 9f       	M[r5 + 52] = rMAC;

    unsigned existing_configuration = \
        p_fxlms_params->configuration & FXLMS100_CONIFIG_OPTIM_MASK_INV;
84201cf8:	b9 99       	rMAC = M[r5 + 56];
84201cfa:	11 f7 ff 10 	rMAC = rMAC AND 0xf0ff;
    if ((p_params->OFFSET_AANC_DEBUG &
         AANC_CONFIG_AANC_DEBUG_DISABLE_FILTER_OPTIM) > 0)
84201cfe:	72 89       	r0 = M[r4 + 20];
84201d00:	52 c4       	r0 = r0 AND 0x200;
84201d02:	04 60       	if EQ jump (m) Lc_aanc_proc_initialize_3;

84201d04 <Lc_aanc_proc_initialize_2>:
    {
        p_fxlms_params->configuration = \
            existing_configuration | FXLMS100_CONFIG_DISABLE_FILTER_OPTIM;
84201d04:	c9 cb       	rMAC = rMAC OR 0x100;
84201d06:	b9 9f       	M[r5 + 56] = rMAC;
84201d08:	02 6e       	jump (m) Lc_aanc_proc_initialize_4;

84201d0a <Lc_aanc_proc_initialize_3>:
    }
    else
    {
        p_fxlms_params->configuration = \
            existing_configuration | FXLMS100_CONFIG_ENABLE_FILTER_OPTIM;
84201d0a:	b9 9f       	M[r5 + 56] = rMAC;

84201d0c <Lc_aanc_proc_initialize_4>:
    }

    if (hard_initialize)
84201d0c:	0f f9 00 c2 	Null = r7 - Null;
84201d10:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_6;

84201d12 <Lc_aanc_proc_initialize_5>:
    {
        p_fxlms_params->initial_gain = ag_start;
84201d12:	7c 9e       	M[r5 + 36] = r2;

84201d14 <Lc_aanc_proc_initialize_6>:
84201d14:	61 f0 3b 88 	rMAC = M[r4 + 236];
84201d18:	d9 de       	M[FP + 108] = rMAC;
84201d1a:	61 f0 3c 88 	rMAC = M[r4 + 240];
84201d1e:	e1 de       	M[FP + 112] = rMAC;
84201d20:	61 f0 3d 88 	rMAC = M[r4 + 244];
84201d24:	e9 de       	M[FP + 116] = rMAC;
84201d26:	61 f0 3e 88 	rMAC = M[r4 + 248];
84201d2a:	f1 de       	M[FP + 120] = rMAC;
84201d2c:	61 f0 3f 88 	rMAC = M[r4 + 252];
84201d30:	f9 de       	M[FP + 124] = rMAC;
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_0,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_1,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_2,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_3,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_INT_4
    };
84201d32:	c3 16       	r1 = FP + 108;
84201d34:	c2 11       	r0 = FP + 28;
84201d36:	44 21       	r2 = Null + 5;
84201d38:	ff fd c2 f0 	call (m) 0x1a1ee;
84201d3c:	37 e5 
    p_fxlms_params->p_bp_coeffs_num_int = bp_num_coeffs_int;
84201d3e:	c1 11       	rMAC = FP + 28;
84201d40:	79 8f       	M[r5 + 20] = rMAC;
84201d42:	61 f0 36 88 	rMAC = M[r4 + 216];
84201d46:	01 df       	M[FP + 128] = rMAC;
84201d48:	61 f0 37 88 	rMAC = M[r4 + 220];
84201d4c:	09 df       	M[FP + 132] = rMAC;
84201d4e:	61 f0 38 88 	rMAC = M[r4 + 224];
84201d52:	11 df       	M[FP + 136] = rMAC;
84201d54:	61 f0 39 88 	rMAC = M[r4 + 228];
84201d58:	19 df       	M[FP + 140] = rMAC;
84201d5a:	61 f0 3a 88 	rMAC = M[r4 + 232];
84201d5e:	21 df       	M[FP + 144] = rMAC;
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_0,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_1,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_2,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_3,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_INT_4
    };
84201d60:	03 18       	r1 = FP + 128;
84201d62:	02 13       	r0 = FP + 48;
84201d64:	44 21       	r2 = Null + 5;
84201d66:	ff fd c2 f0 	call (m) 0x1a1ee;
84201d6a:	29 e4 
    p_fxlms_params->p_bp_coeffs_den_int = bp_den_coeffs_int;
84201d6c:	01 13       	rMAC = FP + 48;
84201d6e:	b9 8f       	M[r5 + 24] = rMAC;
84201d70:	61 f0 31 88 	rMAC = M[r4 + 196];
84201d74:	29 df       	M[FP + 148] = rMAC;
84201d76:	61 f0 32 88 	rMAC = M[r4 + 200];
84201d7a:	31 df       	M[FP + 152] = rMAC;
84201d7c:	61 f0 33 88 	rMAC = M[r4 + 204];
84201d80:	39 df       	M[FP + 156] = rMAC;
84201d82:	61 f0 34 88 	rMAC = M[r4 + 208];
84201d86:	41 df       	M[FP + 160] = rMAC;
84201d88:	61 f0 35 88 	rMAC = M[r4 + 212];
84201d8c:	49 df       	M[FP + 164] = rMAC;
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_0,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_1,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_2,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_3,
        p_params->OFFSET_BPF_NUMERATOR_COEFF_EXT_4
    };
84201d8e:	43 19       	r1 = FP + 148;
84201d90:	42 14       	r0 = FP + 68;
84201d92:	44 21       	r2 = Null + 5;
84201d94:	ff fd c2 f0 	call (m) 0x1a1ee;
84201d98:	3b e2 
    p_fxlms_params->p_bp_coeffs_num_ext = bp_num_coeffs_ext;
84201d9a:	41 14       	rMAC = FP + 68;
84201d9c:	f9 8f       	M[r5 + 28] = rMAC;
84201d9e:	61 f0 2c 88 	rMAC = M[r4 + 176];
84201da2:	51 df       	M[FP + 168] = rMAC;
84201da4:	61 f0 2d 88 	rMAC = M[r4 + 180];
84201da8:	59 df       	M[FP + 172] = rMAC;
84201daa:	61 f0 2e 88 	rMAC = M[r4 + 184];
84201dae:	61 df       	M[FP + 176] = rMAC;
84201db0:	61 f0 2f 88 	rMAC = M[r4 + 188];
84201db4:	69 df       	M[FP + 180] = rMAC;
84201db6:	61 f0 30 88 	rMAC = M[r4 + 192];
84201dba:	71 df       	M[FP + 184] = rMAC;
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_0,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_1,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_2,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_3,
        p_params->OFFSET_BPF_DENOMINATOR_COEFF_EXT_4
    };
84201dbc:	83 1a       	r1 = FP + 168;
84201dbe:	82 15       	r0 = FP + 88;
84201dc0:	44 21       	r2 = Null + 5;
84201dc2:	ff fd c2 f0 	call (m) 0x1a1ee;
84201dc6:	2d e1 
    p_fxlms_params->p_bp_coeffs_den_ext = bp_den_coeffs_ext;
84201dc8:	81 15       	rMAC = FP + 88;
84201dca:	39 9e       	M[r5 + 32] = rMAC;

    aanc_fxlms100_initialize(p_ag->p_fxlms, p_ag->p_tmp_int_ip,
                             p_ag->p_tmp_ext_ip, p_ag->p_tmp_int_op,
                             p_ag->p_tmp_ext_op, hard_initialize);
84201dcc:	18 1c       	pushm <r7>;
84201dce:	81 f0 07 88 	rMAC = M[r6 + 28];
84201dd2:	09 1c       	pushm <rMAC>;
84201dd4:	85 f0 02 88 	r3 = M[r6 + 8];
84201dd8:	84 f0 06 88 	r2 = M[r6 + 24];
84201ddc:	83 f0 01 88 	r1 = M[r6 + 4];
84201de0:	82 f0 11 88 	r0 = M[r6 + 68];
84201de4:	04 f0 33 ed 	call (m) $_aanc_fxlms100_initialize;
84201de8:	7e 4c       	SP = SP + -8;

    /* Initialize EDs */
    bool ext_ed_disable_e_filter_check = FALSE;
84201dea:	01 09       	r7 = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_EXT_E_FILTER_CHECK)
84201dec:	72 89       	r0 = M[r4 + 20];
84201dee:	51 c2       	rMAC = r0 AND 0x20;
84201df0:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_8;

84201df2 <Lc_aanc_proc_initialize_7>:
    {
        ext_ed_disable_e_filter_check = TRUE;
84201df2:	09 71       	r7 = Null + 1;

84201df4 <Lc_aanc_proc_initialize_8>:
    }
    bool int_ed_disable_e_filter_check = FALSE;
84201df4:	01 00       	rMAC = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_INT_E_FILTER_CHECK)
84201df6:	d3 c1       	r1 = r0 AND 0x10;
84201df8:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_10;

84201dfa <Lc_aanc_proc_initialize_9>:
    {
        int_ed_disable_e_filter_check = TRUE;
84201dfa:	41 20       	rMAC = Null + 1;

84201dfc <Lc_aanc_proc_initialize_10>:
    }
    bool pb_ed_disable_e_filter_check = FALSE;
84201dfc:	02 09       	r8 = Null + Null;
    if (p_params->OFFSET_AANC_DEBUG & \
        AANC_CONFIG_AANC_DEBUG_DISABLE_ED_PB_E_FILTER_CHECK)
84201dfe:	d2 c2       	r0 = r0 AND 0x40;
84201e00:	02 60       	if EQ jump (m) Lc_aanc_proc_initialize_12;

84201e02 <Lc_aanc_proc_initialize_11>:
    {
        pb_ed_disable_e_filter_check = TRUE;
84201e02:	0a 71       	r8 = Null + 1;

84201e04 <Lc_aanc_proc_initialize_12>:
    }

    ED100_PARAMETERS *p_ed_int_params = p_ag->p_ed_int_params;
84201e04:	82 f0 03 88 	r0 = M[r6 + 12];
    p_ed_int_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
84201e08:	07 f0 40 40 	r5 = Null + 64;
84201e0c:	17 ee       	M[r0 + Null] = r5;
    p_ed_int_params->attack_time = p_params->OFFSET_ED_INT_ATTACK;
84201e0e:	33 a9       	r1 = M[r4 + 80];
84201e10:	53 8e       	M[r0 + 4] = r1;
    p_ed_int_params->decay_time = p_params->OFFSET_ED_INT_DECAY;
84201e12:	73 a9       	r1 = M[r4 + 84];
84201e14:	93 8e       	M[r0 + 8] = r1;
    p_ed_int_params->envelope_time = p_params->OFFSET_ED_INT_ENVELOPE;
84201e16:	b3 a9       	r1 = M[r4 + 88];
84201e18:	d3 8e       	M[r0 + 12] = r1;
    p_ed_int_params->init_frame_time = p_params->OFFSET_ED_INT_INIT_FRAME;
84201e1a:	f3 a9       	r1 = M[r4 + 92];
84201e1c:	13 8f       	M[r0 + 16] = r1;
    p_ed_int_params->ratio = p_params->OFFSET_ED_INT_RATIO;
84201e1e:	33 b8       	r1 = M[r4 + 96];
84201e20:	53 8f       	M[r0 + 20] = r1;
    p_ed_int_params->min_signal = p_params->OFFSET_ED_INT_MIN_SIGNAL;
84201e22:	73 b8       	r1 = M[r4 + 100];
84201e24:	93 8f       	M[r0 + 24] = r1;
    p_ed_int_params->min_max_envelope = p_params->OFFSET_ED_INT_MIN_MAX_ENVELOPE;
84201e26:	b3 b8       	r1 = M[r4 + 104];
84201e28:	d3 8f       	M[r0 + 28] = r1;
    p_ed_int_params->delta_th = p_params->OFFSET_ED_INT_DELTA_TH;
84201e2a:	f3 b8       	r1 = M[r4 + 108];
84201e2c:	13 9e       	M[r0 + 32] = r1;
    p_ed_int_params->count_th = p_params->OFFSET_ED_INT_COUNT_TH;
84201e2e:	33 b9       	r1 = M[r4 + 112];
84201e30:	53 9e       	M[r0 + 36] = r1;
    p_ed_int_params->hold_frames = p_params->OFFSET_ED_INT_HOLD_FRAMES;
84201e32:	73 b9       	r1 = M[r4 + 116];
84201e34:	93 9e       	M[r0 + 40] = r1;
    p_ed_int_params->e_min_threshold = p_params->OFFSET_ED_INT_E_FILTER_MIN_THRESHOLD;
84201e36:	b3 b9       	r1 = M[r4 + 120];
84201e38:	d3 9e       	M[r0 + 44] = r1;
    p_ed_int_params->e_min_counter_threshold = p_params->OFFSET_ED_INT_E_FILTER_MIN_COUNTER_THRESHOLD;
84201e3a:	f3 b9       	r1 = M[r4 + 124];
84201e3c:	13 9f       	M[r0 + 48] = r1;
    p_ed_int_params->e_min_check_disabled = int_ed_disable_e_filter_check;
84201e3e:	51 9f       	M[r0 + 52] = rMAC;
    aanc_ed100_initialize(p_ag->p_ed_int);
84201e40:	82 f0 05 88 	r0 = M[r6 + 20];
84201e44:	06 f0 29 ef 	call (m) $_aanc_ed100_initialize;

    ED100_PARAMETERS *p_ed_ext_params = p_ag->p_ed_ext_params;
84201e48:	81 f0 08 88 	rMAC = M[r6 + 32];
    p_ed_ext_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
84201e4c:	0f ee       	M[rMAC + Null] = r5;
    p_ed_ext_params->attack_time = p_params->OFFSET_ED_EXT_ATTACK;
84201e4e:	32 98       	r0 = M[r4 + 32];
84201e50:	4a 8e       	M[rMAC + 4] = r0;
    p_ed_ext_params->decay_time = p_params->OFFSET_ED_EXT_DECAY;
84201e52:	72 98       	r0 = M[r4 + 36];
84201e54:	8a 8e       	M[rMAC + 8] = r0;
    p_ed_ext_params->envelope_time = p_params->OFFSET_ED_EXT_ENVELOPE;
84201e56:	b2 98       	r0 = M[r4 + 40];
84201e58:	ca 8e       	M[rMAC + 12] = r0;
    p_ed_ext_params->init_frame_time = p_params->OFFSET_ED_EXT_INIT_FRAME;
84201e5a:	f2 98       	r0 = M[r4 + 44];
84201e5c:	0a 8f       	M[rMAC + 16] = r0;
    p_ed_ext_params->ratio = p_params->OFFSET_ED_EXT_RATIO;
84201e5e:	32 99       	r0 = M[r4 + 48];
84201e60:	4a 8f       	M[rMAC + 20] = r0;
    p_ed_ext_params->min_signal = p_params->OFFSET_ED_EXT_MIN_SIGNAL;
84201e62:	72 99       	r0 = M[r4 + 52];
84201e64:	8a 8f       	M[rMAC + 24] = r0;
    p_ed_ext_params->min_max_envelope = p_params->OFFSET_ED_EXT_MIN_MAX_ENVELOPE;
84201e66:	b2 99       	r0 = M[r4 + 56];
84201e68:	ca 8f       	M[rMAC + 28] = r0;
    p_ed_ext_params->delta_th = p_params->OFFSET_ED_EXT_DELTA_TH;
84201e6a:	f2 99       	r0 = M[r4 + 60];
84201e6c:	0a 9e       	M[rMAC + 32] = r0;
    p_ed_ext_params->count_th = p_params->OFFSET_ED_EXT_COUNT_TH;
84201e6e:	32 a8       	r0 = M[r4 + 64];
84201e70:	4a 9e       	M[rMAC + 36] = r0;
    p_ed_ext_params->hold_frames = p_params->OFFSET_ED_EXT_HOLD_FRAMES;
84201e72:	72 a8       	r0 = M[r4 + 68];
84201e74:	8a 9e       	M[rMAC + 40] = r0;
    p_ed_ext_params->e_min_threshold = p_params->OFFSET_ED_EXT_E_FILTER_MIN_THRESHOLD;
84201e76:	b2 a8       	r0 = M[r4 + 72];
84201e78:	ca 9e       	M[rMAC + 44] = r0;
    p_ed_ext_params->e_min_counter_threshold = p_params->OFFSET_ED_EXT_E_FILTER_MIN_COUNTER_THRESHOLD;
84201e7a:	f2 a8       	r0 = M[r4 + 76];
84201e7c:	0a 9f       	M[rMAC + 48] = r0;
    p_ed_ext_params->e_min_check_disabled = ext_ed_disable_e_filter_check;
84201e7e:	19 f0 0d 8e 	M[rMAC + 52] = r7;
    aanc_ed100_initialize(p_ag->p_ed_ext);
84201e82:	82 f0 0a 88 	r0 = M[r6 + 40];
84201e86:	06 f0 27 ed 	call (m) $_aanc_ed100_initialize;

    ED100_PARAMETERS *p_ed_pb_params = p_ag->p_ed_pb_params;
84201e8a:	81 f0 0c 88 	rMAC = M[r6 + 48];
    p_ed_pb_params->frame_size = AANC_DEFAULT_FRAME_SIZE;
84201e8e:	0f ee       	M[rMAC + Null] = r5;
    p_ed_pb_params->attack_time = p_params->OFFSET_ED_PB_ATTACK;
84201e90:	62 f0 20 88 	r0 = M[r4 + 128];
84201e94:	4a 8e       	M[rMAC + 4] = r0;
    p_ed_pb_params->decay_time = p_params->OFFSET_ED_PB_DECAY;
84201e96:	62 f0 21 88 	r0 = M[r4 + 132];
84201e9a:	8a 8e       	M[rMAC + 8] = r0;
    p_ed_pb_params->envelope_time = p_params->OFFSET_ED_PB_ENVELOPE;
84201e9c:	62 f0 22 88 	r0 = M[r4 + 136];
84201ea0:	ca 8e       	M[rMAC + 12] = r0;
    p_ed_pb_params->init_frame_time = p_params->OFFSET_ED_PB_INIT_FRAME;
84201ea2:	62 f0 23 88 	r0 = M[r4 + 140];
84201ea6:	0a 8f       	M[rMAC + 16] = r0;
    p_ed_pb_params->ratio = p_params->OFFSET_ED_PB_RATIO;
84201ea8:	62 f0 24 88 	r0 = M[r4 + 144];
84201eac:	4a 8f       	M[rMAC + 20] = r0;
    p_ed_pb_params->min_signal = p_params->OFFSET_ED_PB_MIN_SIGNAL;
84201eae:	62 f0 25 88 	r0 = M[r4 + 148];
84201eb2:	8a 8f       	M[rMAC + 24] = r0;
    p_ed_pb_params->min_max_envelope = p_params->OFFSET_ED_PB_MIN_MAX_ENVELOPE;
84201eb4:	62 f0 26 88 	r0 = M[r4 + 152];
84201eb8:	ca 8f       	M[rMAC + 28] = r0;
    p_ed_pb_params->delta_th = p_params->OFFSET_ED_PB_DELTA_TH;
84201eba:	62 f0 27 88 	r0 = M[r4 + 156];
84201ebe:	0a 9e       	M[rMAC + 32] = r0;
    p_ed_pb_params->count_th = p_params->OFFSET_ED_PB_COUNT_TH;
84201ec0:	62 f0 28 88 	r0 = M[r4 + 160];
84201ec4:	4a 9e       	M[rMAC + 36] = r0;
    p_ed_pb_params->hold_frames = p_params->OFFSET_ED_PB_HOLD_FRAMES;
84201ec6:	62 f0 29 88 	r0 = M[r4 + 164];
84201eca:	8a 9e       	M[rMAC + 40] = r0;
    p_ed_pb_params->e_min_threshold = p_params->OFFSET_ED_PB_E_FILTER_MIN_THRESHOLD;
84201ecc:	62 f0 2a 88 	r0 = M[r4 + 168];
84201ed0:	ca 9e       	M[rMAC + 44] = r0;
    p_ed_pb_params->e_min_counter_threshold = p_params->OFFSET_ED_PB_E_FILTER_MIN_COUNTER_THRESHOLD;
84201ed2:	62 f0 2b 88 	r0 = M[r4 + 172];
84201ed6:	0a 9f       	M[rMAC + 48] = r0;
    p_ed_pb_params->e_min_check_disabled = pb_ed_disable_e_filter_check;
84201ed8:	1a f0 0d 8e 	M[rMAC + 52] = r8;
    aanc_ed100_initialize(p_ag->p_ed_pb);
84201edc:	82 f0 0e 88 	r0 = M[r6 + 56];
84201ee0:	06 f0 2d ea 	call (m) $_aanc_ed100_initialize;

    /* Initialize clip counter (ext and int), duration (in frames) and clip detection*/
    p_ag->clip_duration_ext = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_EXT * AANC_FRAME_RATE) >> 20);
84201ee4:	61 f0 40 88 	rMAC = M[r4 + 256];
84201ee8:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201eec:	d2 52       	r0 = r0 LSHIFT -20;
84201eee:	82 f0 2e 8c 	MH[r6 + 92] = r0;
    p_ag->clip_duration_int = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_INT * AANC_FRAME_RATE) >> 20);
84201ef2:	61 f0 41 88 	rMAC = M[r4 + 260];
84201ef6:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201efa:	d2 52       	r0 = r0 LSHIFT -20;
84201efc:	82 f0 2f 8c 	MH[r6 + 94] = r0;
    p_ag->clip_duration_pb = (uint16) ((p_params->OFFSET_CLIPPING_DURATION_PB * AANC_FRAME_RATE) >> 20);
84201f00:	61 f0 42 88 	rMAC = M[r4 + 264];
84201f04:	7d f1 92 c9 	r0 = rMAC * 250 (int);
84201f08:	d2 52       	r0 = r0 LSHIFT -20;
84201f0a:	82 f0 30 8c 	MH[r6 + 96] = r0;
    p_ag->clip_counter_ext = 0;
84201f0e:	80 f0 31 8c 	MH[r6 + 98] = Null;
    p_ag->clip_counter_int = 0;
84201f12:	80 f0 32 8c 	MH[r6 + 100] = Null;
    p_ag->clip_counter_pb = 0;
84201f16:	80 f0 33 8c 	MH[r6 + 102] = Null;
    p_ag->clipping_detection = 0;
84201f1a:	80 f0 13 8e 	M[r6 + 76] = Null;

    return TRUE;
84201f1e:	42 20       	r0 = Null + 1;

84201f20 <Lc_aanc_proc_initialize_13>:
}
84201f20:	b0 f3 10 cf 	SP = SP + -160;
84201f24:	f5 48       	popm <FP, r4, r5, r6, r7, r8, rLink>;
84201f26:	d8 4c       	rts;

84201f28 <$_aanc_proc_process_data>:

bool aanc_proc_process_data(ADAPTIVE_GAIN *p_ag, bool calculate_gain)
{
84201f28:	f6 1c       	pushm <FP(=SP), r4, r5, r6, r7, r8, r9, rLink>;
84201f2a:	4c 4c       	SP = SP + 48;
84201f2c:	16 00       	r4 = r0 + Null;
84201f2e:	43 de       	M[FP + 32] = r1;
    unsigned clipping_detection = 0;
    bool self_speech = FALSE;
84201f30:	48 de       	M[FP + 36] = Null;

    // Clear all flags connected with processing data but persist quiet mode
    unsigned flags_pre_proc = *p_ag->p_aanc_flags & (AANC_MODEL_MASK | AANC_FLAGS_QUIET_MODE);
84201f32:	f1 b8       	rMAC = M[r4 + 108];
84201f34:	09 e8       	rMAC = M[rMAC + Null];
84201f36:	0f f0 18 f8 	r6 = rMAC AND 0x1f0000;
84201f3a:	00 00 

    // Get config flags
    unsigned config = p_ag->p_aanc_params->OFFSET_AANC_CONFIG;
84201f3c:	b1 b8       	rMAC = M[r4 + 104];
84201f3e:	19 f0 00 e8 	r7 = M[rMAC + Null];
    unsigned debug_config = p_ag->p_aanc_params->OFFSET_AANC_DEBUG;
84201f42:	49 89       	rMAC = M[rMAC + 20];
    bool clip_int_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_INT;
    bool clip_ext_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_EXT;
84201f44:	1b f1 00 00 	r9 = rMAC AND 0x2000;
    bool clip_pb_disable = debug_config & AANC_CONFIG_AANC_DEBUG_DISABLE_CLIPPING_DETECT_PB;
84201f48:	12 f2 00 00 	r0 = rMAC AND 0x4000;
84201f4c:	52 de       	M[FP + 40] = r0;
    bool clip_disable = clip_int_disable && clip_ext_disable && clip_pb_disable;
84201f4e:	1a f0 00 10 	r8 = rMAC AND 0x1000;
84201f52:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_4;

84201f54 <Lc_aanc_proc_process_data_2>:
84201f54:	0f fb 00 c2 	Null = r9 - Null;
84201f58:	06 60       	if EQ jump (m) Lc_aanc_proc_process_data_4;

84201f5a <Lc_aanc_proc_process_data_3>:
84201f5a:	07 00       	r5 = Null + Null;
84201f5c:	52 d8       	r0 = M[FP + 40];
84201f5e:	21 f0 47 ce 	if NE r5 = Null + 1;
84201f62:	02 6e       	jump (m) Lc_aanc_proc_process_data_5;

84201f64 <Lc_aanc_proc_process_data_4>:
84201f64:	07 00       	r5 = Null + Null;

84201f66 <Lc_aanc_proc_process_data_5>:
    // Get control for whether the read pointer is updated or not
    // If MUX_SEL_ALGORITHM we update the read pointer because the input
    // buffer is not copied later. If not we don't update it so that the
    // input buffer is correctly copied to the output.
    unsigned mux_sel_algorithm = \
        debug_config & AANC_CONFIG_AANC_DEBUG_MUX_SEL_ALGORITHM;
84201f66:	c9 c3       	rMAC = rMAC AND 0x100;
84201f68:	59 de       	M[FP + 44] = rMAC;
84201f6a:	0a 00       	r0 = rMAC + Null;
    p_ag->p_fxlms_params->read_ptr_upd = mux_sel_algorithm;
84201f6c:	f1 99       	rMAC = M[r4 + 60];
84201f6e:	8a 9e       	M[rMAC + 40] = r0;

    // Get ED pointer handles
    ED100_STATISTICS *p_ed_int_stats = p_ag->p_ed_int_stats;
84201f70:	31 89       	rMAC = M[r4 + 16];
84201f72:	61 de       	M[FP + 48] = rMAC;
    ED100_STATISTICS *p_ed_ext_stats = p_ag->p_ed_ext_stats;
84201f74:	71 98       	rMAC = M[r4 + 36];
84201f76:	69 de       	M[FP + 52] = rMAC;
    ED100_STATISTICS *p_ed_pb_stats = p_ag->p_ed_pb_stats;
84201f78:	71 99       	rMAC = M[r4 + 52];
84201f7a:	71 de       	M[FP + 56] = rMAC;

    int quiet_mode_lo_threshold = p_ag->p_aanc_params->OFFSET_QUIET_MODE_LO_THRESHOLD;
84201f7c:	b1 b8       	rMAC = M[r4 + 104];
84201f7e:	ca 89       	r0 = M[rMAC + 28];
84201f80:	7a de       	M[FP + 60] = r0;
    int quiet_mode_hi_threshold = p_ag->p_aanc_params->OFFSET_QUIET_MODE_HI_THRESHOLD;
84201f82:	89 89       	rMAC = M[rMAC + 24];
84201f84:	81 de       	M[FP + 64] = rMAC;

    /* Copy input data to internal data buffers */
    cbuffer_copy(p_ag->p_tmp_int_ip, p_ag->p_mic_int_ip, AANC_DEFAULT_FRAME_SIZE);
84201f86:	04 f0 40 40 	r2 = Null + 64;
84201f8a:	b3 b9       	r1 = M[r4 + 120];
84201f8c:	72 88       	r0 = M[r4 + 4];
84201f8e:	ff fd c0 f1 	call (m) 0x3a08c;
84201f92:	3f e7 
    cbuffer_copy(p_ag->p_tmp_ext_ip, p_ag->p_mic_ext_ip, AANC_DEFAULT_FRAME_SIZE);
84201f94:	04 f0 40 40 	r2 = Null + 64;
84201f98:	f3 b9       	r1 = M[r4 + 124];
84201f9a:	b2 89       	r0 = M[r4 + 24];
84201f9c:	ff fd c0 f1 	call (m) 0x3a08c;
84201fa0:	31 e7 

    /* Copy playback data to internal data buffers if connected */
    if (p_ag->p_playback_ip != NULL)
84201fa2:	63 f0 20 88 	r1 = M[r4 + 128];
84201fa6:	07 60       	if EQ jump (m) Lc_aanc_proc_process_data_7;

84201fa8 <Lc_aanc_proc_process_data_6>:
    {
        cbuffer_copy(p_ag->p_tmp_pb_ip, p_ag->p_playback_ip,
                     AANC_DEFAULT_FRAME_SIZE);
84201fa8:	04 f0 40 40 	r2 = Null + 64;
84201fac:	f2 98       	r0 = M[r4 + 44];
84201fae:	ff fd c0 f1 	call (m) 0x3a08c;
84201fb2:	3f e6 

84201fb4 <Lc_aanc_proc_process_data_7>:
    }

    /* Copy fbmon data through if connected */
    if (p_ag->p_fbmon_ip != NULL)
84201fb4:	72 b9       	r0 = M[r4 + 116];
84201fb6:	11 60       	if EQ jump (m) Lc_aanc_proc_process_data_11;

84201fb8 <Lc_aanc_proc_process_data_8>:
    {
        if (p_ag->p_fbmon_op != NULL)
84201fb8:	61 f0 21 88 	rMAC = M[r4 + 132];
84201fbc:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_10;

84201fbe <Lc_aanc_proc_process_data_9>:
        {
            cbuffer_copy(p_ag->p_fbmon_op, p_ag->p_fbmon_ip,
                         AANC_DEFAULT_FRAME_SIZE);
84201fbe:	04 f0 40 40 	r2 = Null + 64;
84201fc2:	13 00       	r1 = r0 + Null;
84201fc4:	0a 00       	r0 = rMAC + Null;
84201fc6:	ff fd c0 f1 	call (m) 0x3a08c;
84201fca:	27 e6 
84201fcc:	06 6e       	jump (m) Lc_aanc_proc_process_data_11;

84201fce <Lc_aanc_proc_process_data_10>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_fbmon_ip, AANC_DEFAULT_FRAME_SIZE);
84201fce:	03 f0 40 40 	r1 = Null + 64;
84201fd2:	ff fd bf f1 	call (m) 0x39f54;
84201fd6:	23 ec 

84201fd8 <Lc_aanc_proc_process_data_11>:
        }
    }

    /* Clipping detection on the input mics */
    if (!(clip_disable))
84201fd8:	38 04       	Null = r5 - Null;
84201fda:	a6 62       	if NE jump (m) Lc_aanc_proc_process_data_51;

84201fdc <Lc_aanc_proc_process_data_12>:
    {
        clipping_detection = aanc_proc_clipping_peak_detect(p_ag);
84201fdc:	32 00       	r0 = r4 + Null;
84201fde:	01 f0 3d e9 	call (m) $_aanc_proc_clipping_peak_detect;
84201fe2:	17 00       	r5 = r0 + Null;

        /* Set timer on int mic if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_INT) && !clip_int_disable)
84201fe4:	f9 c3       	rMAC = r5 AND 0x100;
84201fe6:	0b 60       	if EQ jump (m) Lc_aanc_proc_process_data_15;

84201fe8 <Lc_aanc_proc_process_data_13>:
84201fe8:	0f fa 00 c2 	Null = r8 - Null;
84201fec:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_15;

84201fee <Lc_aanc_proc_process_data_14>:
        {
            p_ag->clip_counter_int = p_ag->clip_duration_int;
84201fee:	61 f0 2f 86 	rMAC = MHU[r4 + 94];
84201ff2:	61 f0 32 8c 	MH[r4 + 100] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_INT;
84201ff6:	f1 a8       	rMAC = M[r4 + 76];
84201ff8:	c9 cb       	rMAC = rMAC OR 0x100;
84201ffa:	f1 ae       	M[r4 + 76] = rMAC;

84201ffc <Lc_aanc_proc_process_data_15>:
        }
        /* Set timer on ext mic if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_EXT) && !clip_ext_disable)
84201ffc:	79 c4       	rMAC = r5 AND 0x200;
84201ffe:	0b 60       	if EQ jump (m) Lc_aanc_proc_process_data_18;

84202000 <Lc_aanc_proc_process_data_16>:
84202000:	0f fb 00 c2 	Null = r9 - Null;
84202004:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_18;

84202006 <Lc_aanc_proc_process_data_17>:
        {
            p_ag->clip_counter_ext = p_ag->clip_duration_ext;
84202006:	61 f0 2e 86 	rMAC = MHU[r4 + 92];
8420200a:	61 f0 31 8c 	MH[r4 + 98] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_EXT;
8420200e:	f1 a8       	rMAC = M[r4 + 76];
84202010:	49 cc       	rMAC = rMAC OR 0x200;
84202012:	f1 ae       	M[r4 + 76] = rMAC;

84202014 <Lc_aanc_proc_process_data_18>:
        }

        /* Set timer on playback if clipping event detected  */
        if ((clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK) && !clip_pb_disable)
84202014:	f9 c4       	rMAC = r5 AND 0x400;
84202016:	0a 60       	if EQ jump (m) Lc_aanc_proc_process_data_21;

84202018 <Lc_aanc_proc_process_data_19>:
84202018:	51 d8       	rMAC = M[FP + 40];
8420201a:	08 62       	if NE jump (m) Lc_aanc_proc_process_data_21;

8420201c <Lc_aanc_proc_process_data_20>:
        {
            p_ag->clip_counter_pb = p_ag->clip_duration_pb;
8420201c:	61 f0 30 86 	rMAC = MHU[r4 + 96];
84202020:	61 f0 33 8c 	MH[r4 + 102] = rMAC;
            p_ag->clipping_detection |= AANC_FLAGS_CLIPPING_PLAYBACK;
84202024:	f1 a8       	rMAC = M[r4 + 76];
84202026:	c9 cc       	rMAC = rMAC OR 0x400;
84202028:	f1 ae       	M[r4 + 76] = rMAC;

8420202a <Lc_aanc_proc_process_data_21>:
        }

        /* Reset int mic clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_int && !(clipping_detection & AANC_FLAGS_CLIPPING_INT))
8420202a:	61 f0 32 86 	rMAC = MHU[r4 + 100];
8420202e:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_24;

84202030 <Lc_aanc_proc_process_data_22>:
84202030:	f9 c3       	rMAC = r5 AND 0x100;
84202032:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_24;

84202034 <Lc_aanc_proc_process_data_23>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_INT_MIC_CLIP_FLAG;
84202034:	f1 a8       	rMAC = M[r4 + 76];
84202036:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffeff;
8420203a:	11 ff ff 1e 
8420203e:	f1 ae       	M[r4 + 76] = rMAC;

84202040 <Lc_aanc_proc_process_data_24>:
        }
        /* Reset ext mic clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_ext && !(clipping_detection & AANC_FLAGS_CLIPPING_EXT))
84202040:	61 f0 31 86 	rMAC = MHU[r4 + 98];
84202044:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_27;

84202046 <Lc_aanc_proc_process_data_25>:
84202046:	79 c4       	rMAC = r5 AND 0x200;
84202048:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_27;

8420204a <Lc_aanc_proc_process_data_26>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_EXT_MIC_CLIP_FLAG;
8420204a:	f1 a8       	rMAC = M[r4 + 76];
8420204c:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffdff;
84202050:	11 ff ff 1d 
84202054:	f1 ae       	M[r4 + 76] = rMAC;

84202056 <Lc_aanc_proc_process_data_27>:
        }
        /* Reset playback clipping flag if timer expires and no clipping event detected */
        if (!p_ag->clip_counter_pb && !(clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK))
84202056:	61 f0 33 86 	rMAC = MHU[r4 + 102];
8420205a:	09 62       	if NE jump (m) Lc_aanc_proc_process_data_30;

8420205c <Lc_aanc_proc_process_data_28>:
8420205c:	f9 c4       	rMAC = r5 AND 0x400;
8420205e:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_30;

84202060 <Lc_aanc_proc_process_data_29>:
        {
            p_ag->clipping_detection &= AANC_PROC_RESET_PLAYBACK_CLIP_FLAG;
84202060:	f1 a8       	rMAC = M[r4 + 76];
84202062:	03 f0 ff ff 	rMAC = rMAC AND 0x7ffffbff;
84202066:	11 ff ff 1b 
8420206a:	f1 ae       	M[r4 + 76] = rMAC;

8420206c <Lc_aanc_proc_process_data_30>:
        }

        if (p_ag->clipping_detection)
8420206c:	f0 a8       	Null = M[r4 + 76];
8420206e:	5c 60       	if EQ jump (m) Lc_aanc_proc_process_data_51;

84202070 <Lc_aanc_proc_process_data_31>:
        {
            /* Copy input data to output if terminals are connected otherwise
             * discard data.
             */
            if (p_ag->p_mic_int_op != NULL)
84202070:	62 f0 22 88 	r0 = M[r4 + 136];
84202074:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_33;

84202076 <Lc_aanc_proc_process_data_32>:
            {
                cbuffer_copy(p_ag->p_mic_int_op, p_ag->p_tmp_int_ip,
                             AANC_DEFAULT_FRAME_SIZE);
84202076:	04 f0 40 40 	r2 = Null + 64;
8420207a:	73 88       	r1 = M[r4 + 4];
8420207c:	ff fd c0 f1 	call (m) 0x3a08c;
84202080:	31 e0 
84202082:	07 6e       	jump (m) Lc_aanc_proc_process_data_34;

84202084 <Lc_aanc_proc_process_data_33>:
            }
            else
            {
                cbuffer_discard_data(p_ag->p_tmp_int_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
84202084:	03 f0 40 40 	r1 = Null + 64;
84202088:	72 88       	r0 = M[r4 + 4];
8420208a:	ff fd bf f1 	call (m) 0x39f54;
8420208e:	2b e6 

84202090 <Lc_aanc_proc_process_data_34>:
            }

            if (p_ag->p_mic_ext_op != NULL)
84202090:	62 f0 23 88 	r0 = M[r4 + 140];
84202094:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_36;

84202096 <Lc_aanc_proc_process_data_35>:
            {
                cbuffer_copy(p_ag->p_mic_ext_op, p_ag->p_tmp_ext_ip,
                             AANC_DEFAULT_FRAME_SIZE);
84202096:	04 f0 40 40 	r2 = Null + 64;
8420209a:	b3 89       	r1 = M[r4 + 24];
8420209c:	ff fd bf f1 	call (m) 0x3a08c;
842020a0:	31 ef 
842020a2:	07 6e       	jump (m) Lc_aanc_proc_process_data_37;

842020a4 <Lc_aanc_proc_process_data_36>:
            }
            else
            {
                cbuffer_discard_data(p_ag->p_tmp_ext_ip,
                                     AANC_DEFAULT_FRAME_SIZE);
842020a4:	03 f0 40 40 	r1 = Null + 64;
842020a8:	b2 89       	r0 = M[r4 + 24];
842020aa:	ff fd bf f1 	call (m) 0x39f54;
842020ae:	2b e5 

842020b0 <Lc_aanc_proc_process_data_37>:
            }

            /* Copy or discard data on the playback stream */
            if (p_ag->p_playback_ip != NULL) {
842020b0:	61 f0 20 88 	rMAC = M[r4 + 128];
842020b4:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_41;

842020b6 <Lc_aanc_proc_process_data_38>:
                if (p_ag->p_playback_op != NULL)
842020b6:	32 b9       	r0 = M[r4 + 112];
842020b8:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_40;

842020ba <Lc_aanc_proc_process_data_39>:
                {
                    cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                                AANC_DEFAULT_FRAME_SIZE);
842020ba:	04 f0 40 40 	r2 = Null + 64;
842020be:	f3 98       	r1 = M[r4 + 44];
842020c0:	ff fd bf f1 	call (m) 0x3a08c;
842020c4:	2d ee 
842020c6:	07 6e       	jump (m) Lc_aanc_proc_process_data_41;

842020c8 <Lc_aanc_proc_process_data_40>:
                }
                else
                {
                    cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                        AANC_DEFAULT_FRAME_SIZE);
842020c8:	03 f0 40 40 	r1 = Null + 64;
842020cc:	f2 98       	r0 = M[r4 + 44];
842020ce:	ff fd bf f1 	call (m) 0x39f54;
842020d2:	27 e4 

842020d4 <Lc_aanc_proc_process_data_41>:
                }
            }

            /* Decrement int mic clip counter and update flag */
            if (p_ag->clip_counter_int && !(clipping_detection & AANC_FLAGS_CLIPPING_INT))
842020d4:	61 f0 32 86 	rMAC = MHU[r4 + 100];
842020d8:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_44;

842020da <Lc_aanc_proc_process_data_42>:
842020da:	fa c3       	r0 = r5 AND 0x100;
842020dc:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_44;

842020de <Lc_aanc_proc_process_data_43>:
            {
                p_ag->clip_counter_int--;
842020de:	49 24       	rMAC = rMAC - 1;
842020e0:	61 f0 32 8c 	MH[r4 + 100] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_INT;
842020e4:	01 f0 00 f8 	r6 = r6 OR 0x100;
842020e8:	58 d8 

842020ea <Lc_aanc_proc_process_data_44>:
            }
            /* Decrement ext mic clip counter and update flag */
            if (p_ag->clip_counter_ext && !(clipping_detection & AANC_FLAGS_CLIPPING_EXT))
842020ea:	61 f0 31 86 	rMAC = MHU[r4 + 98];
842020ee:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_47;

842020f0 <Lc_aanc_proc_process_data_45>:
842020f0:	7a c4       	r0 = r5 AND 0x200;
842020f2:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_47;

842020f4 <Lc_aanc_proc_process_data_46>:
            {
                p_ag->clip_counter_ext--;
842020f4:	49 24       	rMAC = rMAC - 1;
842020f6:	61 f0 31 8c 	MH[r4 + 98] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_EXT;
842020fa:	02 f0 00 f8 	r6 = r6 OR 0x200;
842020fe:	58 d8 

84202100 <Lc_aanc_proc_process_data_47>:
            }
            /* Decrement playback clip counter and update flag */
            if (p_ag->clip_counter_pb && !(clipping_detection & AANC_FLAGS_CLIPPING_PLAYBACK))
84202100:	61 f0 33 86 	rMAC = MHU[r4 + 102];
84202104:	09 60       	if EQ jump (m) Lc_aanc_proc_process_data_50;

84202106 <Lc_aanc_proc_process_data_48>:
84202106:	fa c4       	r0 = r5 AND 0x400;
84202108:	07 62       	if NE jump (m) Lc_aanc_proc_process_data_50;

8420210a <Lc_aanc_proc_process_data_49>:
            {
                p_ag->clip_counter_pb--;
8420210a:	49 24       	rMAC = rMAC - 1;
8420210c:	61 f0 33 8c 	MH[r4 + 102] = rMAC;
                flags_pre_proc |= AANC_FLAGS_CLIPPING_PLAYBACK;
84202110:	04 f0 00 f8 	r6 = r6 OR 0x400;
84202114:	58 d8 

84202116 <Lc_aanc_proc_process_data_50>:
            }

            flags_pre_proc |= p_ag->clipping_detection;
84202116:	f1 a8       	rMAC = M[r4 + 76];
84202118:	00 f1 78 c8 	r6 = r6 OR rMAC;
            *p_ag->p_aanc_flags = flags_pre_proc;
8420211c:	f1 b8       	rMAC = M[r4 + 108];
8420211e:	18 f0 00 ee 	M[rMAC + Null] = r6;
            return FALSE;
84202122:	02 00       	r0 = Null + Null;
84202124:	9e 6e       	jump (m) Lc_aanc_proc_process_data_87;

84202126 <Lc_aanc_proc_process_data_51>:
        }
    }

    /* ED process ext mic */
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_EXT))
84202126:	91 f0 02 00 	rMAC = r7 AND 0x2;
8420212a:	1b 62       	if NE jump (m) Lc_aanc_proc_process_data_58;

8420212c <Lc_aanc_proc_process_data_52>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_ext_ip, p_ag->p_ed_ext);
8420212c:	b3 98       	r1 = M[r4 + 40];
8420212e:	b2 89       	r0 = M[r4 + 24];
84202130:	05 f0 21 ea 	call (m) $_aanc_ed100_process_data;

        /* Catch external ED detection */
        if (p_ed_ext_stats->detection)
84202134:	69 d8       	rMAC = M[FP + 52];
84202136:	c8 88       	Null = M[rMAC + 12];
84202138:	03 60       	if EQ jump (m) Lc_aanc_proc_process_data_54;

8420213a <Lc_aanc_proc_process_data_53>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_EXT;
8420213a:	10 f8 58 c8 	r6 = r6 OR 0x20;

8420213e <Lc_aanc_proc_process_data_54>:
            L4_DBG_MSG("AANC_PROC ED Ext Detection");
        }

        /* Threshold detect on external ED */
        if (p_ed_ext_stats->spl < quiet_mode_lo_threshold)
8420213e:	69 d8       	rMAC = M[FP + 52];
84202140:	09 e8       	rMAC = M[rMAC + Null];
84202142:	7a d8       	r0 = M[FP + 60];
84202144:	88 04       	Null = rMAC - r0;
84202146:	06 66       	if GE jump (m) Lc_aanc_proc_process_data_56;

84202148 <Lc_aanc_proc_process_data_55>:
        {
            L4_DBG_MSG("AANC_PROC ED Ext below quiet mode low threshold");
            /* Set quiet mode flag */
            flags_pre_proc |= AANC_FLAGS_QUIET_MODE;
84202148:	01 f0 00 f0 	r6 = r6 OR 0x100000;
8420214c:	00 f8 58 c8 
84202150:	08 6e       	jump (m) Lc_aanc_proc_process_data_58;

84202152 <Lc_aanc_proc_process_data_56>:
        }
        else if (p_ed_ext_stats->spl > quiet_mode_hi_threshold)
84202152:	82 d8       	r0 = M[FP + 64];
84202154:	88 04       	Null = rMAC - r0;
84202156:	05 6c       	if LE jump (m) Lc_aanc_proc_process_data_58;

84202158 <Lc_aanc_proc_process_data_57>:
        {
            /* Reset quiet mode flag */
            flags_pre_proc &= AANC_PROC_QUIET_MODE_RESET_FLAG;
84202158:	03 f0 f7 ff 	r6 = r6 AND 0x7fefffff;
8420215c:	88 ff ff 1f 

84202160 <Lc_aanc_proc_process_data_58>:
        }
    }

    /* ED process int mic */
    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_INT))
84202160:	91 f0 01 00 	rMAC = r7 AND 0x1;
84202164:	0a 62       	if NE jump (m) Lc_aanc_proc_process_data_61;

84202166 <Lc_aanc_proc_process_data_59>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_int_ip, p_ag->p_ed_int);
84202166:	73 89       	r1 = M[r4 + 20];
84202168:	72 88       	r0 = M[r4 + 4];
8420216a:	05 f0 27 e8 	call (m) $_aanc_ed100_process_data;
        if (p_ed_int_stats->detection)
8420216e:	61 d8       	rMAC = M[FP + 48];
84202170:	c8 88       	Null = M[rMAC + 12];
84202172:	03 60       	if EQ jump (m) Lc_aanc_proc_process_data_61;

84202174 <Lc_aanc_proc_process_data_60>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_INT;
84202174:	08 f8 58 c8 	r6 = r6 OR 0x10;

84202178 <Lc_aanc_proc_process_data_61>:
            L4_DBG_MSG("AANC_PROC: ED Int Detection");
        }
    }

    if (!(config & AANC_CONFIG_AANC_CONFIG_DISABLE_SELF_SPEECH))
84202178:	91 f0 08 00 	rMAC = r7 AND 0x8;
8420217c:	0d 62       	if NE jump (m) Lc_aanc_proc_process_data_64;

8420217e <Lc_aanc_proc_process_data_62>:
    {
        /* ED process self-speech */
        self_speech = aanc_ed100_self_speech_detect(
            p_ag->p_ed_int, p_ag->p_ed_ext,
            p_ag->p_aanc_params->OFFSET_SELF_SPEECH_THRESHOLD);
8420217e:	b1 b8       	rMAC = M[r4 + 104];
84202180:	b3 98       	r1 = M[r4 + 40];
84202182:	14 f0 4e 88 	r2 = M[rMAC + 312];
84202186:	72 89       	r0 = M[r4 + 20];
84202188:	05 f0 37 ed 	call (m) $_aanc_ed100_self_speech_detect;
8420218c:	4a de       	M[FP + 36] = r0;
        if (self_speech)
8420218e:	11 00       	rMAC = r0 + Null;
84202190:	03 60       	if EQ jump (m) Lc_aanc_proc_process_data_64;

84202192 <Lc_aanc_proc_process_data_63>:
        {
            flags_pre_proc |= AANC_FLAGS_SELF_SPEECH;
84202192:	40 f8 58 c8 	r6 = r6 OR 0x80;

84202196 <Lc_aanc_proc_process_data_64>:
        }
    }

    /* ED process playback */
    if (p_ag->p_playback_ip != NULL &&
        !(config & AANC_CONFIG_AANC_CONFIG_DISABLE_ED_PB))
84202196:	61 f0 20 88 	rMAC = M[r4 + 128];
8420219a:	0d 60       	if EQ jump (m) Lc_aanc_proc_process_data_68;

8420219c <Lc_aanc_proc_process_data_65>:
8420219c:	91 f0 04 00 	rMAC = r7 AND 0x4;
842021a0:	0a 62       	if NE jump (m) Lc_aanc_proc_process_data_68;

842021a2 <Lc_aanc_proc_process_data_66>:
    {
        aanc_ed100_process_data(p_ag->p_tmp_pb_ip, p_ag->p_ed_pb);
842021a2:	b3 99       	r1 = M[r4 + 56];
842021a4:	f2 98       	r0 = M[r4 + 44];
842021a6:	05 f0 2b e6 	call (m) $_aanc_ed100_process_data;
        if (p_ed_pb_stats->detection)
842021aa:	71 d8       	rMAC = M[FP + 56];
842021ac:	c8 88       	Null = M[rMAC + 12];
842021ae:	03 60       	if EQ jump (m) Lc_aanc_proc_process_data_68;

842021b0 <Lc_aanc_proc_process_data_67>:
        {
            flags_pre_proc |= AANC_FLAGS_ED_PLAYBACK;
842021b0:	20 f8 58 c8 	r6 = r6 OR 0x40;

842021b4 <Lc_aanc_proc_process_data_68>:
            L4_DBG_MSG("AANC_PROC: ED Playback Detection");
        }
    }

    /* Update flags */
    *p_ag->p_aanc_flags = flags_pre_proc;
842021b4:	f1 b8       	rMAC = M[r4 + 108];
842021b6:	18 f0 00 ee 	M[rMAC + Null] = r6;

    /* Reference the working buffer used at the end to copy or discard data.
     * If adaptive gain calculation runs this is updated to the temporary output
     * buffers.
     */
    tCbuffer *p_int_working_buffer = p_ag->p_tmp_int_ip;
842021ba:	77 88       	r5 = M[r4 + 4];
    tCbuffer *p_ext_working_buffer = p_ag->p_tmp_ext_ip;
842021bc:	68 f0 06 88 	r6 = M[r4 + 24];

    /* Call adaptive ANC function */
    if (!p_ed_ext_stats->detection && !p_ed_int_stats->detection &&
        !p_ed_pb_stats->detection  && !self_speech && calculate_gain)
842021c0:	69 d8       	rMAC = M[FP + 52];
842021c2:	c8 88       	Null = M[rMAC + 12];
842021c4:	1b 62       	if NE jump (m) Lc_aanc_proc_process_data_76;

842021c6 <Lc_aanc_proc_process_data_69>:
842021c6:	61 d8       	rMAC = M[FP + 48];
842021c8:	c8 88       	Null = M[rMAC + 12];
842021ca:	18 62       	if NE jump (m) Lc_aanc_proc_process_data_76;

842021cc <Lc_aanc_proc_process_data_70>:
842021cc:	71 d8       	rMAC = M[FP + 56];
842021ce:	c8 88       	Null = M[rMAC + 12];
842021d0:	15 62       	if NE jump (m) Lc_aanc_proc_process_data_76;

842021d2 <Lc_aanc_proc_process_data_71>:
842021d2:	49 d8       	rMAC = M[FP + 36];
842021d4:	13 62       	if NE jump (m) Lc_aanc_proc_process_data_76;

842021d6 <Lc_aanc_proc_process_data_72>:
842021d6:	41 d8       	rMAC = M[FP + 32];
842021d8:	11 60       	if EQ jump (m) Lc_aanc_proc_process_data_76;

842021da <Lc_aanc_proc_process_data_73>:
    {
        L5_DBG_MSG("AANC_PROC: Calculate new gain");
        if (aanc_fxlms100_process_data(p_ag->p_fxlms))
842021da:	72 a8       	r0 = M[r4 + 68];
842021dc:	03 f0 3f e8 	call (m) $_aanc_fxlms100_process_data;
842021e0:	10 04       	Null = r0 - Null;
842021e2:	0c 60       	if EQ jump (m) Lc_aanc_proc_process_data_76;

842021e4 <Lc_aanc_proc_process_data_74>:
        {
            *p_ag->p_aanc_flags |= p_ag->p_fxlms_stats->flags;
842021e4:	f1 b8       	rMAC = M[r4 + 108];
842021e6:	32 a8       	r0 = M[r4 + 64];
842021e8:	0b e8       	r1 = M[rMAC + Null];
842021ea:	12 e8       	r0 = M[r0 + Null];
842021ec:	d2 12       	r0 = r0 OR r1;
842021ee:	0a ee       	M[rMAC + Null] = r0;
            if (mux_sel_algorithm)
842021f0:	59 d8       	rMAC = M[FP + 44];
842021f2:	04 60       	if EQ jump (m) Lc_aanc_proc_process_data_76;

842021f4 <Lc_aanc_proc_process_data_75>:
            {
                p_int_working_buffer = p_ag->p_tmp_int_op;
842021f4:	b7 88       	r5 = M[r4 + 8];
                p_ext_working_buffer = p_ag->p_tmp_ext_op;
842021f6:	68 f0 07 88 	r6 = M[r4 + 28];

842021fa <Lc_aanc_proc_process_data_76>:
    }

    /* Copy internal buffers to the output buffers if they are connected
    * otherwise discard the data.
    */
    if (p_ag->p_mic_int_op != NULL)
842021fa:	62 f0 22 88 	r0 = M[r4 + 136];
842021fe:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_78;

84202200 <Lc_aanc_proc_process_data_77>:
    {
        cbuffer_copy(p_ag->p_mic_int_op, p_int_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
84202200:	04 f0 40 40 	r2 = Null + 64;
84202204:	3b 00       	r1 = r5 + Null;
84202206:	ff fd bf f1 	call (m) 0x3a08c;
8420220a:	27 e4 
8420220c:	07 6e       	jump (m) Lc_aanc_proc_process_data_79;

8420220e <Lc_aanc_proc_process_data_78>:
    }
    else
    {
        cbuffer_discard_data(p_int_working_buffer, AANC_DEFAULT_FRAME_SIZE);
8420220e:	03 f0 40 40 	r1 = Null + 64;
84202212:	3a 00       	r0 = r5 + Null;
84202214:	ff fd be f1 	call (m) 0x39f54;
84202218:	21 ea 

8420221a <Lc_aanc_proc_process_data_79>:
    }

    if (p_ag->p_mic_ext_op != NULL)
8420221a:	62 f0 23 88 	r0 = M[r4 + 140];
8420221e:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_81;

84202220 <Lc_aanc_proc_process_data_80>:
    {
        cbuffer_copy(p_ag->p_mic_ext_op, p_ext_working_buffer,
                        AANC_DEFAULT_FRAME_SIZE);
84202220:	04 f0 40 40 	r2 = Null + 64;
84202224:	43 08       	r1 = r6 + Null;
84202226:	ff fd bf f1 	call (m) 0x3a08c;
8420222a:	27 e3 
8420222c:	07 6e       	jump (m) Lc_aanc_proc_process_data_82;

8420222e <Lc_aanc_proc_process_data_81>:
    }
    else
    {
        cbuffer_discard_data(p_ext_working_buffer, AANC_DEFAULT_FRAME_SIZE);
8420222e:	03 f0 40 40 	r1 = Null + 64;
84202232:	42 08       	r0 = r6 + Null;
84202234:	ff fd be f1 	call (m) 0x39f54;
84202238:	21 e9 

8420223a <Lc_aanc_proc_process_data_82>:
    }

    /* Copy or discard data on the internal playback stream buffer */
    if (p_ag->p_playback_ip != NULL) {
8420223a:	61 f0 20 88 	rMAC = M[r4 + 128];
8420223e:	10 60       	if EQ jump (m) Lc_aanc_proc_process_data_86;

84202240 <Lc_aanc_proc_process_data_83>:
        if (p_ag->p_playback_op != NULL)
84202240:	32 b9       	r0 = M[r4 + 112];
84202242:	08 60       	if EQ jump (m) Lc_aanc_proc_process_data_85;

84202244 <Lc_aanc_proc_process_data_84>:
        {
            cbuffer_copy(p_ag->p_playback_op, p_ag->p_tmp_pb_ip,
                        AANC_DEFAULT_FRAME_SIZE);
84202244:	04 f0 40 40 	r2 = Null + 64;
84202248:	f3 98       	r1 = M[r4 + 44];
8420224a:	ff fd bf f1 	call (m) 0x3a08c;
8420224e:	23 e2 
84202250:	07 6e       	jump (m) Lc_aanc_proc_process_data_86;

84202252 <Lc_aanc_proc_process_data_85>:
        }
        else
        {
            cbuffer_discard_data(p_ag->p_tmp_pb_ip,
                                 AANC_DEFAULT_FRAME_SIZE);
84202252:	03 f0 40 40 	r1 = Null + 64;
84202256:	f2 98       	r0 = M[r4 + 44];
84202258:	ff fd be f1 	call (m) 0x39f54;
8420225c:	3d e7 

8420225e <Lc_aanc_proc_process_data_86>:
        }
    }

    return TRUE;
8420225e:	42 20       	r0 = Null + 1;

84202260 <Lc_aanc_proc_process_data_87>:
}
84202260:	74 4c       	SP = SP + -48;
84202262:	f6 48       	popm <FP, r4, r5, r6, r7, r8, r9, rLink>;
84202264:	d8 4c       	rts;

84202266 <Lc_aanc_proc_create_ed_1>:
 */
static bool aanc_proc_create_ed(ED100_PARAMETERS **pp_params,
                                ED100_STATISTICS **pp_stats,
                                void **pp_ed,
                                unsigned sample_rate)
{
84202266:	f4 1c       	pushm <FP(=SP), r4, r5, r6, r7, rLink>;
84202268:	16 00       	r4 = r0 + Null;
8420226a:	1f 00       	r5 = r1 + Null;
8420226c:	21 09       	r7 = r2 + Null;
8420226e:	28 09       	r6 = r3 + Null;
    /* Allocate parameters */
    *pp_params = xzpnew(ED100_PARAMETERS);
84202270:	c3 20       	r1 = Null + 3;
84202272:	02 3a       	r0 = Null + 56;
84202274:	ff fd 23 f0 	call (m) 0x68a6;
84202278:	33 e1 
    if (*pp_params == NULL)
8420227a:	32 ee       	M[r4 + Null] = r0;
8420227c:	1a 60       	if EQ jump (m) Lc_aanc_proc_create_ed_6;

8420227e <Lc_aanc_proc_create_ed_2>:
    {
        return FALSE;
    }

    /* Allocate statistics */
    *pp_stats = xzpnew(ED100_STATISTICS);
8420227e:	c3 20       	r1 = Null + 3;
84202280:	02 29       	r0 = Null + 20;
84202282:	ff fd 23 f0 	call (m) 0x68a6;
84202286:	25 e1 
    if (*pp_stats == NULL)
84202288:	3a ee       	M[r5 + Null] = r0;
8420228a:	0e 60       	if EQ jump (m) Lc_aanc_proc_create_ed_5;

8420228c <Lc_aanc_proc_create_ed_3>:

        return FALSE;
    }

    /* Create the ED object */
    if (!aanc_ed100_create(pp_ed, *pp_params, *pp_stats, sample_rate))
8420228c:	33 e8       	r1 = M[r4 + Null];
8420228e:	45 08       	r3 = r6 + Null;
84202290:	14 00       	r2 = r0 + Null;
84202292:	4a 08       	r0 = r7 + Null;
84202294:	03 f0 23 ef 	call (m) $_aanc_ed100_create;
84202298:	10 04       	Null = r0 - Null;
8420229a:	0d 62       	if NE jump (m) Lc_aanc_proc_create_ed_7;

8420229c <Lc_aanc_proc_create_ed_4>:
    {
        pdelete(*pp_stats);
8420229c:	3a e8       	r0 = M[r5 + Null];
8420229e:	ff fd 23 f0 	call (m) 0x68d8;
842022a2:	3b e1 
        *pp_stats = NULL;
842022a4:	38 ee       	M[r5 + Null] = Null;

842022a6 <Lc_aanc_proc_create_ed_5>:

    /* Allocate statistics */
    *pp_stats = xzpnew(ED100_STATISTICS);
    if (*pp_stats == NULL)
    {
        pdelete(*pp_params);
842022a6:	32 e8       	r0 = M[r4 + Null];
842022a8:	ff fd 23 f0 	call (m) 0x68d8;
842022ac:	31 e1 
        *pp_params = NULL;
842022ae:	30 ee       	M[r4 + Null] = Null;

842022b0 <Lc_aanc_proc_create_ed_6>:
{
    /* Allocate parameters */
    *pp_params = xzpnew(ED100_PARAMETERS);
    if (*pp_params == NULL)
    {
        return FALSE;
842022b0:	02 00       	r0 = Null + Null;
842022b2:	02 6e       	jump (m) Lc_aanc_proc_create_ed_8;

842022b4 <Lc_aanc_proc_create_ed_7>:
        *pp_params = NULL;

        return FALSE;
    }

    return TRUE;
842022b4:	42 20       	r0 = Null + 1;

842022b6 <Lc_aanc_proc_create_ed_8>:
}
842022b6:	f4 48       	popm <FP, r4, r5, r6, r7, rLink>;
842022b8:	d8 4c       	rts;

842022ba <Lc_aanc_proc_destroy_ed_1>:
 * \return  boolean indicating success or failure.
 */
static void aanc_proc_destroy_ed(ED100_PARAMETERS **pp_params,
                                 ED100_STATISTICS **pp_stats,
                                 void **pp_ed)
{
842022ba:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
842022bc:	1e 00       	r4 = r1 + Null;
842022be:	27 00       	r5 = r2 + Null;
    pdelete(*pp_params);
842022c0:	12 e8       	r0 = M[r0 + Null];
842022c2:	ff fd 23 f0 	call (m) 0x68d8;
842022c6:	37 e0 
    pdelete(*pp_stats);
842022c8:	32 e8       	r0 = M[r4 + Null];
842022ca:	ff fd 23 f0 	call (m) 0x68d8;
842022ce:	2f e0 

    aanc_ed100_destroy(pp_ed);
842022d0:	3a 00       	r0 = r5 + Null;
842022d2:	05 f0 33 e0 	call (m) $_aanc_ed100_destroy;

842022d6 <Lc_aanc_proc_destroy_ed_2>:

    return;
842022d6:	f2 48       	popm <FP, r4, r5, rLink>;
842022d8:	d8 4c       	rts;

842022da <Lc_aanc_proc_create_cbuffer_1>:
 * \param  malloc_pref  Malloc preference.
 *
 * \return  boolean indicating success or failure.
 */
static bool aanc_proc_create_cbuffer(tCbuffer **pp_buffer, unsigned malloc_pref)
{
842022da:	f2 1c       	pushm <FP(=SP), r4, r5, rLink>;
842022dc:	16 00       	r4 = r0 + Null;
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_INTERNAL_BUFFER_SIZE, int, malloc_pref);
842022de:	02 f0 04 41 	r0 = Null + 260;
842022e2:	ff fd 22 f0 	call (m) 0x68a6;
842022e6:	25 ee 
842022e8:	17 00       	r5 = r0 + Null;

    if (ptr == NULL)
842022ea:	0e 60       	if EQ jump (m) Lc_aanc_proc_create_cbuffer_4;

842022ec <Lc_aanc_proc_create_cbuffer_2>:
        return FALSE;
    }

    /* Wrap allocated memory in a cbuffer */
    *pp_buffer = cbuffer_create(ptr, AANC_INTERNAL_BUFFER_SIZE,
                               BUF_DESC_SW_BUFFER);
842022ec:	03 f0 41 40 	r1 = Null + 65;
842022f0:	04 00       	r2 = Null + Null;
842022f2:	ff fd 8f f0 	call (m) 0x1429c;
842022f6:	2b ed 
842022f8:	32 ee       	M[r4 + Null] = r0;
    if (*pp_buffer == NULL)
842022fa:	31 e8       	rMAC = M[r4 + Null];
842022fc:	07 62       	if NE jump (m) Lc_aanc_proc_create_cbuffer_5;

842022fe <Lc_aanc_proc_create_cbuffer_3>:
    {
        pdelete(ptr);
842022fe:	3a 00       	r0 = r5 + Null;
84202300:	ff fd 22 f0 	call (m) 0x68d8;
84202304:	39 ee 

84202306 <Lc_aanc_proc_create_cbuffer_4>:
    /* Allocate buffer memory explicitly */
    int *ptr = xzppnewn(AANC_INTERNAL_BUFFER_SIZE, int, malloc_pref);

    if (ptr == NULL)
    {
        return FALSE;
84202306:	02 00       	r0 = Null + Null;
84202308:	02 6e       	jump (m) Lc_aanc_proc_create_cbuffer_6;

8420230a <Lc_aanc_proc_create_cbuffer_5>:
        ptr = NULL;

        return FALSE;
    }

    return TRUE;
8420230a:	42 20       	r0 = Null + 1;

8420230c <Lc_aanc_proc_create_cbuffer_6>:
}
8420230c:	f2 48       	popm <FP, r4, r5, rLink>;
8420230e:	d8 4c       	rts;

84202310 <$kdc_start>:
.MODULE $M.kdc_start;
.CODESEGMENT PM;
.DATASEGMENT DM;

$kdc_start:
r0 = $_aanc_mono_16k_cap_data;
84202310:	07 f0 02 f0 	r0 = Null + 7340032;
84202314:	00 40 
    /* Force this symbol to be exported in ELF */
    Null = $___kymera_debug_map_addr;
84202316:	20 f0 f8 42 	Null = Null + 17144;

8420231a <$_aanc_proc_clipping_peak_detect>:
.MODULE $M.aanc_proc.clipping_peak_detect;
    .CODESEGMENT PM;

$_aanc_proc_clipping_peak_detect:

    PUSH_ALL_C;
8420231a:	fc fa 40 e0 	pushm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
8420231e:	07 f0 47 e4 	pushm <I0, I1, I2, I4, I5, I6>;
84202322:	70 ff 40 e4 	pushm <M0, M1, M2, L0, L1, L4, L5>;

    r9 = r0;
84202326:	13 09       	r9 = r0 + Null;
    r4 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.CLIP_THRESHOLD_FIELD];
84202328:	b6 f0 12 88 	r4 = M[r9 + 72];

    // Get cbuffer details for DM1 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_INT_IP_FIELD];
8420232c:	b2 f0 01 88 	r0 = M[r9 + 4];
    call $cbuffer.get_read_address_and_size_and_start_address;
84202330:	ff fd bf f1 	call (m) 0x3a27a;
84202334:	2b ea 
    push r2;
84202336:	00 f0 34 cf 	push r2;
    pop B0;
8420233a:	00 f6 3a cf 	pop B0;
    I0 = r0;
8420233e:	10 0a       	I0 = r0 + Null;
    L0 = r1;
84202340:	1c 0b       	L0 = r1 + Null;

    // Get cbuffer details for DM2 input
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_EXT_IP_FIELD];
84202342:	b2 f0 06 88 	r0 = M[r9 + 24];
    call $cbuffer.get_read_address_and_size_and_start_address;
84202346:	ff fd bf f1 	call (m) 0x3a27a;
8420234a:	35 e9 
    push r2;
8420234c:	00 f0 34 cf 	push r2;
    pop B4;
84202350:	00 f6 3c cf 	pop B4;
    I4 = r0;
84202354:	14 0a       	I4 = r0 + Null;
    L4 = r1;
84202356:	1e 0b       	L4 = r1 + Null;

    r10 = $aanc_proc.FRAME_SIZE;
84202358:	0c f0 40 40 	r10 = Null + 64;

    r3 = 0;
8420235c:	05 00       	r3 = Null + Null;
    r5 = $M.AANC.FLAGS.CLIPPING_INT;
8420235e:	07 f0 00 41 	r5 = Null + 256;
    r6 = $M.AANC.FLAGS.CLIPPING_EXT;
84202362:	08 f0 00 42 	r6 = Null + 512;

    r7 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.INT_PEAK_VALUE_FIELD];
84202366:	b9 f0 15 88 	r7 = M[r9 + 84];
    r8 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.EXT_PEAK_VALUE_FIELD];
8420236a:	ba f0 14 88 	r8 = M[r9 + 80];

    do detect_mic_clipping;
8420236e:	11 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_mic_clipping;
        r0 = M[I0, MK1], r2 = M[I4, MK1];
84202370:	41 f1 32 d0 	Null = Null + Null, r0 = M[I0,4], r2 = M[I4,4];
        r0 = ABS r0; // r0 = Int Mic (I0)
84202374:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect int mic
84202378:	6f f2 49 ce 	r7 = MAX r0;
        r2 = ABS r2; // r2 = Ext Mic (I4)
8420237c:	4f f4 44 ce 	r2 = ABS r2;
        r8 = MAX r2; // Peak detect ext mic
84202380:	6f f4 4a ce 	r8 = MAX r2;
        Null = r0 - r4;
84202384:	90 05       	Null = r0 - r4;
        if GE r3 = r3 OR r5;
84202386:	7a f5 45 c8 	if GE r3 = r3 OR r5;
        Null = r2 - r4;
8420238a:	a0 05       	Null = r2 - r4;
        if GE r3 = r3 OR r6;
8420238c:	8a f5 45 c8 	if GE r3 = r3 OR r6;

84202390 <$M.aanc_proc.clipping_peak_detect.detect_mic_clipping>:
    detect_mic_clipping:

    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.INT_PEAK_VALUE_FIELD] = r7;
84202390:	b9 f0 15 8e 	M[r9 + 84] = r7;
    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.EXT_PEAK_VALUE_FIELD] = r8;
84202394:	ba f0 14 8e 	M[r9 + 80] = r8;

    // Do clipping and peak detect on the playback channel
    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_PLAYBACK_IP_FIELD];
84202398:	b2 f0 20 88 	r0 = M[r9 + 128];
    if Z jump done_detection;
8420239c:	1e 60       	if EQ jump (m) $M.aanc_proc.clipping_peak_detect.done_detection;

    r0 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.P_TMP_PB_IP_FIELD];
8420239e:	b2 f0 0b 88 	r0 = M[r9 + 44];
    call $cbuffer.get_read_address_and_size_and_start_address;
842023a2:	ff fd bf f1 	call (m) 0x3a27a;
842023a6:	39 e6 
    push r2;
842023a8:	00 f0 34 cf 	push r2;
    pop B0;
842023ac:	00 f6 3a cf 	pop B0;
    I0 = r0;
842023b0:	10 0a       	I0 = r0 + Null;
    L0 = r1;
842023b2:	1c 0b       	L0 = r1 + Null;

    r10 = $aanc_proc.FRAME_SIZE;
842023b4:	0c f0 40 40 	r10 = Null + 64;
    r5 = $M.AANC.FLAGS.CLIPPING_PLAYBACK;
842023b8:	07 f0 00 48 	r5 = Null + 1024;
    r7 = M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.PB_PEAK_VALUE_FIELD];
842023bc:	b9 f0 16 88 	r7 = M[r9 + 88];
    do detect_pb_clipping;
842023c0:	0a 4c       	do (m) $M.aanc_proc.clipping_peak_detect.detect_pb_clipping;
        r0 = M[I0, MK1];
842023c2:	21 f0 30 c0 	Null = Null + Null, r0 = M[I0,4];
        r0 = ABS r0; // r0 = Playback (I0)
842023c6:	4f f2 42 ce 	r0 = ABS r0;
        r7 = MAX r0; // Peak detect playback signal
842023ca:	6f f2 49 ce 	r7 = MAX r0;
        Null = r0 - r4;
842023ce:	90 05       	Null = r0 - r4;
        if GE r3 = r3 OR r5;
842023d0:	7a f5 45 c8 	if GE r3 = r3 OR r5;

842023d4 <$M.aanc_proc.clipping_peak_detect.detect_pb_clipping>:
    detect_pb_clipping:

    M[r9 + $aanc_proc._ADAPTIVE_GAIN_struct.PB_PEAK_VALUE_FIELD] = r7;
842023d4:	b9 f0 16 8e 	M[r9 + 88] = r7;

842023d8 <$M.aanc_proc.clipping_peak_detect.done_detection>:

done_detection:
    POP_ALL_C; // POP_ALL_C won't touch r0-r3
842023d8:	70 ff 60 e4 	popm <M0, M1, M2, L0, L1, L4, L5>;
842023dc:	07 f0 67 e4 	popm <I0, I1, I2, I4, I5, I6>;
842023e0:	fc fa 60 e0 	popm <r4, r5, r6, r7, r8, r9, rLink, rMACB>;
    r0 = r3;   // Set return value after POP to remove pop rlink-rts stall
842023e4:	2a 00       	r0 = r3 + Null;

    rts;
842023e6:	d8 4c       	rts;

842023e8 <$_aanc_proc_calc_gain_db>:
.MODULE $M.aanc_proc.calc_gain_db;
    .CODESEGMENT PM;

$_aanc_proc_calc_gain_db:

    pushm <r6, rLink>;
842023e8:	90 1c       	pushm <r6, rLink>;

    Null = r0;
842023ea:	10 00       	Null = r0 + Null;
    if Z jump return_early;
842023ec:	0e 60       	if EQ jump (m) $M.aanc_proc.calc_gain_db.return_early;

842023ee <$M.aanc_proc.calc_gain_db.calc_fine_gain_db>:

calc_fine_gain_db:
    rMAC = r0; // Copy fine gain to rMAC, in Q40.32
842023ee:	11 00       	rMAC = r0 + Null;
    r3 = r1 * $aanc_proc.COARSE_GAIN_TO_DB (int); // Store coarse gain dB value in r3
842023f0:	9d 41       	r3 = r1 * 6 (int);

    // Fine gain measured relative to 128, so needs to be scaled by 2^-7
    // log2_table takes input (rMAC) in Q9.63, so shift rMAC by 63-32-7=24
    rMAC = rMAC ASHIFT $aanc_proc.FINE_GAIN_LOG2_SHIFT_AMT (72bit);
842023f2:	49 5f       	rMAC = rMAC ASHIFT 24 (56bit);
    r3 = r3 ASHIFT $aanc_proc.COARSE_GAIN_DB_SHIFT_AMT; // Coarse gain (dB) in Q12.20
842023f4:	ed 5e       	r3 = r3 ASHIFT 20;

    call $math.log2_table;
842023f6:	ff fd 90 f3 	call 0x745ac;
842023fa:	36 ed 

    // Convert to dB by using multiplying factor of 20/log2(10)
    rMAC = r0 * $aanc_proc.LOG2_TO_DB_CONV_FACTOR;
842023fc:	02 f3 30 fa 	rMAC = r0 * 0.376287494786083698272705078125 (SS);
84202400:	4a f2 d1 cc 
    r0 = rMAC + r3; // Add coarse gain (dB) and fine gain (dB)
84202404:	4a 01       	r0 = rMAC + r3;
    jump return_db_gain;
84202406:	04 6e       	jump (m) $M.aanc_proc.calc_gain_db.return_db_gain;

84202408 <$M.aanc_proc.calc_gain_db.return_early>:

return_early:
    r0 = MININT;
84202408:	00 f8 02 f0 	r0 = Null + -2147483648;
8420240c:	00 40 

8420240e <$M.aanc_proc.calc_gain_db.return_db_gain>:

return_db_gain:
    popm <r6, rLink>;
8420240e:	90 48       	popm <r6, rLink>;

    rts;
84202410:	d8 4c       	rts;
